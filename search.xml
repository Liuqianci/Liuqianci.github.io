<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1、CPU调试支持</title>
    <url>/2025/%E8%BD%AF%E4%BB%B6%E8%B0%83%E8%AF%95/%E8%BD%AF%E4%BB%B6%E8%B0%83%E8%AF%95/CPU%E8%B0%83%E8%AF%95%E6%94%AF%E6%8C%81/</url>
    <content><![CDATA[<h1 id="软件断点">软件断点</h1>
<p>软件断点就是INT3指令</p>
<ul>
<li>机器码为1字节，内存ASCII码为0xCC，经典的“烫烫烫烫”；</li>
<li>IDE下断点，就是在那条指令的位置插入INT3，或者那个字节替换为0xCC;</li>
<li>软件断点没有数量限制，很有灵活性</li>
<li>软件断点的局限性：
<ul>
<li>由于软件断点是插入或者修改指令，对于在ROM(只读存储器)中执行的程序比如BIOS或者其他固件程序，无法动态增加软件断点，只能用硬件断点；</li>
<li>属于代码类断点(可以让CPU执行到代码段内的某个地址时停下来)，所以不适用于数据段和I/O空间；</li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>软件调试</category>
      </categories>
      <tags>
        <tag>软件调试</tag>
      </tags>
  </entry>
  <entry>
    <title>5、可调试性</title>
    <url>/2025/%E8%BD%AF%E4%BB%B6%E8%B0%83%E8%AF%95/%E8%BD%AF%E4%BB%B6%E8%B0%83%E8%AF%95/%E5%8F%AF%E8%B0%83%E5%BC%8F%E6%80%A7/</url>
    <content><![CDATA[
]]></content>
      <categories>
        <category>软件调试</category>
      </categories>
      <tags>
        <tag>软件调试</tag>
      </tags>
  </entry>
  <entry>
    <title>9、内核调试</title>
    <url>/2025/%E8%BD%AF%E4%BB%B6%E8%B0%83%E8%AF%95/%E8%BD%AF%E4%BB%B6%E8%B0%83%E8%AF%95/%E5%86%85%E6%A0%B8%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[
]]></content>
      <categories>
        <category>软件调试</category>
      </categories>
      <tags>
        <tag>软件调试</tag>
      </tags>
  </entry>
  <entry>
    <title>7、堆调试</title>
    <url>/2025/%E8%BD%AF%E4%BB%B6%E8%B0%83%E8%AF%95/%E8%BD%AF%E4%BB%B6%E8%B0%83%E8%AF%95/%E5%A0%86%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[
]]></content>
      <categories>
        <category>软件调试</category>
      </categories>
      <tags>
        <tag>软件调试</tag>
      </tags>
  </entry>
  <entry>
    <title>8、多线程调试</title>
    <url>/2025/%E8%BD%AF%E4%BB%B6%E8%B0%83%E8%AF%95/%E8%BD%AF%E4%BB%B6%E8%B0%83%E8%AF%95/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[
]]></content>
      <categories>
        <category>软件调试</category>
      </categories>
      <tags>
        <tag>软件调试</tag>
      </tags>
  </entry>
  <entry>
    <title>2、操作系统的调试支持</title>
    <url>/2025/%E8%BD%AF%E4%BB%B6%E8%B0%83%E8%AF%95/%E8%BD%AF%E4%BB%B6%E8%B0%83%E8%AF%95/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%B0%83%E8%AF%95%E6%94%AF%E6%8C%81/</url>
    <content><![CDATA[
]]></content>
      <categories>
        <category>软件调试</category>
      </categories>
      <tags>
        <tag>软件调试</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客搭建与部署</title>
    <url>/2022/Hexo/hexo/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>Hexo是一个快速，简单而强大的博客框架，使用Markdown语言编写文章，Hexo可以在几秒钟内生成具有美丽主题的静态页面文件。</p>
<h1 id="一环境搭建">一、环境搭建</h1>
<h2 id="node.js">1、Node.js</h2>
<p>Node.js是基于Chrome
JavaScript运行时建立的一个平台，npm是node.js的包管理工具。Hexo是基于Node.js的，使用Hexo搭建博客，就需要本地有Node.js环境。Node.js环境点击<a
href="https://nodejs.org/zh-cn/">这里</a>，一路next。安装完成后可以用命令行查看版本号。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">node -v <span class="comment">//查看node.js的版本</span></span><br><span class="line"></span><br><span class="line">npm -v  <span class="comment">//查看包管理器的版本</span></span><br></pre></td></tr></table></figure>
<p>由于国内环境使用npm速度感人，可以安装cnpm，把镜像源换成淘宝的
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https:<span class="comment">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure></p>
<p>之后可以命令行输入cnpm，如果能打出帮助界面表示安装成功。</p>
<h2 id="git">2、Git</h2>
<p>git的相关配置不在此赘述。hexo的很多操作都要依赖于git</p>
<h2 id="hexo">3、Hexo</h2>
<p>Hexo依托于npm包管理器，我们可以直接下载 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure>
-g命令是在全局安装Hexo命令行工具。当安装完成后，我们可以查看hexo版本来检查是否安装成功
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">hexo -v    <span class="comment">//查看Hexo版本</span></span><br></pre></td></tr></table></figure></p>
<h1 id="二博客搭建">二、博客搭建</h1>
<p>首先我们新建一个存放博客的文件目录。之后我们的操作全部在此目录下。如果之后我们搭建错误想要从头再来，直接删掉这个目录新建一个即可。</p>
<p>然后我们初始化hexo <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>
初始化后，文件目录下面就会自动生成hexo的基础框架，后续博客都是基于这个框架来做。</p>
<p>之后安装hexo的依赖组件 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">cnpm install</span><br></pre></td></tr></table></figure></p>
<p>目前目录下面有如下几个部分：</p>
<ul>
<li>node_modules：存的是利用【npm install --save】下载安装的组件</li>
<li>scaffolds：存放模板文件，可以创建post、page、draft三种页面</li>
<li>source：存放用户资源，即我们的待发布文档</li>
<li>themes：存放主题文件夹，默认landspace</li>
<li>_config.yml：此文件很重要，是我们网站的配置信息</li>
<li>package.json：应用程序的信息</li>
</ul>
<p>此时会自动生成一篇Helloworld的博客，我们可以启动博客来看看效果。
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">hexo clean      <span class="comment">//清空缓存，即清空我们的public文件夹</span></span><br><span class="line">hexo g          <span class="comment">//hexo generate命令，在本地生成静态页面，即pubilc文件夹</span></span><br><span class="line">hexo s          <span class="comment">//hexo server命令，开启本地服务器，可供我们本地预览</span></span><br></pre></td></tr></table></figure>
本地服务器开启后，我们可以访问localhost:4000来本地预览，输入Ctrl+C关闭本地服务器</p>
<h1 id="三写博客">三、写博客</h1>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">hexo n <span class="string">&quot;第一篇文章&quot;</span></span><br><span class="line"><span class="comment">//hexo new [layout] &lt;title&gt;</span></span><br><span class="line"><span class="comment">//hexo new命令，不设置layout会根据_config.yml中的default_layout在source\\_posts目录下生成一篇博客文章</span></span><br><span class="line"><span class="comment">//如果标题包含空格，使用引号括起来</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-p 自定义路径</span></span><br><span class="line">hexo new page --path about/me <span class="string">&quot;About me&quot;</span></span><br></pre></td></tr></table></figure>
<p>生成博客还是老三样 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></p>
<h1 id="四部署到github">四、部署到github</h1>
<p>执行完上述步骤，我们的博客只能在本地看，我们必须部署到网上才能通过网络来看。Github提供GitPages免费站点服务，自带域名和1G免费空间，存放博客资源和网页信息足够。</p>
<p>git本地配置和ssh公钥配不再赘述</p>
<h2 id="新建git仓库">1、新建git仓库</h2>
<p>要注意仓库名必须要符合规则，即【用户名.github.io】格式。git会跟进这个仓库来创建域名。</p>
<h2 id="hexo配置git插件">2、hexo配置git插件</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>
<p>安装完成后我们需要修改_config.yml文件中的Deployment信息（最下面）
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">    type:</span> git</span><br><span class="line"><span class="symbol">    repo:</span> git@github.com:Liuqianci/Liuqianci.github.io.git</span><br><span class="line"><span class="symbol">    branch:</span> master</span><br></pre></td></tr></table></figure></p>
<h2 id="部署远端">3、部署远端</h2>
<p>在之前的基础上，可以把本地文章部署到远端了 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line"></span><br><span class="line">hexo d   <span class="comment">//hexo deploy命令，部署远端</span></span><br></pre></td></tr></table></figure></p>
<p>此时我们的github仓库就有内容了，我们也可以输入域名直接访问我们的博客。</p>
<h1 id="五自定义域名">五、自定义域名</h1>
<p>虽然gitpages给我们提供了一个域名，但是我们还可以自己申请一个属于自己的域名。我绑定的是腾讯的域名。</p>
<p>在腾讯云里申请域名，此流程很快。</p>
<p>域名申请下来后，需要绑定我们的博客网站。在腾讯云的控制台上进行域名解析。一般解析两条，A对应IP，CNAME对应域名。我们博客的IP，直接ping我们博客的域名即可。</p>
<p>域名解析完成后，我们要进行域名绑定，在source目录下新建一个CNAME文件，写入自己的域名。然后在GitPages上也进行配置，进入Github的settings中，添加GitPages的Custom
Domain为我们的自定义域名。我们可以勾选Enforce HTTPS来开启https</p>
<p>最后在_config.yml的url选项中填写我们的自定义域名。完成发布。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>git基础</title>
    <url>/2025/git/git/git%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="git安装">git安装</h1>
<p><a
href="https://git-scm.com/book/zh/v2">git手册</a>提供了完整的安装步骤。</p>
<p>安装成功后，命令行输入git命令可以检查是否安装成功：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#查看git版本</span><br><span class="line">git --version </span><br></pre></td></tr></table></figure>
<h1 id="最小配置">最小配置</h1>
<p>使用git之前需要配置user.name和user.email，可以方便绑定每次操作的用户信息。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">$ git config <span class="attr">--global</span> user<span class="selector-class">.name</span> <span class="string">&#x27;your_name&#x27;</span></span><br><span class="line">$ git config <span class="attr">--global</span> user<span class="selector-class">.email</span> <span class="string">&#x27;your_email@domain.com&#x27;</span></span><br></pre></td></tr></table></figure>
<p>上面的'--global'是git的作用域，git一共有三个作用域：</p>
<ul>
<li>--local :只对某个仓库有效</li>
<li>--global ：对当前用户的所有仓库有效</li>
<li>--system ：对系统的所有登录用户有效</li>
</ul>
<p>显示config的配置，可以加--list：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ git config --list --local</span><br><span class="line">$ git config --list --global</span><br><span class="line">$ git config --list --system</span><br></pre></td></tr></table></figure>
<h1 id="创建仓库并配置local用户信息">创建仓库并配置local用户信息</h1>
<p>建立git仓库有两种使用场景：</p>
<p>第一种场景：把已经有的项目代码列入git管理</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> 项目代码目录</span><br><span class="line">$ git init</span><br></pre></td></tr></table></figure>
<p> </p>
<p>第二种场景：新建的项目直接用git管理：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> 某个目录</span><br><span class="line">$ git init your_project  #会在当前路径下创建和项目名称同名的文件夹</span><br><span class="line">$ <span class="built_in">cd</span> your_project</span><br></pre></td></tr></table></figure>
<p> </p>
<p>以第二种方式为例，执行完命令后，会在目录下生成一个'.git'的隐藏目录。</p>
<p>如果此时在这个目录下配置local的用户名和邮箱，且和global配置的不同，那么在这个仓库中执行的操作会以local配置为准生效。</p>
<h1 id="工作区和暂存区">工作区和暂存区</h1>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ git add files  #把工作目录中的内容添加暂存区</span><br><span class="line"></span><br><span class="line">$ git commit     #把暂存区中的内容添加到正式版本历史</span><br></pre></td></tr></table></figure>
<p>git标准的操作是每次在工作目录中修改的文件，都先添加入暂存区。为了某个功能而做的修改都添加入暂存区后，可以统一把这批文件commit到git版本库中。</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ git reset --hard</span><br><span class="line">#这个命令可以重置暂存区，轻易不要使用</span><br><span class="line"></span><br><span class="line">$ git status #查看工作目录修改状态</span><br></pre></td></tr></table></figure>
<p> </p>
<p>如果想要在git中修改某个文件的文件名，可以有两种方式：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 方式<span class="number">1</span>：工作目录中修改文件名，然后重新add、commit</span><br><span class="line">$ mv old new   #修改文件名</span><br><span class="line">$ git add new</span><br><span class="line">$ git commit</span><br><span class="line"></span><br><span class="line"># 方式<span class="number">2</span>：直接调用git命令</span><br><span class="line">$ git mv old new</span><br><span class="line">$ git commit </span><br></pre></td></tr></table></figure>
<h1 id="查看版本历史和分支">查看版本历史和分支</h1>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 查看每次提交的细节</span><br><span class="line">$ git log</span><br><span class="line"></span><br><span class="line"># 只查看提交备注</span><br><span class="line">$ git log --oneline</span><br><span class="line"></span><br><span class="line"># 只查看最近的某几次提交</span><br><span class="line">$ git log -n2 --oneline  #只查看<span class="number">2</span>次</span><br><span class="line"></span><br><span class="line"># 查看本地有多少分支</span><br><span class="line">$ git branch -v</span><br><span class="line"></span><br><span class="line"># 查看所有分支的提交记录</span><br><span class="line">$ git log --all</span><br><span class="line"></span><br><span class="line"># 图形化查看所有分支的提交记录</span><br><span class="line">$ git log --all --graph</span><br></pre></td></tr></table></figure>
<p> </p>
<p>对于Windows用户来说，可能更习惯图形化操作，可以使用git自带的图形化工具：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ gitk  # 打开图形化界面</span><br></pre></td></tr></table></figure>
<h1 id="git目录">".git"目录</h1>
<p>新建仓库后，工作目录下会生成一个隐藏的".git"目录，这里面就是git最核心的内容。</p>
<p><img
src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/git/git%E7%9B%AE%E5%BD%95.png" /></p>
<p>常用的文件如下：</p>
<ul>
<li>HEAD文件：记录当前工作在哪个分支上；</li>
<li>config文件：当前工作目录的一些配置，比如user.name和user.email；</li>
<li>refs/heads目录：各个分支指向的提交hash；</li>
<li>refs/tags目录：各个tag指向的提交hash；</li>
<li>objects目录：存放文件和更改，内部的对象可以分为commit、tree和blob三种类型；这个是git版本管理的底层目录；</li>
</ul>
<h1
id="git文件类型committree和blob">git文件类型（commit、tree和blob）</h1>
<p>  数据存储是git的核心技术点；git的目标是项目管理，而项目管理中的文件变更很频繁，如果没有一个好的数据管理技术，git的存储信息会越来越大，性能会越来越差。所以设计一个良好的数据存储机制是很关键的。</p>
<p>  .git的object中就是git存储的核心目录，下面的文件共有三种类型：commit、tree和blob。</p>
<p><img
src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/git/git%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B.png" /></p>
<p>  上图是git官网文档的实例，每次执行commit操作都会创建一个commit对象出来；一个commit对应唯一一棵树，是这个commit的快照，存放所有的文件夹和文件；blob就是其中具体的文件；要注意每个blob和文件名毫无关系，在git中只要这个文件的内容相同，那对应的就是一个blob，这样可以大大减少存储代价。</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>6、栈调试</title>
    <url>/2025/%E8%BD%AF%E4%BB%B6%E8%B0%83%E8%AF%95/%E8%BD%AF%E4%BB%B6%E8%B0%83%E8%AF%95/%E6%A0%88%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[
]]></content>
      <categories>
        <category>软件调试</category>
      </categories>
      <tags>
        <tag>软件调试</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown格式</title>
    <url>/2022/Hexo/hexo/Markdown%E6%A0%BC%E5%BC%8F/</url>
    <content><![CDATA[<p>Hexo博客要求必须使用Github风格的Markdown语言编辑。所以需要了解具体的编写格式。</p>
<h1 id="一编辑器">一、编辑器</h1>
<p>市面上有很多的Markdown编辑器，之前很多人喜欢用Typora，但目前这个已经没有免费版可以用了。干脆直接用VSCode。</p>
<p>使用VSCode需要下载两个插件，第一个是【Markdown All in
One】，是一个组合包，把最常用的markdown优化都安装好；第二个是【Markdown
Preview Github
Styling】,是Github使用的Markdown渲染样式。使用这个样式，在本地就能预览Markdown文件最终在Github
Pages中显示的效果。</p>
<h1 id="二常用语法">二、常用语法</h1>
<h2 id="标题">标题</h2>
<p>利用<code>#</code>设置标题，一个表示一级，两个表示二级，依次类推
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">#      一级标题</span><br><span class="line">##     二级标题</span><br><span class="line">……………… 以此类推</span><br></pre></td></tr></table></figure></p>
<h2 id="引用">引用</h2>
<p>利用<code>&gt;</code>可以创建引用块</p>
<h2 id="文本高亮">文本高亮</h2>
<p>利用一组反引号`来把文本包起来。 <figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="string">`这里面是需要高亮的字符`</span></span><br></pre></td></tr></table></figure></p>
<h2 id="代码块">代码块</h2>
<p>利用三个反引号`把内容扩起来即可。在上面的那个反引号后面还可以加上语言名称来进行自适应。</p>
<h2 id="斜体">斜体</h2>
<p>可以用一组<code>*</code>号来把文字包起来，也可以直接用快捷键<code>Ctrl+I</code>。</p>
<h2 id="加粗">加粗</h2>
<p>k可以用一组<code>**</code>来把文字包起来，也可以用快捷键<code>Ctrl+B</code>。</p>
<h2 id="删除线">删除线</h2>
<p>用一组<code>~~</code>把文字<del>包起来</del>。</p>
<h2 id="下划线">下划线</h2>
<p>下划线可以用<code>&lt;u&gt;  &lt;/u&gt;</code><u>把文字包起来</u>。</p>
<h2 id="按键效果">按键效果</h2>
<p><kbd>可以用一组</kbd><code>&lt;kbd&gt;  &lt;/kbd&gt;</code>把文字包起来，实现按键效果。</p>
<h2 id="列表">列表</h2>
<p>列表分为有序列表和无序列表 <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">无序列表：用-加空格</span><br><span class="line"><span class="bullet">-</span> 第一</span><br><span class="line"><span class="bullet">-</span> 第二</span><br><span class="line"></span><br><span class="line">有序列表：用数字加.加空格</span><br><span class="line"><span class="bullet">1.</span> 第一</span><br><span class="line"><span class="bullet">2.</span> 第二</span><br></pre></td></tr></table></figure></p>
<h1 id="三链接与图片">三、链接与图片</h1>
<p>图片其实是一种超链接，所以把图片归类为链接里面。</p>
<h2 id="跳转链接">1、跳转链接</h2>
<p>普通的网站跳转都属于跳转链接，语法很简单： <figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">[<span class="name">网站说明</span>](<span class="name">跳转链接</span>)</span><br></pre></td></tr></table></figure></p>
<h2 id="图片链接">2、图片链接</h2>
<p>图片链接的markdown语法和跳转链接类似： <figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">!<span class="selector-attr">[]</span>(图片链接)</span><br></pre></td></tr></table></figure></p>
<h2 id="图片存储">3、图片存储</h2>
<p>网上很多教程都是利用相对路径来存储图片，操作如下： 1. 安装图片插件
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-<span class="built_in">image</span> --<span class="built_in">save</span></span><br></pre></td></tr></table></figure></p>
<ol start="2" type="1">
<li>_config.yml配置文件中，修改为 post_asset_folder: true</li>
</ol>
<p>其中第二步可以忽略，第二步的意义在于我们新建文章的时候，会在soruce目录下生成文章同名文件夹供我们存储图片，我们也可以手动创建文件夹。</p>
<p>但是对于GitPages或者云服务器来说，其提供的免费存储空间都是有上限的，这样操作只适用于图片较少的情况。我们可以利用云服务器对象存储功能实现图床。</p>
<p>我的域名使用的是腾讯的，那就用腾讯的COS来操作，并且腾讯提供可视化工具COSBrowser，很方便。
参考博客： <a
href="https://blog.csdn.net/as403045314/article/details/101337257">Hexo
博客图片添加至图床---腾讯云COS图床使用</a></p>
<p>一个图片测试：</p>
<p><img
src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/Hexo%E5%8D%9A%E5%AE%A2/0880c08b0110e397da10.jpg" /></p>
<h1 id="四公式">四、公式</h1>
<p>公式使用的是Latex语法。但需要注意，Hexo并不支持Laxte语法，所以我们需要开启相关的开关。有些主题就自带这个功能。
Markdown使用$包裹实现行内公式，使用$$包裹实现行间公式。
Latex语法可以不掌握，借助工具即可： <a
href="http://www.hostmath.com/">HostMath</a>
不过Hexo显示数学公式还需要一些其他设置，Hexo默认使用
hexo-renderer-marked 引擎渲染网页，该引擎会把一些特殊的 markdown
符号转换为相应的 html 标签，导致公式不显示。</p>
<h1 id="五表格">五、表格</h1>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">|     <span class="number">1</span>   |      <span class="title class_">T2</span>       |  <span class="title class_">T3</span>   |</span><br><span class="line">|----------|<span class="symbol">:-------------</span><span class="symbol">:|------</span><span class="symbol">:|</span></span><br><span class="line">|   <span class="number">1</span>      |  <span class="number">1</span>            |  <span class="number">1</span>    |</span><br><span class="line">|   <span class="number">22</span>     |  <span class="number">22</span>           | <span class="number">22</span>    |</span><br><span class="line">|   <span class="number">333</span>    |  <span class="number">333</span>          | <span class="number">333</span>   |</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr class="header">
<th>1</th>
<th style="text-align: center;">T2</th>
<th style="text-align: right;">T3</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td style="text-align: center;">1</td>
<td style="text-align: right;">1</td>
</tr>
<tr class="even">
<td>22</td>
<td style="text-align: center;">22</td>
<td style="text-align: right;">22</td>
</tr>
<tr class="odd">
<td>333</td>
<td style="text-align: center;">333</td>
<td style="text-align: right;">333</td>
</tr>
</tbody>
</table>
<p><code>------</code>表示左对齐，<code>:------：</code>表示居中，<code>-----:</code>表示右对齐
Hexo的表格必须和正文之间有空行，否则不能正常显示</p>
<h1 id="六流程图">六、流程图</h1>
<p>Hexo里流程图限制多多，直接在其他软件画完截图吧。我也懒得学了。【流汗黄豆】</p>
<h1 id="七特殊字符">七、特殊字符</h1>
<p>常见转义如下：</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">! &amp;<span class="variable">#33</span><span class="comment">; — 惊叹号 Exclamation mark</span></span><br><span class="line">” &amp;<span class="variable">#34</span><span class="comment">; &amp;quot; 双引号 Quotation mark</span></span><br><span class="line"># &amp;<span class="variable">#35</span><span class="comment">; — 数字标志 Number sign</span></span><br><span class="line">$ &amp;<span class="variable">#36</span><span class="comment">; — 美元标志 Dollar sign</span></span><br><span class="line">% &amp;<span class="variable">#37</span><span class="comment">; — 百分号 Percent sign</span></span><br><span class="line">&amp; &amp;<span class="variable">#38</span><span class="comment">; &amp;amp; Ampersand</span></span><br><span class="line">‘ &amp;<span class="variable">#39</span><span class="comment">; — 单引号 Apostrophe</span></span><br><span class="line">( &amp;<span class="variable">#40</span><span class="comment">; — 小括号左边部分 Left parenthesis</span></span><br><span class="line">) &amp;<span class="variable">#41</span><span class="comment">; — 小括号右边部分 Right parenthesis</span></span><br><span class="line">* &amp;<span class="variable">#42</span><span class="comment">; — 星号 Asterisk</span></span><br><span class="line">+ &amp;<span class="variable">#43</span><span class="comment">; — 加号 Plus sign</span></span><br><span class="line">&lt; &amp;<span class="variable">#60</span><span class="comment">; &amp;lt; 小于号 Less than</span></span><br><span class="line"><span class="operator">=</span> &amp;<span class="variable">#61</span><span class="comment">; — 等于符号 Equals sign</span></span><br><span class="line">- &amp;<span class="variable">#45</span><span class="comment">; &amp;minus; — 减号</span></span><br><span class="line">&gt; &amp;<span class="variable">#62</span><span class="comment">; &amp;gt; 大于号 Greater than</span></span><br><span class="line">? &amp;<span class="variable">#63</span><span class="comment">; — 问号 Question mark</span></span><br><span class="line">@ &amp;<span class="variable">#64</span><span class="comment">; — Commercial at</span></span><br><span class="line">[ &amp;<span class="variable">#91</span><span class="comment">; --- 中括号左边部分 Left square bracket</span></span><br><span class="line">\ &amp;<span class="variable">#92</span><span class="comment">; --- 反斜杠 Reverse solidus (backslash)</span></span><br><span class="line">] &amp;<span class="variable">#93</span><span class="comment">; — 中括号右边部分 Right square bracket</span></span><br><span class="line">&#123; &amp;<span class="variable">#123</span><span class="comment">; — 大括号左边部分 Left curly brace</span></span><br><span class="line">| &amp;<span class="variable">#124</span><span class="comment">; — 竖线Vertical bar</span></span><br><span class="line">&#125; &amp;<span class="variable">#125</span><span class="comment">; — 大括号右边部分 Right curly brace</span></span><br></pre></td></tr></table></figure>
<h1 id="八hexo模板">八、hexo模板</h1>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta"># ！！！！！！！！！！</span></span><br><span class="line"><span class="meta"># 每一项的 : 后面均有一个空格</span></span><br><span class="line"><span class="meta"># 且 : 为英文符号</span></span><br><span class="line"><span class="meta"># ！！！！！！！！！！</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">title:</span></span><br><span class="line"><span class="meta"># 文章标题，可以为中文</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">date:</span></span><br><span class="line"><span class="meta"># 建立日期，如果自己手动添加，请按固定格式</span></span><br><span class="line"><span class="meta"># 就算不写，页面每篇文章顶部的发表于……也能显示</span></span><br><span class="line"><span class="meta"># 只要在主题配置文件中，配置了 created_at 就行</span></span><br><span class="line"><span class="meta"># 那为什么还要自己加上？</span></span><br><span class="line"><span class="meta"># 自定义文章发布的时间</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">updated:</span></span><br><span class="line"><span class="meta"># 更新日期，其它与上面的建立日期类似</span></span><br><span class="line"><span class="meta"># 不过在页面每篇文章顶部，是更新于……</span></span><br><span class="line"><span class="meta"># 在主题配置文件中，是 updated_at</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">permalink:</span></span><br><span class="line"><span class="meta"># 若站点配置文件下的 permalink 配置了 title</span></span><br><span class="line"><span class="meta"># 则可以替换文章 URL 里面的 title（文章标题）</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">categories:</span></span><br><span class="line"><span class="meta"># 分类，支持多级，比如：</span></span><br><span class="line"><span class="meta"># - technology</span></span><br><span class="line"><span class="meta"># - computer</span></span><br><span class="line"><span class="meta"># - computer-aided-art</span></span><br><span class="line"><span class="meta"># 则为 technology/computer/computer-aided-art</span></span><br><span class="line"><span class="meta"># （不适用于 layout: page）</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">tags:</span></span><br><span class="line"><span class="meta"># 标签</span></span><br><span class="line"><span class="meta"># 多个可以这样写 [标签1,标签2,标签3]</span></span><br><span class="line"><span class="meta"># （不适用于 layout: page）</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">description:</span></span><br><span class="line"><span class="meta"># 文章的描述，在每篇文章标题下方显示</span></span><br><span class="line"><span class="meta"># 并且作为网页的 description 元数据</span></span><br><span class="line"><span class="meta"># 如果不写，则自动取 &lt;!-- more --&gt;</span></span><br><span class="line"><span class="meta"># 之前的文字作为网页的 description 元数据</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">keywords:</span></span><br><span class="line"><span class="meta"># 关键字，并且作为网页的 keywords 元数据</span></span><br><span class="line"><span class="meta"># 如果不写，则自动取 tags 里的项</span></span><br><span class="line"><span class="meta"># 作为网页的 keywords 元数据</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">comments:</span></span><br><span class="line"><span class="meta"># 是否开启评论</span></span><br><span class="line"><span class="meta"># 默认值是 true</span></span><br><span class="line"><span class="meta"># 要关闭写 false</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">layout:</span></span><br><span class="line"><span class="meta"># 页面布局，默认值是 post，默认值可以在</span></span><br><span class="line"><span class="meta"># 站点配置文件中修改 default_layout</span></span><br><span class="line"><span class="meta"># 另：404 页面可能用到，将其值改为 false</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">type:</span></span><br><span class="line"><span class="meta"># categories，目录页面</span></span><br><span class="line"><span class="meta"># tags，标签页面</span></span><br><span class="line"><span class="meta"># picture，用来生成 group-pictures</span></span><br><span class="line"><span class="meta"># quote？</span></span><br><span class="line"><span class="meta"># https:<span class="comment">//io-oi.me/tech/test/</span></span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">photos:</span></span><br><span class="line"><span class="meta"># Gallery support，用来支持画廊╱相册，用法如下：</span></span><br><span class="line"><span class="meta"># - photo_url_1</span></span><br><span class="line"><span class="meta"># - photo_url_2</span></span><br><span class="line"><span class="meta"># - photo_url_3</span></span><br><span class="line"><span class="meta"># https:<span class="comment">//io-oi.me/tech/test/</span></span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">link:</span></span><br><span class="line"><span class="meta"># 文章的外部链接</span></span><br><span class="line"><span class="meta"># https:<span class="comment">//io-oi.me/tech/test/</span></span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">image:</span></span><br><span class="line"><span class="meta"># 自定义的文章摘要图片，只在页面展示，文章内消失</span></span><br><span class="line"><span class="meta"># 此项只有参考本文 5.14 节配置好，否则请勿添加！</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">sticky:</span></span><br><span class="line"><span class="meta"># 文章置顶</span></span><br><span class="line"><span class="meta"># 此项只有参考本文 5.15 节配置好，否则请勿添加！</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">password:</span></span><br><span class="line"><span class="meta"># 文章密码，此项只有参考教程：</span></span><br><span class="line"><span class="meta"># http:<span class="comment">//shenzekun.cn/hexo的next主题个性化配置教程.html</span></span></span><br><span class="line"><span class="meta"># 第 24 节，配置好，否则请勿添加！</span></span><br><span class="line"><span class="meta"># 发现还是有 bug 的，就是右键在新标签中打开</span></span><br><span class="line"><span class="meta"># 然后无论是否输入密码，都能看到内容</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>4、调试器</title>
    <url>/2025/%E8%BD%AF%E4%BB%B6%E8%B0%83%E8%AF%95/%E8%BD%AF%E4%BB%B6%E8%B0%83%E8%AF%95/%E8%B0%83%E8%AF%95%E5%99%A8/</url>
    <content><![CDATA[
]]></content>
      <categories>
        <category>软件调试</category>
      </categories>
      <tags>
        <tag>软件调试</tag>
      </tags>
  </entry>
  <entry>
    <title>10、高级调试技巧</title>
    <url>/2025/%E8%BD%AF%E4%BB%B6%E8%B0%83%E8%AF%95/%E8%BD%AF%E4%BB%B6%E8%B0%83%E8%AF%95/%E9%AB%98%E7%BA%A7%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[
]]></content>
      <categories>
        <category>软件调试</category>
      </categories>
      <tags>
        <tag>软件调试</tag>
      </tags>
  </entry>
  <entry>
    <title>3、编译器的调试支持</title>
    <url>/2025/%E8%BD%AF%E4%BB%B6%E8%B0%83%E8%AF%95/%E8%BD%AF%E4%BB%B6%E8%B0%83%E8%AF%95/%E7%BC%96%E8%AF%91%E5%99%A8%E7%9A%84%E8%B0%83%E8%AF%95%E6%94%AF%E6%8C%81/</url>
    <content><![CDATA[
]]></content>
      <categories>
        <category>软件调试</category>
      </categories>
      <tags>
        <tag>软件调试</tag>
      </tags>
  </entry>
  <entry>
    <title>多台电脑同步提交博客</title>
    <url>/2022/Hexo/hexo/%E5%A4%9A%E5%8F%B0%E7%94%B5%E8%84%91%E5%90%8C%E6%AD%A5%E6%8F%90%E4%BA%A4%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>由于Hexo属于静态博客，文章内容都是本地存储，只有静态页面（public文件夹）会push到git上面。如果我们更换电脑的话，配置相同的环境、依赖和博客文件，如果用U盘拷贝就太low了。所以我们可以利用Github远程仓库来实现多台终端的博客更新部署。</p>
<p>主要思路是利用git的分支，把静态博客页面文件放在master主分支，把hexo的部署环境文件和博客原文放在新建的Hexo分支上。</p>
<p># 一、Hexo的原理和依赖</p>
<h2 id="环境">1、环境</h2>
<p>Hexo需要有Node.js环境和Git环境，这在哪个电脑都必须有的。</p>
<h2 id="资源配置依赖">2、资源配置依赖</h2>
<p>首先要安装Hexo <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli </span><br></pre></td></tr></table></figure></p>
<p>hexo所需要的包信息都已经存储在package.json文件中了，我们可以直接利用这个文件，执行命令行安装所需资源：
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></p>
<h2 id="博客内容">3、博客内容</h2>
<p>博客的内容主要就是主题文件和博客文件</p>
<ul>
<li>node_modules: hexo所需要的文件，这个文件不需要上传git</li>
<li>themes：主题文件</li>
<li>source：博文的md文件</li>
<li>public：生成的静态页面，这个一般都clean掉</li>
<li>_config.yml：全局配置文件</li>
<li>.gitignore：hexo自动生成的，里面一般会记录node_modules，我们不许要改，这个文件就会被忽略掉</li>
</ul>
<h1 id="二git仓库修改">二、Git仓库修改</h1>
<p>对我们之前创建的username.github.io仓库，创建一个新的hexo分支，并在仓库-&gt;Settings-&gt;Branches-&gt;Default
branch中把这个分支设置为默认分支。clone到本地，此时本地应该是Hexo分支。</p>
<p>之后我们把我们之前写的博客目录下的文件，全部拷贝到这个本地仓库中【注意要把之前themes目录中的.git文件删掉。因为一个git目录下不能有另一个git仓库。如果我们需要更新主题文件，只能把主题clone到本地后进行拷贝覆盖】。然后提交git到Hexo分支：
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;update&#x27;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure></p>
<p>此时我们观察github，可以看到，master分支里面保存着静态博客资源（在_config.yml中的Deployment配置的），Hexo分支备份博客部署文件，供我们维护更新。两者在一个仓库中互不干扰。</p>
<h1 id="三新的提交操作">三、新的提交操作</h1>
<p>目前我们在写博客时，就要在提交前做git更新了 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">git pull     <span class="comment">//提交前最好更新最新</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;update&#x27;</span></span><br><span class="line">git push </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>C++多线程基础</title>
    <url>/2025/C/C++/C++%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<p>  早期的C++语言并不支持多线程，认为会影响到语言的性能。早期的C++程序多线程的实现是交给操作系统内生API来实现。在C++11之后把Thread类纳入了C++体系，C++可以支持多线程开发。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">mutex g_mutex;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">T1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	g_mutex.<span class="built_in">lock</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">"T1 Hello"</span> &lt;&lt; endl;</span><br><span class="line">	g_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">T2</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	g_mutex.<span class="built_in">lock</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">"T2 "</span> &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">	g_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="function">thread <span class="title">t1</span><span class="params">(T1)</span></span>;  <span class="comment">//传递线程的入口函数</span></span><br><span class="line">	<span class="function">thread <span class="title">t2</span><span class="params">(T2, <span class="string">"Hello World"</span>)</span></span>;  <span class="comment">//还可以跟函数的参数</span></span><br><span class="line">	t1.<span class="built_in">join</span>();</span><br><span class="line">	<span class="comment">//t2.join();</span></span><br><span class="line">	t2.<span class="built_in">detach</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">"Main Hi"</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> </p>
<ul>
<li>thread::join：主线程等待子线程执行结束</li>
<li>thread::detach：</li>
</ul>
<p> </p>
<p> </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例子：银行存取钱</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 存钱</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Deposit</span><span class="params">(mutex&amp; m, <span class="type">int</span>&amp; money)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="comment">// 锁的粒度尽可能的最小化，只锁要保护的变量，别放循坏外面把整个流程都锁了</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> index = <span class="number">0</span>; index &lt; <span class="number">100</span>; index++)</span><br><span class="line">	{</span><br><span class="line">		m.<span class="built_in">lock</span>();</span><br><span class="line">		money += <span class="number">1</span>;</span><br><span class="line">		m.<span class="built_in">unlock</span>();</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 取钱</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Withdraw</span><span class="params">(mutex&amp; m, <span class="type">int</span>&amp; money)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="comment">// 锁的粒度尽可能的最小化</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> index = <span class="number">0</span>; index &lt; <span class="number">100</span>; index++)</span><br><span class="line">	{</span><br><span class="line">		m.<span class="built_in">lock</span>();</span><br><span class="line">		money -= <span class="number">2</span>;</span><br><span class="line">		m.<span class="built_in">unlock</span>();</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="comment">// 银行存取款</span></span><br><span class="line">	<span class="type">int</span> money = <span class="number">2000</span>;</span><br><span class="line">	mutex m;  <span class="comment">//这个锁尽量不要搞全局的，不好控制</span></span><br><span class="line">	cout &lt;&lt; <span class="string">"Current money is: "</span> &lt;&lt; money &lt;&lt; endl;</span><br><span class="line">	<span class="function">thread <span class="title">t1</span><span class="params">(Deposit, ref(m), ref(money))</span></span>;  <span class="comment">//引用的传递：ref()</span></span><br><span class="line">	<span class="function">thread <span class="title">t2</span><span class="params">(Withdraw, ref(m), ref(money))</span></span>;</span><br><span class="line">	t1.<span class="built_in">join</span>();</span><br><span class="line">	t2.<span class="built_in">join</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">"Finally money is: "</span> &lt;&lt; money &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//线程交换 </span></span><br><span class="line">	<span class="function">thread <span class="title">tW1</span><span class="params">([]()</span></span></span><br><span class="line"><span class="params"><span class="function">	{</span></span></span><br><span class="line"><span class="params"><span class="function">		cout &lt;&lt; <span class="string">"ThreadSwap1 "</span> &lt;&lt; endl;</span></span></span><br><span class="line"><span class="params"><span class="function">	})</span></span>;</span><br><span class="line">	<span class="function">thread <span class="title">tW2</span><span class="params">([]()</span></span></span><br><span class="line"><span class="params"><span class="function">	{</span></span></span><br><span class="line"><span class="params"><span class="function">		cout &lt;&lt; <span class="string">"ThreadSwap2 "</span> &lt;&lt; endl;</span></span></span><br><span class="line"><span class="params"><span class="function">	})</span></span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">"ThreadSwap1' id is "</span> &lt;&lt; tW1.<span class="built_in">get_id</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">"ThreadSwap2' id is "</span> &lt;&lt; tW2.<span class="built_in">get_id</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">"Swap after:"</span> &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">swap</span>(tW1, tW2);  <span class="comment">//交换线程的句柄</span></span><br><span class="line">	cout &lt;&lt; <span class="string">"ThreadSwap1' id is "</span> &lt;&lt; tW1.<span class="built_in">get_id</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">"ThreadSwap2' id is "</span> &lt;&lt; tW2.<span class="built_in">get_id</span>() &lt;&lt; endl;</span><br><span class="line">	tW1.<span class="built_in">join</span>();</span><br><span class="line">	tW2.<span class="built_in">join</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 线程移动</span></span><br><span class="line">	<span class="function">thread <span class="title">tM1</span><span class="params">( []() { ; } )</span></span>;</span><br><span class="line">	<span class="comment">//tM1.join();</span></span><br><span class="line">	cout &lt;&lt; <span class="string">"ThreadMove1' id is "</span> &lt;&lt; tM1.<span class="built_in">get_id</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">"Move after:"</span> &lt;&lt; endl;</span><br><span class="line">	thread tM2 = <span class="built_in">move</span>(tM1);  <span class="comment">//转移所有权</span></span><br><span class="line">	cout &lt;&lt; <span class="string">"ThreadMove2' id is "</span> &lt;&lt; tM2.<span class="built_in">get_id</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">"ThreadMove1' id is "</span> &lt;&lt; tM1.<span class="built_in">get_id</span>() &lt;&lt; endl;</span><br><span class="line">	tM2.<span class="built_in">join</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++进阶</tag>
      </tags>
  </entry>
  <entry>
    <title>CMD/DOS命令行与批处理</title>
    <url>/2025/Windows/dos%E8%84%9A%E6%9C%AC/Windows/dos%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="内部命令和外部命令">内部命令和外部命令</h1>
]]></content>
      <categories>
        <category>Windows</category>
        <category>dos脚本</category>
      </categories>
      <tags>
        <tag>脚本编程</tag>
      </tags>
  </entry>
  <entry>
    <title>C++基础句法</title>
    <url>/2022/C/C++/C-%E5%9F%BA%E7%A1%80%E5%8F%A5%E6%B3%95/</url>
    <content><![CDATA[<h1 id="三种基本结构">三种基本结构</h1>
<p><img
src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/%E4%B8%89%E7%A7%8D%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84.png" /></p>
<h2 id="分支结构">分支结构</h2>
<h3 id="if分支语句">if分支语句</h3>
<ul>
<li>单一语句：在任何一个表达式后面加上分号；</li>
<li>符合语句：用一对花括号{}括起来的语句块，在语法上等效一个单一的语句；</li>
<li>if语句：if语句是最常用的一种分支语句，也称为条件语句。</li>
</ul>
<p>if语句练习：实现一个函数：输入一个年号，判断是否是闰年。闰年判断：1、能够被400整除；2、能被4整除但不能被100整除。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isLeapYear</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> year)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 双分支if</span></span><br><span class="line">	<span class="comment">//if ( (year % 400 == 0) ||  (year%4==0 &amp;&amp; year%100 != 0) )</span></span><br><span class="line">	<span class="comment">//这里有个if的优化，因为||操作符，第一个条件满足不看后面的，&amp;&amp;操作符第一个条件不满足不看后面的</span></span><br><span class="line">	<span class="comment">//所以按下面的方式效率更高，因为涉及命中率问题，被4整除的概率更高</span></span><br><span class="line">	<span class="keyword">if</span> ((year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>) || (year % <span class="number">400</span> == <span class="number">0</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 是否是闰年</span></span><br><span class="line">	cout &lt;&lt; <span class="built_in">isLeapYear</span>(<span class="number">2000</span>) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">isLeapYear</span>(<span class="number">2020</span>) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">isLeapYear</span>(<span class="number">2021</span>) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>if语句练习：判断一个整数是否是另一个整数的倍数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// b是否是a的倍数</span></span><br><span class="line">	<span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> b = <span class="number">4</span>;</span><br><span class="line">	<span class="comment">//短路运算，除数不能为0。千万别写反了</span></span><br><span class="line">	<span class="keyword">if</span> ((a != <span class="number">0</span>) &amp;&amp; b % a == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;b是a的倍数&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;b不是a的倍数&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="switch分支语句">switch分支语句</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">case</span> 常数<span class="number">1</span>：语句<span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> 常数<span class="number">2</span>：语句<span class="number">2</span>; <span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> 常数<span class="number">3</span>：语句<span class="number">3</span>; <span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">default</span> : 语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> <span class="title class_">__COLOR</span></span><br><span class="line">&#123;</span><br><span class="line">	RED,</span><br><span class="line">	GREEN,</span><br><span class="line">	BLUE,</span><br><span class="line">	UNKOWN</span><br><span class="line">&#125;COLOR;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 多分支条件的if</span></span><br><span class="line">	<span class="comment">// if, else if, else</span></span><br><span class="line">	COLOR color0;</span><br><span class="line">	color0 = BLUE;</span><br><span class="line">	<span class="type">int</span> c0 = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (color0 == RED) &#123;</span><br><span class="line">		<span class="comment">//cout &lt;&lt; &quot;red&quot; &lt;&lt; endl; </span></span><br><span class="line">		c0 += <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (color0 == GREEN) &#123;</span><br><span class="line">		<span class="comment">//cout &lt;&lt; &quot;green&quot; &lt;&lt; endl; </span></span><br><span class="line">		c0 += <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (color0 == BLUE) &#123;</span><br><span class="line">		<span class="comment">//cout &lt;&lt; &quot;blue&quot; &lt;&lt; endl;</span></span><br><span class="line">		c0 += <span class="number">3</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">//cout &lt;&lt; &quot;unknown color&quot; &lt;&lt; endl; </span></span><br><span class="line">		c0 += <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 多分支条件的switch</span></span><br><span class="line">	<span class="comment">// switch,case,default</span></span><br><span class="line">	COLOR color1;</span><br><span class="line">	color1 = GREEN;</span><br><span class="line">	<span class="type">int</span> c1 = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">switch</span> (color1)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> RED:</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//cout &lt;&lt; &quot;red&quot; &lt;&lt; endl;</span></span><br><span class="line">		c1 += <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">case</span> GREEN:</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//cout &lt;&lt; &quot;green&quot; &lt;&lt; endl; </span></span><br><span class="line">		c1 += <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">case</span> BLUE:</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//cout &lt;&lt; &quot;blue&quot; &lt;&lt; endl;</span></span><br><span class="line">		c1 += <span class="number">3</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//cout &lt;&lt; &quot;unknown color&quot; &lt;&lt; endl;</span></span><br><span class="line">		c1 += <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了比较两种分支语句的区别，我们可以看更底层的汇编代码，拿上面例子举例：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">// 多分支条件的if</span><br><span class="line">// if, else if, else</span><br><span class="line">	COLOR color0<span class="comment">;</span></span><br><span class="line">	color0 = BLUE<span class="comment">;</span></span><br><span class="line">001A5D85  <span class="keyword">mov</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [color0],<span class="number">2</span>  </span><br><span class="line">	<span class="keyword">int</span> c0 = <span class="number">0</span><span class="comment">;</span></span><br><span class="line">001A5D8C  <span class="keyword">mov</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [c0],<span class="number">0</span>  </span><br><span class="line">	if (color0 == RED) &#123; </span><br><span class="line">001A5D93  <span class="keyword">cmp</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [color0],<span class="number">0</span>  </span><br><span class="line">001A5D97  <span class="keyword">jne</span>         main+<span class="number">164h</span> (<span class="number">01A5DA4h</span>)  </span><br><span class="line">		//cout &lt;&lt; <span class="string">&quot;red&quot;</span> &lt;&lt; endl<span class="comment">; </span></span><br><span class="line">		c0 += <span class="number">1</span><span class="comment">;</span></span><br><span class="line">001A5D99  <span class="keyword">mov</span>         <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> [c0]  </span><br><span class="line">001A5D9C  <span class="keyword">add</span>         <span class="built_in">eax</span>,<span class="number">1</span>  </span><br><span class="line">001A5D9F  <span class="keyword">mov</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [c0],<span class="built_in">eax</span>  </span><br><span class="line">001A5DA2  <span class="keyword">jmp</span>         main+<span class="number">18Ch</span> (<span class="number">01A5DCCh</span>)  </span><br><span class="line">	&#125;</span><br><span class="line">	else if (color0 == GREEN) &#123; </span><br><span class="line">001A5DA4  <span class="keyword">cmp</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [color0],<span class="number">1</span>  </span><br><span class="line">001A5DA8  <span class="keyword">jne</span>         main+<span class="number">175h</span> (<span class="number">01A5DB5h</span>)  </span><br><span class="line">		//cout &lt;&lt; <span class="string">&quot;green&quot;</span> &lt;&lt; endl<span class="comment">; </span></span><br><span class="line">		c0 += <span class="number">2</span><span class="comment">;</span></span><br><span class="line">001A5DAA  <span class="keyword">mov</span>         <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> [c0]  </span><br><span class="line">001A5DAD  <span class="keyword">add</span>         <span class="built_in">eax</span>,<span class="number">2</span>  </span><br><span class="line">001A5DB0  <span class="keyword">mov</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [c0],<span class="built_in">eax</span>  </span><br><span class="line">001A5DB3  <span class="keyword">jmp</span>         main+<span class="number">18Ch</span> (<span class="number">01A5DCCh</span>)  </span><br><span class="line">	&#125;</span><br><span class="line">	else if (color0 == BLUE) &#123;</span><br><span class="line">001A5DB5  <span class="keyword">cmp</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [color0],<span class="number">2</span>  </span><br><span class="line">001A5DB9  <span class="keyword">jne</span>         main+<span class="number">186h</span> (<span class="number">01A5DC6h</span>)  </span><br><span class="line">		//cout &lt;&lt; <span class="string">&quot;blue&quot;</span> &lt;&lt; endl<span class="comment">;</span></span><br><span class="line">		c0 += <span class="number">3</span><span class="comment">;</span></span><br><span class="line">001A5DBB  <span class="keyword">mov</span>         <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> [c0]  </span><br><span class="line">001A5DBE  <span class="keyword">add</span>         <span class="built_in">eax</span>,<span class="number">3</span>  </span><br><span class="line">		//cout &lt;&lt; <span class="string">&quot;blue&quot;</span> &lt;&lt; endl<span class="comment">;</span></span><br><span class="line">		c0 += <span class="number">3</span><span class="comment">;</span></span><br><span class="line">001A5DC1  <span class="keyword">mov</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [c0],<span class="built_in">eax</span>  </span><br><span class="line">	&#125;</span><br><span class="line">	else &#123; </span><br><span class="line">001A5DC4  <span class="keyword">jmp</span>         main+<span class="number">18Ch</span> (<span class="number">01A5DCCh</span>)  </span><br><span class="line">		//cout &lt;&lt; <span class="string">&quot;unknown color&quot;</span> &lt;&lt; endl<span class="comment">; </span></span><br><span class="line">		c0 += <span class="number">0</span><span class="comment">;</span></span><br><span class="line">001A5DC6  <span class="keyword">mov</span>         <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> [c0]  </span><br><span class="line">001A5DC9  <span class="keyword">mov</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [c0],<span class="built_in">eax</span>  </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">// 多分支条件的switch</span><br><span class="line">// switch,case,<span class="meta">default</span></span><br><span class="line">	COLOR color1<span class="comment">;</span></span><br><span class="line">	color1 = GREEN<span class="comment">;</span></span><br><span class="line">001A5DCC  <span class="keyword">mov</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [color1],<span class="number">1</span>  </span><br><span class="line">	<span class="keyword">int</span> c1 = <span class="number">0</span><span class="comment">;</span></span><br><span class="line">001A5DD3  <span class="keyword">mov</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [c1],<span class="number">0</span>  </span><br><span class="line">	switch (color1) </span><br><span class="line">001A5DDA  <span class="keyword">mov</span>         <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> [color1]  </span><br><span class="line">001A5DDD  <span class="keyword">mov</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>-<span class="number">10Ch</span>],<span class="built_in">eax</span>  </span><br><span class="line">001A5DE3  <span class="keyword">cmp</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>-<span class="number">10Ch</span>],<span class="number">0</span>  </span><br><span class="line">001A5DEA  <span class="keyword">je</span>          main+<span class="number">1C0h</span> (<span class="number">01A5E00h</span>)  </span><br><span class="line">001A5DEC  <span class="keyword">cmp</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>-<span class="number">10Ch</span>],<span class="number">1</span>  </span><br><span class="line">001A5DF3  <span class="keyword">je</span>          main+<span class="number">1CBh</span> (<span class="number">01A5E0Bh</span>)  </span><br><span class="line">001A5DF5  <span class="keyword">cmp</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>-<span class="number">10Ch</span>],<span class="number">2</span>  </span><br><span class="line">001A5DFC  <span class="keyword">je</span>          main+<span class="number">1D6h</span> (<span class="number">01A5E16h</span>)  </span><br><span class="line">001A5DFE  <span class="keyword">jmp</span>         main+<span class="number">1E1h</span> (<span class="number">01A5E21h</span>)  </span><br><span class="line">	&#123;</span><br><span class="line">		case RED:</span><br><span class="line">		&#123;	</span><br><span class="line">			//cout &lt;&lt; <span class="string">&quot;red&quot;</span> &lt;&lt; endl<span class="comment">;</span></span><br><span class="line">			c1 += <span class="number">1</span><span class="comment">;</span></span><br><span class="line">001A5E00  <span class="keyword">mov</span>         <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> [c1]  </span><br><span class="line">001A5E03  <span class="keyword">add</span>         <span class="built_in">eax</span>,<span class="number">1</span>  </span><br><span class="line">001A5E06  <span class="keyword">mov</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [c1],<span class="built_in">eax</span>  </span><br><span class="line">			break<span class="comment">;</span></span><br><span class="line">001A5E09  <span class="keyword">jmp</span>         main+<span class="number">1E7h</span> (<span class="number">01A5E27h</span>)  </span><br><span class="line">		&#125;</span><br><span class="line">		case GREEN:</span><br><span class="line">		&#123;	</span><br><span class="line">			//cout &lt;&lt; <span class="string">&quot;green&quot;</span> &lt;&lt; endl<span class="comment">; </span></span><br><span class="line">			c1 += <span class="number">2</span><span class="comment">;</span></span><br><span class="line">001A5E0B  <span class="keyword">mov</span>         <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> [c1]  </span><br><span class="line">001A5E0E  <span class="keyword">add</span>         <span class="built_in">eax</span>,<span class="number">2</span>  </span><br><span class="line">001A5E11  <span class="keyword">mov</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [c1],<span class="built_in">eax</span>  </span><br><span class="line">			break<span class="comment">;</span></span><br><span class="line">001A5E14  <span class="keyword">jmp</span>         main+<span class="number">1E7h</span> (<span class="number">01A5E27h</span>)  </span><br><span class="line">		&#125;</span><br><span class="line">		case BLUE:</span><br><span class="line">		&#123;	</span><br><span class="line">			//cout &lt;&lt; <span class="string">&quot;blue&quot;</span> &lt;&lt; endl<span class="comment">;</span></span><br><span class="line">			c1 += <span class="number">3</span><span class="comment">;</span></span><br><span class="line">001A5E16  <span class="keyword">mov</span>         <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> [c1]  </span><br><span class="line">001A5E19  <span class="keyword">add</span>         <span class="built_in">eax</span>,<span class="number">3</span>  </span><br><span class="line">001A5E1C  <span class="keyword">mov</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [c1],<span class="built_in">eax</span>  </span><br><span class="line">			break<span class="comment">;</span></span><br><span class="line">001A5E1F  <span class="keyword">jmp</span>         main+<span class="number">1E7h</span> (<span class="number">01A5E27h</span>)  </span><br><span class="line">		&#125;</span><br><span class="line"><span class="symbol">		default:</span></span><br><span class="line">		&#123;	</span><br><span class="line">			//cout &lt;&lt; <span class="string">&quot;unknown color&quot;</span> &lt;&lt; endl<span class="comment">;</span></span><br><span class="line">			c1 += <span class="number">0</span><span class="comment">;</span></span><br><span class="line">001A5E21  <span class="keyword">mov</span>         <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> [c1]  </span><br><span class="line">001A5E24  <span class="keyword">mov</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [c1],<span class="built_in">eax</span>  </span><br><span class="line">			break<span class="comment">;</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    return <span class="number">0</span><span class="comment">;</span></span><br><span class="line">001A5E27  <span class="keyword">xor</span>         <span class="built_in">eax</span>,<span class="built_in">eax</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在分支不是很多的情况下，两者差异不大，但如果分支很多的话，switch的效率更高。从汇编看switch更像一个表结构，if是个树结构。</p>
<p>使用场景的区别：</p>
<ol type="1">
<li>switch只支持常量值固定相等的分支判断；</li>
<li>if可以做区间范围判断；</li>
<li>switch能做的if都可以，但反之不行。</li>
</ol>
<p>性能比较：</p>
<ol type="1">
<li>分支少的时候，差别不是很大，分支多时，switch性能较高；</li>
<li>if开始处的几个分支效率高，之后效率递减；</li>
<li>switch的所有case速度几乎一样。</li>
</ol>
<h2 id="循环结构">循环结构</h2>
<p>C++中一共提供了三种循环语句：while、do while、for</p>
<h3 id="三种循环结构">三种循环结构</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//计算1 + 2 + …… + 99 + 100的和</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">// <span class="doctag">TODO:</span> 1+2+3+4...+100</span></span><br><span class="line">	<span class="comment">// while语句</span></span><br><span class="line">	<span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> index = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (index &lt;= <span class="number">100</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		sum += index;</span><br><span class="line">		index += <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// for语句</span></span><br><span class="line">	index = <span class="number">1</span>;</span><br><span class="line">	sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (index = <span class="number">1</span>; index &lt;= <span class="number">100</span>; ++index)</span><br><span class="line">	&#123;</span><br><span class="line">		sum += index;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// do-while语句</span></span><br><span class="line">	sum = <span class="number">0</span>;</span><br><span class="line">	index = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		sum += index;</span><br><span class="line">		index += <span class="number">1</span>;</span><br><span class="line">	&#125; <span class="keyword">while</span> (index &lt;= <span class="number">100</span>);</span><br><span class="line">	cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">三种汇编代码的底层逻辑：</span><br><span class="line">	// while语句</span><br><span class="line">	<span class="keyword">int</span> sum = <span class="number">0</span><span class="comment">;</span></span><br><span class="line">002A17BE  <span class="keyword">mov</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [sum],<span class="number">0</span>  </span><br><span class="line">	<span class="keyword">int</span> index = <span class="number">1</span><span class="comment">;</span></span><br><span class="line">002A17C5  <span class="keyword">mov</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [index],<span class="number">1</span>  </span><br><span class="line">	while (index &lt;= <span class="number">100</span>)</span><br><span class="line">002A17CC  <span class="keyword">cmp</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [index],<span class="number">64h</span>  </span><br><span class="line">002A17D0  <span class="keyword">jg</span>          main+<span class="number">46h</span> (<span class="number">02A17E6h</span>)  </span><br><span class="line">	&#123;</span><br><span class="line">		sum += index<span class="comment">;</span></span><br><span class="line">002A17D2  <span class="keyword">mov</span>         <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> [sum]  </span><br><span class="line">002A17D5  <span class="keyword">add</span>         <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> [index]  </span><br><span class="line">002A17D8  <span class="keyword">mov</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [sum],<span class="built_in">eax</span>  </span><br><span class="line">		index += <span class="number">1</span><span class="comment">;</span></span><br><span class="line">002A17DB  <span class="keyword">mov</span>         <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> [index]  </span><br><span class="line">002A17DE  <span class="keyword">add</span>         <span class="built_in">eax</span>,<span class="number">1</span>  </span><br><span class="line">002A17E1  <span class="keyword">mov</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [index],<span class="built_in">eax</span>  </span><br><span class="line">	&#125;</span><br><span class="line">002A17E4  <span class="keyword">jmp</span>         main+<span class="number">2Ch</span> (<span class="number">02A17CCh</span>)  </span><br><span class="line">	//cout &lt;&lt; sum &lt;&lt; endl<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">	// for语句</span><br><span class="line">	//index = <span class="number">1</span><span class="comment">;</span></span><br><span class="line">	sum = <span class="number">0</span><span class="comment">;</span></span><br><span class="line">002A17E6  <span class="keyword">mov</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [sum],<span class="number">0</span>  </span><br><span class="line">	for (index = <span class="number">1</span><span class="comment">; index &lt;= 100; ++index)</span></span><br><span class="line">002A17ED  <span class="keyword">mov</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [index],<span class="number">1</span>  </span><br><span class="line">002A17F4  <span class="keyword">jmp</span>         main+<span class="number">5Fh</span> (<span class="number">02A17FFh</span>)  </span><br><span class="line">002A17F6  <span class="keyword">mov</span>         <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> [index]  </span><br><span class="line">002A17F9  <span class="keyword">add</span>         <span class="built_in">eax</span>,<span class="number">1</span>  </span><br><span class="line">002A17FC  <span class="keyword">mov</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [index],<span class="built_in">eax</span>  </span><br><span class="line">002A17FF  <span class="keyword">cmp</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [index],<span class="number">64h</span>  </span><br><span class="line">002A1803  <span class="keyword">jg</span>          main+<span class="number">70h</span> (<span class="number">02A1810h</span>)  </span><br><span class="line">	&#123;</span><br><span class="line">		sum += index<span class="comment">;</span></span><br><span class="line">002A1805  <span class="keyword">mov</span>         <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> [sum]  </span><br><span class="line">	&#123;</span><br><span class="line">		sum += index<span class="comment">;</span></span><br><span class="line">002A1808  <span class="keyword">add</span>         <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> [index]  </span><br><span class="line">002A180B  <span class="keyword">mov</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [sum],<span class="built_in">eax</span>  </span><br><span class="line">	&#125;</span><br><span class="line">002A180E  <span class="keyword">jmp</span>         main+<span class="number">56h</span> (<span class="number">02A17F6h</span>)  </span><br><span class="line">	//cout &lt;&lt; sum &lt;&lt; endl<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">	// <span class="built_in">do</span>-while语句</span><br><span class="line">	sum = <span class="number">0</span><span class="comment">;</span></span><br><span class="line">002A1810  <span class="keyword">mov</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [sum],<span class="number">0</span>  </span><br><span class="line">	index = <span class="number">1</span><span class="comment">;</span></span><br><span class="line">002A1817  <span class="keyword">mov</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [index],<span class="number">1</span>  </span><br><span class="line">	<span class="built_in">do</span> </span><br><span class="line">	&#123;</span><br><span class="line">		sum += index<span class="comment">;</span></span><br><span class="line">002A181E  <span class="keyword">mov</span>         <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> [sum]  </span><br><span class="line">002A1821  <span class="keyword">add</span>         <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> [index]  </span><br><span class="line">002A1824  <span class="keyword">mov</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [sum],<span class="built_in">eax</span>  </span><br><span class="line">		index += <span class="number">1</span><span class="comment">;</span></span><br><span class="line">002A1827  <span class="keyword">mov</span>         <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> [index]  </span><br><span class="line">002A182A  <span class="keyword">add</span>         <span class="built_in">eax</span>,<span class="number">1</span>  </span><br><span class="line">002A182D  <span class="keyword">mov</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [index],<span class="built_in">eax</span>  </span><br><span class="line">	&#125; while (index &lt;= <span class="number">100</span>)<span class="comment">;</span></span><br><span class="line">002A1830  <span class="keyword">cmp</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [index],<span class="number">64h</span>  </span><br><span class="line">002A1834  <span class="keyword">jle</span>         main+<span class="number">7Eh</span> (<span class="number">02A181Eh</span>)  </span><br><span class="line">	//cout &lt;&lt; sum &lt;&lt; endl<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>从底层逻辑上看，do while循环的效率最高，for循环的效率最低。</p>
<h3 id="多层循环与循环优化">多层循环与循环优化</h3>
<p>请输出所有形如aabb的四位完全平方数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// aabb的完全平方数</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//方法一：一个显而易见的方法</span></span><br><span class="line">	<span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">	<span class="type">double</span> m = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">size_t</span> a = <span class="number">1</span>; a &lt; <span class="number">10</span>; a++)</span><br><span class="line">	&#123;<span class="comment">// for1</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">size_t</span> b = <span class="number">0</span>; b &lt; <span class="number">10</span>; b++)</span><br><span class="line">		&#123;<span class="comment">// for 2</span></span><br><span class="line">			n = a * <span class="number">1100</span> + b * <span class="number">11</span>; <span class="comment">//aabb</span></span><br><span class="line">			<span class="comment">//求平方根，看是否是整数</span></span><br><span class="line">			m = <span class="built_in">sqrt</span>(n);          </span><br><span class="line">			<span class="keyword">if</span> (m - <span class="built_in">int</span>(m) &lt; <span class="number">0.00000001</span>)  <span class="comment">//当差值小于一个极小值即可，这个值和浮点数的精度有关</span></span><br><span class="line">			&#123;</span><br><span class="line">				cout &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="comment">// for 2</span></span><br><span class="line">	&#125;<span class="comment">// for1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//方法二：逆向思维</span></span><br><span class="line">	<span class="comment">//先保证是平方根，再看是否是aabb类型</span></span><br><span class="line">	<span class="comment">//这样做第一不需要双层循环，第二避免了开平方根造成的精度丢失和低速运算</span></span><br><span class="line">	<span class="type">int</span> high, low;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//不需要从1开始，31*31=961，32*32=1024</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">size_t</span> index = <span class="number">31</span>; ; index++)</span><br><span class="line">	&#123;</span><br><span class="line">		n = index * index; <span class="comment">//n就是我们要构造的完全平方数</span></span><br><span class="line">		<span class="keyword">if</span> (n &lt; <span class="number">1000</span>)</span><br><span class="line">			<span class="keyword">continue</span>;   <span class="comment">// 继续下一次循环</span></span><br><span class="line">		<span class="keyword">if</span> (n &gt; <span class="number">9999</span>)</span><br><span class="line">			<span class="keyword">break</span>;        <span class="comment">// 退出循环</span></span><br><span class="line">		high = n / <span class="number">100</span>;   <span class="comment">// 4567/100 = 45</span></span><br><span class="line">		low = n % <span class="number">100</span>;   <span class="comment">// 4567%100 = 67</span></span><br><span class="line">		<span class="keyword">if</span> ((high / <span class="number">10</span> == high % <span class="number">10</span>) &amp;&amp; (low / <span class="number">10</span> == low % <span class="number">10</span>))   <span class="comment">// 判断aa， bb</span></span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> </p>
<h1 id="函数">函数</h1>
<p>  一个C++程序是由若干个源程序文件构成，一个源程序是由若干函数构成，函数将一段逻辑封装起来，便于复用；</p>
<p>  从用户角度看，函数分成：</p>
<ul>
<li>库函数：标准函数，由C++系统提供；</li>
<li>用户自定义函数：需要用户自定义后使用</li>
</ul>
<p> </p>
<p>  函数的组成部分：</p>
<ol type="1">
<li>返回类型：一个函数可以返回一个值；</li>
<li>函数名称：函数的实际名称，函数名和参数列表一起构成了函数签名，函数签名才是被调用的真正名字；</li>
<li>参数：参数列表包括函数参数的类型、顺序、数量。参数是可选的，可以不包含参数；</li>
<li>函数主体：函数主体包含一组定义函数执行任务的语句。</li>
</ol>
<h2 id="函数重载与name-mangling">函数重载与Name Mangling</h2>
<p>函数重载Overload，函数的名称一样，但参数列表不同：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">test</span><span class="params">(<span class="type">int</span> a)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">test</span><span class="params">(<span class="type">double</span> a)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">test</span><span class="params">(<span class="type">int</span> a,<span class="type">double</span> b)</span></span>;</span><br></pre></td></tr></table></figure>
<p>程序是怎么选择调用哪个函数的呢？这就引入了Name
Mangling，给重载的函数不同的签名，以避免调用时的二义性调用。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">test</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">test</span><span class="params">(<span class="type">double</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">int</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">test</span><span class="params">(<span class="type">int</span> a, <span class="type">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> result = <span class="built_in">test</span>(<span class="number">1</span>);</span><br><span class="line">	result = <span class="built_in">test</span>(<span class="number">2.0</span>);</span><br><span class="line">	result = <span class="built_in">test</span>(<span class="number">1</span>, <span class="number">2.0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>观察编译生成的.obj中间代码，可以看到有三个test函数：</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">//?test@<span class="symbol">@YAHH</span><span class="symbol">@Z</span> </span><br><span class="line">//?test@<span class="symbol">@YAHN</span><span class="symbol">@Z</span> </span><br><span class="line">//?test@<span class="symbol">@YAHHN</span><span class="symbol">@Z</span></span><br></pre></td></tr></table></figure>
<p>我们用VS自带的undname.exe工具，观察其中的一个可以看到：</p>
<p><img
src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/undname.jpg" /></p>
<p>即在程序中存储的是程序的签名。</p>
<h2 id="函数与指针">函数与指针</h2>
<p>指针的功能很强大，我们可以让指针指向任意的地址空间，所以我们可以让指针指向一个函数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">test</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">test</span><span class="params">(<span class="type">double</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">int</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">test</span><span class="params">(<span class="type">int</span> a, <span class="type">double</span> b = <span class="number">2.0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//int test(int a)和int test(int a, double b = 2.0)都满足下面这个调用方法</span></span><br><span class="line">	<span class="type">int</span> result = <span class="built_in">test</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//为了解决重载问题，可以使用函数指针调用</span></span><br><span class="line">	<span class="built_in">int</span>(*p)(<span class="type">int</span>);  <span class="comment">//定义一个指针p，表示参数是int，返回值是int的一个函数</span></span><br><span class="line">	p = test;   <span class="comment">//指针变量赋值，此时虽然有三个同名函数，但明确指向的是参数为int的函数</span></span><br><span class="line">	<span class="type">int</span> result = (*p)(<span class="number">1</span>); <span class="comment">//函数指针的使用，此时*p是间接引用</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>要注意区别指向函数的指针和返回指针的函数：</p>
<ul>
<li>每一个函数都占用一段内存单元，我们可以通过内存访问到函数，它们有个起始地址，我们可以用一个指针指向起始地址。指向函数入口地址的指针称为<strong>函数指针</strong>;</li>
</ul>
<p>函数指针一般形式：数据类型(*指针变量名)(参数表)</p>
<ul>
<li>区分与返回指针的函数的区别
<ul>
<li>int(*p)(int); //是指针，指向一个函数的入口地址</li>
<li>int* p(int); //是函数，返回的值是int指针</li>
</ul></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">MaxValue</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (x &gt; y) ? x : y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">MinValue</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (x &lt; y) ? x : y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ProcessNum</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span>(*p)(<span class="type">int</span> a, <span class="type">int</span> b))</span> <span class="comment">//参数中有函数指针</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">p</span>(x, y) &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x = <span class="number">10</span>, y = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//直接用函数名做参数，只要保证函数的参数列表是两个int，返回值是int就可以</span></span><br><span class="line">	<span class="built_in">ProcessNum</span>(x, y, MaxValue);</span><br><span class="line">	<span class="built_in">ProcessNum</span>(x, y, MinValue);</span><br><span class="line">	<span class="built_in">ProcessNum</span>(x, y, Add);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  上文的例子中，bool ProcessNum(int x, int y, int(*p)(int a, int
b))参数有函数指针，我们把函数名传递进去，真正的调用是在这个函数体内部的。我们把这样的调用方式称为<u><strong>回调函数</strong></u>。</p>
<h2 id="命名空间">命名空间</h2>
<p>  开发过程中，可能会出现相同的函数签名，但内部实现不一样的情况。为了解决这个问题，可以使用命名空间。</p>
<p>  命名空间这个概念，可作为附加信息来区分不同库中相同名称的函数、类、变量等，命名空间即定义了上下文。本质上，命名空间就是定义了一个范围。</p>
<p>  关键词：using和namespace的使用。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">test</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> AA</span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">test</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> a + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">test</span>(<span class="number">1</span>) &lt;&lt; endl; <span class="comment">//全局的</span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; AA::<span class="built_in">test</span>(<span class="number">1</span>) &lt;&lt; endl; <span class="comment">//AA中的</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  在开发中，命名空间的使用非常广泛，尤其是使用第三方库的时候。程序中常用的cout就属于std命名空间。</p>
<h2 id="内联函数">内联函数</h2>
<p>如果一个函数是内联的，那么在编译时，编译器会把该函数的代码副本放置在每个调用该函数的地方。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">MaxValue</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (x &gt; y) ? x : y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  引入内联函数的目的是为了解决程序中函数调用的效率问题，即空间换时间；</p>
<p>  注意：内联函数内部不能有太复杂的逻辑，比如复杂的循环判断或者递归。编译器有时会有自己的优化策略，所以内联不一定起作用。VS中记得把C/C++设置中的内联优化打开。</p>
<h2 id="递归函数">递归函数</h2>
<h3 id="数学归纳法">数学归纳法</h3>
<p>数学归纳法是证明当n等于任意一个自然数时某命题成立。证明步骤分两步：</p>
<ol type="1">
<li>证明当n=1时命题成立；</li>
<li>假设n=m时成立，那么可以推导出在n=m+1时命题也成立（m为任意自然数）</li>
</ol>
<p>递归背后的数学逻辑就是数学归纳法。</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">斐波那契数列：<span class="number">1</span>，<span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>，<span class="number">5</span>，<span class="number">8</span>，<span class="number">13</span>，<span class="number">21</span>，<span class="number">34</span>，……</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>                                      <span class="built_in">n</span>=<span class="number">1</span>,<span class="number">2</span></span><br><span class="line">Fib(<span class="built_in">n</span>) = Fib(<span class="built_in">n</span>-<span class="number">1</span>)+Fib(<span class="built_in">n</span>-<span class="number">2</span>)             <span class="built_in">n</span>&gt;<span class="number">2</span></span><br><span class="line"></span><br><span class="line">程序实现：</span><br><span class="line"><span class="built_in">int</span> Fib(<span class="built_in">int</span> <span class="built_in">n</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">if</span>(<span class="built_in">n</span> == <span class="number">0</span>)</span><br><span class="line">		return <span class="number">0</span>;</span><br><span class="line">	else <span class="built_in">if</span>(<span class="built_in">n</span> == <span class="number">1</span>)</span><br><span class="line">		return <span class="number">1</span>;</span><br><span class="line">	else</span><br><span class="line">		return Fib(<span class="built_in">n</span>-<span class="number">1</span>) + Fib(<span class="built_in">n</span>-<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="递归的基本法则">递归的基本法则</h3>
<ol type="1">
<li>基准情形：必须存在无需递归就能解决的场景；</li>
<li>不断推进：每一次递归调用都必须使求解状况朝着接近基准情形的方向推进；</li>
<li>设计法则：假设所有的递归调用都能运行；</li>
<li>合成效益法则：求解一个问题的同一个实例时，切勿在不同的递归调用中做重复性的工作；</li>
</ol>
<h3 id="递归的优化">递归的优化</h3>
<p>  递归是一种重要的编程思想，很多重要的算法都包含递归的思想；但递归在时间和空间上都有很大的缺陷：空间上需要开辟大量的栈空间；时间上可能需要大量的重复运算。</p>
<p> </p>
<p>递归优化思路：</p>
<ol type="1">
<li>尾递归：所有递归形式的调用都出现在函数的末尾；</li>
<li>使用循环替代；</li>
<li>使用动态规划，空间换时间；</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用循环来代替递归调用</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Fib3</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (n &lt; <span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> n;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> n0 = <span class="number">0</span>, n1 = <span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> temp;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		temp = n0;</span><br><span class="line">		n0 = n1;</span><br><span class="line">		n1 = temp + n1;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> n1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环调用避免了每次递归创建的函数入栈操作，减小空间使用</span></span><br><span class="line"><span class="comment">//也减少了重复运算</span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//尾递归</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Fib2</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> ret0,  <span class="type">int</span> ret1)</span> <span class="comment">//ret0和ret1入参是斐波那契的第一个值和第二个值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> ret0;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> ret1;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Fib2</span>(n - <span class="number">1</span>, ret1, ret0 + ret1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用普通递归，return Fib(n-1) + Fib(n-2)是一个表达式，函数堆栈很复杂</span></span><br><span class="line"><span class="comment">// 每次递归调用都需要保存多个函数调用堆栈</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//尾递归直接Fib2(n - 1, ret1, ret0 + ret1)，只是简单的函数调用，编译器会帮我们做优化</span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//动态规划</span></span><br><span class="line"><span class="type">int</span> g_a[<span class="number">1000</span>]; <span class="comment">// 全局的数组，记录斐波那契数列的前1000个值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Fib4</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//assert(n &gt;= 0);</span></span><br><span class="line">	g_a[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">	g_a[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (g_a[i] == <span class="number">0</span>) <span class="comment">//全局变量初始化值为0，g_a[i]==0代表没计算过</span></span><br><span class="line">		&#123;</span><br><span class="line">			g_a[i] = g_a[i - <span class="number">1</span>] + g_a[i - <span class="number">2</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> g_a[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//动态规划的思想就是空间换时间</span></span><br><span class="line"><span class="comment">//把曾经计算过的信息保存下来，不需要重复计算</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++基础</tag>
      </tags>
  </entry>
  <entry>
    <title>C++基础语法</title>
    <url>/2022/C/C++/C-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="编译型语言">编译型语言</h1>
<p>编程语言可以分为四个层次，从上到下，语言会更接近人类使用语言的方式，但相对应的程序运行效率逐渐降低</p>
<ol type="1">
<li>机器语言、汇编语言：这些语言执行效率很高，但移植性很差；</li>
<li>编译型语言：C/C++。这种类型的语言更接近人类的使用方式，在不同的机器上也可以跨平台使用。但跨平台有一些难度；</li>
<li>解释型语言：Basic、Python。这种类型的语言通过解释器作为中间层，跨平台性很强；</li>
<li>脚本语言：bash、csh。不同的平台拥有不同的脚本，本身的功能并不强大，但是很容易把各种语言融合在一起。</li>
</ol>
<p>C++属于编译型语言，需要经历编译和链接的过程，才能变成真正的可执行程序：</p>
<p><img
src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B.png" /></p>
<h1 id="数据类型">数据类型</h1>
<p>  C++中的每个变量都有其数据类型，数据类型决定这个变量所占用内存空间的大小和布局方式、该空间能存储的值的范围，以及变量能参与的运算。</p>
<p>  在计算机中，1byte=8bit。我们在说数据类型的大小的时候一般以byte作为单位来计算。</p>
<p>  计算机中都是用0、1这种二进制存储的。日常中我们习惯用10进制来看，有时候为了方便，调试过程中更习惯用16进制的方式来表示。</p>
<p><img
src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA.png" /></p>
<table>
<colgroup>
<col style="width: 26%" />
<col style="width: 26%" />
<col style="width: 26%" />
<col style="width: 20%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">名称</th>
<th style="text-align: center;">字节数</th>
<th style="text-align: center;">描述</th>
<th style="text-align: left;">范围</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">char</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">存储字符或者整数，8位(bit)</td>
<td style="text-align: left;">有符号：-128~127；<br>无符号：0 ~
255;</td>
</tr>
<tr class="even">
<td style="text-align: center;">short</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">短整数，16位</td>
<td style="text-align: left;">有符号：-32768~32767；<br>无符号:0
~65535;</td>
</tr>
<tr class="odd">
<td style="text-align: center;">long</td>
<td style="text-align: center;">4</td>
<td style="text-align: center;">长整数，32位</td>
<td
style="text-align: left;">有符号：-2147483648~2147483647；<br>无符号:0
~4294967295 ;</td>
</tr>
<tr class="even">
<td style="text-align: center;">int</td>
<td style="text-align: center;">4</td>
<td style="text-align: center;">整数</td>
<td style="text-align: left;">同上</td>
</tr>
<tr class="odd">
<td style="text-align: center;">float</td>
<td style="text-align: center;">4</td>
<td style="text-align: center;">浮点数</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: center;">double</td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">双精度浮点数</td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: center;">long double</td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">长双精度浮点数</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: center;">bool</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">布尔值，只能是真值或假值</td>
<td style="text-align: left;">true或false</td>
</tr>
<tr class="odd">
<td style="text-align: center;">wchar_t</td>
<td style="text-align: center;">2</td>
<td
style="text-align: center;">宽字符，这是为存储两字节长的国际字符而设计的类型</td>
<td style="text-align: left;"></td>
</tr>
</tbody>
</table>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//常见的数据类型的定义</span></span><br><span class="line"><span class="type">char</span> a[<span class="number">10</span>] = <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="type">short</span> <span class="type">int</span> s = <span class="number">97</span>;</span><br><span class="line"><span class="type">int</span> m = <span class="number">97</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">int</span> n = <span class="number">97</span>;</span><br><span class="line"><span class="comment">//给float类型的变量赋值时，要在数值后面加上一个f或F，表示这是一个float类型的常量，否则默认为double类型的常量</span></span><br><span class="line"><span class="type">float</span> f = <span class="number">97.0f</span>; </span><br><span class="line"><span class="type">double</span> d = <span class="number">97.0</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">double</span> k = <span class="number">97.0</span>;</span><br><span class="line"><span class="type">bool</span> b = <span class="literal">true</span>;</span><br><span class="line"><span class="type">wchar_t</span> w[<span class="number">10</span>] = <span class="string">L&quot;a&quot;</span>;</span><br></pre></td></tr></table></figure>
<h1 id="标识符和关键字">标识符和关键字</h1>
<p>C++中的标识符是用来标识变量、函数、类、模块，或者任何其他用户自定义项目的名字；</p>
<ul>
<li>一个标识符通常以字母A~Z或a
~z或下划线_开始，后面跟零个或者多个字母、下划线和数字；</li>
<li>一个标识符不允许使用数字开头；</li>
<li>一个标识符内不允许出现标点字符，如@、&amp;等等；</li>
<li>不能混淆大小写，C++是区分大小写的编程语言；</li>
<li>不能使用C++关键字作为标识符，原则上不允许长度超过32位；</li>
</ul>
<p>标识符命名规则：</p>
<ul>
<li>不要试图发明最好的命名规则，要制定一个让大部分人都满意的命名并在项目组中贯彻执行；</li>
<li>标识符应该直观，可以望文知意，尽量使用英文单词组合，不要使用拼音；</li>
<li>标识符长度要符合“min-length&amp;max-information”原则，长度尽可能短，信息尽可能多</li>
<li>变量名字尽可能使用“名词”或“形容词+名词”形式，尽量避免出现数字；函数名尽量使用“动词+名词”</li>
<li>可借鉴的命名规则：
<ul>
<li>匈牙利命名法：开头字母用变量类型缩写，其余部分用变量的英文或者英文缩写，要求第一个字母大写，如int
iMyAge;</li>
<li>Camel(驼峰)命名法：第一个单词首字母小写，后面单词首字母大写，如int
myAge;</li>
<li>Pascal命名法：每个单词的第一个字母都大写，如int MyAge;</li>
</ul></li>
</ul>
<p> </p>
<p><a
href="https://en.cppreference.com/w/cpp/keyword">C++的关键字</a></p>
<h1 id="变量与常量">变量与常量</h1>
<h2 id="变量">变量</h2>
<ul>
<li>变量就是在程序运行过程中，值可以改变的量；</li>
<li>变量在程序的执行中可以进行赋值造作，发生变化；</li>
<li>变量有一个名字，并在使用之前要说明其类型，一经说明，就在内存中占据与其类型相应的存储单元；</li>
</ul>
<p>变量定义：</p>
<ul>
<li>首先是类型说明符，随后紧跟一个或者多个变量名组成的列表，其中变量名以逗号分隔，最后以分号结束：int
m = 1,n = 1;</li>
<li>当变量在创建时获得了一个特定的值，我们说这个变量被初始化了。用于初始化变量的值可以是任意复杂的表达式；</li>
<li>当一次定义了一个或多个变量时，变量的名字随着定义就可以使用了，如：int
m=1,n=1; int sum = m + n;</li>
</ul>
<h2 id="常量">常量</h2>
<ul>
<li>在程序运行过程中，其值一直保持不变的量为常量；</li>
<li>常量也区分不同的数据类型；</li>
</ul>
<p>常量在C++中有两种定义的方法：</p>
<ol type="1">
<li>使用#define，如：#define PI 3.14</li>
<li>使用const，如：const double PI = 3.14</li>
</ol>
<p>尽量使用const形式定义变量，因为#define不会出现在编译时期，在编译出错时不容易排错。define是C语言时期的习惯。</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">宏定义</th>
<th style="text-align: center;">const</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">宏定义相当于字符替换</td>
<td style="text-align: center;">常量声明</td>
</tr>
<tr class="even">
<td style="text-align: center;">预处理器处理</td>
<td style="text-align: center;">编译器处理</td>
</tr>
<tr class="odd">
<td style="text-align: center;">无安全类型检查</td>
<td style="text-align: center;">有安全类型检查</td>
</tr>
<tr class="even">
<td style="text-align: center;">不分配内存</td>
<td style="text-align: center;">分配内存</td>
</tr>
<tr class="odd">
<td style="text-align: center;">存储在代码段</td>
<td style="text-align: center;">存储在数据段</td>
</tr>
<tr class="even">
<td style="text-align: center;">可以通过#undef取消</td>
<td style="text-align: center;">不可取消</td>
</tr>
</tbody>
</table>
<h2 id="整数常量">整数常量</h2>
<p>整数常量可以是十进制、八进制或者十六进制的常量:</p>
<ul>
<li>前缀指定基数：0x或者0X表示十六进制，0表示八进制，不带前缀则默认十进制；</li>
<li>整数常量也可以带一个后缀，后缀是U和L的组合，U表示无符号整数，L表示长整数。后缀可以是大写也可以小写，不区分顺序。后缀不能重复。</li>
</ul>
<h2 id="布尔常量">布尔常量</h2>
<p>布尔常量共有两个，他们都是C++关键字，true代表真，false代表假。</p>
<h2 id="字符常量">字符常量</h2>
<ul>
<li>字符常量是括在<strong>单引号</strong>中的。如果常量以L(仅当大写时)开头，则表示宽字符常量(如L'x')，此时必须保存在wchar_t类型的变量中;否则就是窄字符常量(如'x')，此处可以存储在char类型的简单变量中；</li>
<li>字符常量可以是一个普通字符('x')、一个转义序列('\t')、或者一个通用字符('\u02C0')。</li>
<li>需要表达一些符号的时候需要用到转义字符；</li>
</ul>
<p>常见转义字符如下：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">转义字符</th>
<th style="text-align: left;">含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">\\\</td>
<td style="text-align: left;">\ 字符</td>
</tr>
<tr class="even">
<td style="text-align: left;">\'</td>
<td style="text-align: left;">'字符</td>
</tr>
<tr class="odd">
<td style="text-align: left;">\"</td>
<td style="text-align: left;">"字符</td>
</tr>
<tr class="even">
<td style="text-align: left;">\?</td>
<td style="text-align: left;">?字符</td>
</tr>
<tr class="odd">
<td style="text-align: left;">\a</td>
<td style="text-align: left;">警报铃</td>
</tr>
<tr class="even">
<td style="text-align: left;">\b</td>
<td style="text-align: left;">退格键</td>
</tr>
<tr class="odd">
<td style="text-align: left;">\f</td>
<td style="text-align: left;">换页符</td>
</tr>
<tr class="even">
<td style="text-align: left;">\n</td>
<td style="text-align: left;">换行符</td>
</tr>
<tr class="odd">
<td style="text-align: left;">\r</td>
<td style="text-align: left;">换行符</td>
</tr>
<tr class="even">
<td style="text-align: left;">\t</td>
<td style="text-align: left;">水平制表符</td>
</tr>
<tr class="odd">
<td style="text-align: left;">\v</td>
<td style="text-align: left;">垂直制表符</td>
</tr>
<tr class="even">
<td style="text-align: left;">\ooo</td>
<td style="text-align: left;">一到三位的八进制数</td>
</tr>
<tr class="odd">
<td style="text-align: left;">\xhh...</td>
<td style="text-align: left;">一个或多个数字的十六进制数</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++基础</tag>
      </tags>
  </entry>
  <entry>
    <title>C++概况</title>
    <url>/2022/C/C++/C-%E6%A6%82%E5%86%B5/</url>
    <content><![CDATA[<h1 id="c概况">C++概况</h1>
<p>C++语言应用广泛，凡是要求大型的、对性能要求很高的程序，以及物联网应用上，都会用到C++语言。</p>
<h1 id="c历史">C++历史</h1>
<ul>
<li>C++编程语言可追溯到1979年，Bjarne
Stroustrup创立了带类的C，这就是C语言的超集。1983年，这个语言被命名为C++；</li>
<li>C++最开始仅仅是C语言的增强版，但是后来又引入了很多功能。1998年伴随着STL标准库的诞生，一堆新功能和特性的产生，C++标准委员会发布了第一个国际标准C++
+ ISO/IEC 1488：称为C++ 98；</li>
<li>2011年中期，C++标准（被称作C++
11）完成了新的标准。Boost库项目对新标准产生了相当大的影响，一些新模块直接从响应的Boost库中派生出来；</li>
<li>C++
11之后，每三年C++都会发布新的语言标准，每一版都在基本保留向后兼容性的同时，提供着改进和新功能；</li>
</ul>
<h1 id="c特点">C++特点</h1>
<p>优点：</p>
<ol type="1">
<li>强大的抽象封装能力：这让C++语言具备了强大的开发工程能力；</li>
<li>高性能：运行快，占用资源少；</li>
<li>低功耗：特别适合在各种微型嵌入式设备中高效运行程序；</li>
</ol>
<p>缺点：</p>
<ol type="1">
<li>语法相对复杂，细节比较多；</li>
<li>需要一些好的规范和范式，否则代码很难维护；</li>
</ol>
<h1 id="c的应用">C++的应用</h1>
<ul>
<li>大型桌面应用程序（如Google Chrome、Miscrosoft Office）</li>
<li>大型网站的后台（Google的搜索引擎）</li>
<li>游戏和游戏引擎（Unity）</li>
<li>视觉库和AI引擎（Opencv和Tensorflow）</li>
<li>数据库（Mircrosoft SQL Server）</li>
<li>嵌入式领域</li>
</ul>
<p>总的来说，在开发成本比较高，对于内存和CPU要求很高，低功耗并且程序被调用非常频繁等场景中，目前C++是最合适的语言。</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++基础</tag>
      </tags>
  </entry>
  <entry>
    <title>C++运算符与表达式</title>
    <url>/2022/C/C++/C-%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<p>  运算符是一种告诉编译器执行特定的数学或逻辑操作的符号。C++内置了丰富的运算符，并提供了以下类型的运算符：</p>
<ul>
<li>算数运算符</li>
<li>关系运算符</li>
<li>逻辑运算符</li>
<li>位运算符</li>
<li>赋值运算符</li>
<li>杂项运算符</li>
</ul>
<p>  在程序中，运算符是用来操作数据的，因此，这些数据也被称作操作数。使用运算符将操作数连接而成的式子称为:表达式。
表达式的特点：</p>
<ul>
<li>变量和常量都可以认为是表达式；</li>
<li>运算符的类型对应了表达式的类型，如算术运算符对应算数表达式；</li>
<li>每一个表达式都有自己的值，即表达式都有运算结果；</li>
</ul>
<h1 id="算数运算符">算数运算符</h1>
<p>A=10，B=20</p>
<table>
<thead>
<tr class="header">
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>+</td>
<td>两个操作数相加</td>
<td>A+B=30</td>
</tr>
<tr class="even">
<td>-</td>
<td>第一个操作数减去第二个操作数</td>
<td>A-B=-10</td>
</tr>
<tr class="odd">
<td>*</td>
<td>两个操作数相乘</td>
<td>A*B=200</td>
</tr>
<tr class="even">
<td>/</td>
<td>分子除以分母</td>
<td>B/A=2</td>
</tr>
<tr class="odd">
<td>%</td>
<td>取模运算符，整除后的余数</td>
<td>B%A=0</td>
</tr>
<tr class="even">
<td>++</td>
<td>自增运算符，整数值增加1</td>
<td>++A = 11</td>
</tr>
<tr class="odd">
<td>--</td>
<td>自减运算符，整数值减少1</td>
<td>- -A=9</td>
</tr>
</tbody>
</table>
<p>  除法运算中整数和浮点数的运算结果不太一样，整数除的话结果就是整数，要想输出完整整型数:需要用浮点数去除：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> A = <span class="number">10</span>;</span><br><span class="line">cout &lt;&lt; <span class="number">15</span> / A &lt;&lt; endl;   <span class="comment">//输出1</span></span><br><span class="line">cout &lt;&lt; <span class="number">15.0</span> / A &lt;&lt; endl;  <span class="comment">//输出1.5</span></span><br></pre></td></tr></table></figure>
<p>  自增/自减运算符放在变量的前面和后面是不一样的。放在变量前面就是先做运算再出结果；放在后面就是先出结果再运算。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> A = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> B = <span class="number">10</span>;</span><br><span class="line">cout &lt;&lt; ++A &lt;&lt; endl;   <span class="comment">//输出11</span></span><br><span class="line">cout &lt;&lt; B++ &lt;&lt; endl;  <span class="comment">//输出10（但是B变为11）</span></span><br></pre></td></tr></table></figure>
<h1 id="关系运算符">关系运算符</h1>
<p>A=10 ；B=20</p>
<table>
<thead>
<tr class="header">
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>==</td>
<td>检查两个操作数是否相等，如果相等则条件为真</td>
<td>(A == B)不为真</td>
</tr>
<tr class="even">
<td>!=</td>
<td>检查两个操作数是否相等，如果不相等则条件为真</td>
<td>(A!=B)为真</td>
</tr>
<tr class="odd">
<td>&gt;</td>
<td>检查左操作数是否大于右操作数，如果是则条件为真</td>
<td>(A&gt;B)不为真</td>
</tr>
<tr class="even">
<td>&lt;</td>
<td>检查左操作数是否小于右操作数，如果是则条件为真</td>
<td>(A&lt;B)为真</td>
</tr>
<tr class="odd">
<td>&gt;=</td>
<td>检擦左操作数是否大于等于右操作数，如果是则为真</td>
<td>(A&gt;=B)不为真</td>
</tr>
<tr class="even">
<td>&lt;=</td>
<td>检查左操作数是否小于等于右操作数，如果是则条件为真</td>
<td>(A&lt;=b)为真</td>
</tr>
</tbody>
</table>
<p>关系运算符返回的都是bool类型的值。</p>
<h1 id="逻辑运算符">逻辑运算符</h1>
<p>A = true； B = false;</p>
<table>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<thead>
<tr class="header">
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>&amp;&amp;</td>
<td>逻辑与运算符。如果两个操作数不为零，则条件为真</td>
<td>（A &amp;&amp; B）为假</td>
</tr>
<tr class="even">
<td>||</td>
<td>逻辑或运算。两个操作数任意一个非零，则条件为真</td>
<td>(A || B)为真</td>
</tr>
<tr class="odd">
<td>!</td>
<td>逻辑非运算，用来逆转操作数的逻辑状态，是单目运算符</td>
<td>!(A &amp;&amp; B)为真</td>
</tr>
</tbody>
</table>
<p>可以用逻辑运算符来表示德摩根律：<span class="math inline">\(\neg(A
\land B)\)</span> 等价于 <span class="math inline">\(\neg A \lor \neg
B\)</span>； <span class="math inline">\(\neg(A \lor B)\)</span> 等价于
<span class="math inline">\(\neg A \land \neg B\)</span></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt; (!(A || B) == (!A &amp;&amp; !B)) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; (!(A &amp;&amp; B) == (!A || !B)) &lt;&lt;endl;</span><br></pre></td></tr></table></figure>
<p>逻辑运算符本身也是有优先级的 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> a = <span class="literal">true</span> || <span class="literal">true</span> &amp;&amp; <span class="literal">false</span>;     <span class="comment">//true</span></span><br><span class="line"><span class="keyword">auto</span> b = (<span class="literal">true</span> || <span class="literal">true</span>) &amp;&amp; <span class="literal">false</span>;   <span class="comment">//false</span></span><br></pre></td></tr></table></figure></p>
<h1 id="赋值运算符">赋值运算符</h1>
<p>把右侧的值赋给左侧。注意左侧的值一定要是一个变量。</p>
<table>
<thead>
<tr class="header">
<th>运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>=</td>
<td>赋值运算</td>
</tr>
<tr class="even">
<td>+=</td>
<td>加且赋值运算符</td>
</tr>
<tr class="odd">
<td>-=</td>
<td>减且赋值运算符</td>
</tr>
<tr class="even">
<td>*=</td>
<td>乘且赋值运算符</td>
</tr>
<tr class="odd">
<td>/=</td>
<td>除且等于运算符</td>
</tr>
<tr class="even">
<td>%=</td>
<td>求模且等于运算符</td>
</tr>
<tr class="odd">
<td>&lt;&lt;=</td>
<td>左移且赋值运算符</td>
</tr>
<tr class="even">
<td>&gt;&gt;=</td>
<td>右移且赋值运算符</td>
</tr>
<tr class="odd">
<td>&amp;=</td>
<td>按位与且赋值运算符</td>
</tr>
<tr class="even">
<td>^=</td>
<td>按位异或且赋值运算符</td>
</tr>
<tr class="odd">
<td>|=</td>
<td>按位或且赋值运算符</td>
</tr>
</tbody>
</table>
<h1 id="位运算符">位运算符</h1>
<p>位运算符作用于位（bit），并逐位进行操作。</p>
<table>
<thead>
<tr class="header">
<th>p</th>
<th>q</th>
<th>p&amp;q</th>
<th>p | q</th>
<th>p^q</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr class="odd">
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
<tr class="even">
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>位运算符还包括取反操作~和移位运算&lt;<和>&gt;，都是以bit为单位运算。</p>
<p>与、或、异或都是双目运算符，结合性从左到右，优先级高于逻辑运算符，低于关系运算符，且从高到低为&amp;、^、|</p>
<p>使用移位运算符需要注意，左移运算还比较简单，移走的位自动填充0，但右移运算有两种情况，逻辑右移时移走的位填充0，但算数右移时移走的位与符号位有关。底层到底是逻辑右移还是算数右移取决于编译器，而不是程序员，所以对于有符号数，<strong>尽可能不要使用右移运算</strong>！！！</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 位运算</span></span><br><span class="line"><span class="type">int</span> A = <span class="number">10</span>,B = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (A&amp;B) &lt;&lt; endl;      <span class="comment">//  01010 &amp; 10100  = 00000  ==&gt; 0</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (A | B) &lt;&lt; endl;       <span class="comment">//  01010 | 10100  = 11110  ==&gt; 30</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (A^B) &lt;&lt; endl;     <span class="comment">//  01010 ^ 10100  = 11110 ==&gt; 30</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//取反运算需要补码的知识，计算机中都是用补码表示的</span></span><br><span class="line">cout &lt;&lt; (~A) &lt;&lt; endl;       <span class="comment">//  ~0000000000001010 = 11111111111110101 ==&gt; 0000000000001011==-11</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (A &lt;&lt; <span class="number">2</span>) &lt;&lt; endl;  <span class="comment">//  00001010 &lt;&lt; 2 ==&gt; 00101000 ==&gt; 40</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (A &gt;&gt; <span class="number">2</span>) &lt;&lt; endl;<span class="comment">// 00001010 &gt;&gt; 2 ==&gt; 00000010 ==&gt; 2</span></span><br></pre></td></tr></table></figure>
<h1 id="杂项运算符">杂项运算符</h1>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th>运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>sizeof</td>
<td>sizeof运算符，返回变量的大小，即这个变量的类型所占用的byte的长度</td>
</tr>
<tr class="even">
<td>Condition ?X:Y</td>
<td>条件运算符，唯一的三目运算符。如果Condition为真，则值为X，否则值为Y</td>
</tr>
<tr class="odd">
<td>，</td>
<td>逗号运算符，会执行一系列运算，整个逗号运算符表达式的值是以逗号分隔的列表中的最后一个表达式的值</td>
</tr>
<tr class="even">
<td>.(点)和-&gt;(箭头)</td>
<td>成员运算符，用于引用类、结构体和共用体的成员</td>
</tr>
<tr class="odd">
<td>Cast</td>
<td>强制类型转换运算符，把一种数据类型转换成另一种数据类型，如int(2.20)将返回2。C++中不建议使用强制转换</td>
</tr>
<tr class="even">
<td>&amp;</td>
<td>指针运算符&amp;，返回变量的地址</td>
</tr>
<tr class="odd">
<td>*</td>
<td>指针运算符*，指向一个变量</td>
</tr>
</tbody>
</table>
<h1 id="运算符优先级">运算符优先级</h1>
<p>下表从高到低列出各个运算符，较高的运算符会被优先计算：</p>
<table>
<thead>
<tr class="header">
<th>类别</th>
<th>运算符</th>
<th>结合性</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>后缀</td>
<td>() [] ++ --</td>
<td>从左到右</td>
</tr>
<tr class="even">
<td>一元</td>
<td>+ - ! ~ ++ -- (type)* &amp; sizeof()</td>
<td>从右到左</td>
</tr>
<tr class="odd">
<td>乘除</td>
<td>* / %</td>
<td>从左到右</td>
</tr>
<tr class="even">
<td>加减</td>
<td>+ -</td>
<td>从左到右</td>
</tr>
<tr class="odd">
<td>移位</td>
<td>&lt;&lt; &gt;&gt;</td>
<td>从左到右</td>
</tr>
<tr class="even">
<td>关系</td>
<td>&lt; &lt;= &gt; &gt;=</td>
<td>从左到右</td>
</tr>
<tr class="odd">
<td>相等</td>
<td>== !=</td>
<td>从左到右</td>
</tr>
<tr class="even">
<td>位与AND</td>
<td>&amp;</td>
<td>从左到右</td>
</tr>
<tr class="odd">
<td>位异或XOR</td>
<td>^</td>
<td>从左到右</td>
</tr>
<tr class="even">
<td>位或OR</td>
<td>|</td>
<td>从左到右</td>
</tr>
<tr class="odd">
<td>逻辑与</td>
<td>&amp;&amp;</td>
<td>从左到右</td>
</tr>
<tr class="even">
<td>逻辑或</td>
<td>||</td>
<td>从左到右</td>
</tr>
<tr class="odd">
<td>条件</td>
<td>?:</td>
<td>从右到左</td>
</tr>
<tr class="even">
<td>赋值</td>
<td>= += -= *= = %= &gt;&gt;= &lt;&lt;= ^= |=</td>
<td>从右到左</td>
</tr>
<tr class="odd">
<td>逗号</td>
<td>，</td>
<td>从左到右</td>
</tr>
</tbody>
</table>
<p>只需要记住两点：</p>
<ol type="1">
<li>一般来说，一元运算符优先级高于对应的二元运算符；</li>
<li>弄不清就加括号</li>
</ol>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++基础</tag>
      </tags>
  </entry>
  <entry>
    <title>C到C++的改进</title>
    <url>/2025/C/C++/C%E5%88%B0C++%E7%9A%84%E6%94%B9%E8%BF%9B/</url>
    <content><![CDATA[<h1 id="c语言字符的语法陷阱">C语言字符的语法陷阱</h1>
<p>先看C语言中常见的词法、语法问题：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> c1 = <span class="string">'yes'</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 不符合常理，但这样定义没有错误</span></span><br><span class="line"><span class="comment">* 编译器会截断</span></span><br><span class="line"><span class="comment">* 至于是保留第一个还是最后一个，这个和编译器有关</span></span><br><span class="line"><span class="comment">* 虽然没报错，但编译器会有warning</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"><span class="type">char</span> c2 = <span class="string">"yes"</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 编译器报错</span></span><br><span class="line"><span class="comment">* "yes"是一个字符串，c2只是一个字符变量，不能存储字符串</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* slash = <span class="string">"/"</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">字符串的正确定义方法</span></span><br><span class="line"><span class="comment">slash中存放两个字符：'/'、'\0'</span></span><br><span class="line"><span class="comment">这样其实就是把字符串的首地址给了指针变量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* slash2 = <span class="string">'/'</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">编译器报错</span></span><br><span class="line"><span class="comment">字符的类型不能给指针，两个变量类型不匹配</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* slash3 = &amp;c1;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">正确</span></span><br><span class="line"><span class="comment">slash3指针变量存放c1单个字符的地址</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>  从上面的例子可以看到，C语言是高级语言中的低级语言，优点是小巧、高效、接近底层，比如上面的例子就把字符和字符串区分的很细，但缺点就是细节和陷阱比较多。为了更好的解决这个问题，C++在兼容C语言的同时，推出了既高效又易于大规模开发的机制：string类的使用:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">s1</span><span class="params">(<span class="number">1</span>,<span class="string">'yes'</span>)</span></span>;  <span class="comment">//s</span></span><br><span class="line"><span class="function">string <span class="title">s2</span><span class="params">(<span class="number">3</span>,<span class="string">'yes'</span>)</span></span>;  <span class="comment">//sss</span></span><br><span class="line"><span class="function">string <span class="title">s3</span><span class="params">(<span class="number">1</span>,<span class="string">'y'</span>)</span></span>;    <span class="comment">//y</span></span><br><span class="line"><span class="function">string <span class="title">s4</span><span class="params">(<span class="string">"/"</span>)</span></span>;      <span class="comment">// /</span></span><br><span class="line"><span class="function">string <span class="title">s5</span><span class="params">(<span class="number">1</span>,<span class="string">'/'</span>)</span></span>;    <span class="comment">// /</span></span><br><span class="line"><span class="function">string <span class="title">s6</span><span class="params">(<span class="string">"yes"</span>)</span></span>;    <span class="comment">//yes</span></span><br></pre></td></tr></table></figure>
<h1 id="c语言指针和数组的关系问题">C语言指针和数组的关系问题</h1>
<p>c预言数组在作为参数时的退化行为，退化为一个指针。</p>
<p>给定一个数组，计算数组中的数据的平均数，有以下代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//计算平均数</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">average1</span><span class="params">(<span class="type">int</span> arr[<span class="number">10</span>])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="type">double</span> result = <span class="number">0.0</span>;</span><br><span class="line">	<span class="type">int</span> len = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">	std::cout &lt;&lt; <span class="string">"In average1 : "</span> &lt;&lt; len &lt;&lt; std::endl;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">	{</span><br><span class="line">		result += arr[i];</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> result / len;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="type">int</span> array1[] = { <span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>,<span class="number">70</span>,<span class="number">80</span>,<span class="number">90</span>,<span class="number">100</span> };</span><br><span class="line"></span><br><span class="line">	<span class="comment">//数组长度最好是用变量这样来求，不要写成常量</span></span><br><span class="line">	<span class="comment">//这样方便扩展</span></span><br><span class="line">	<span class="type">int</span> len = <span class="built_in">sizeof</span>(array1) / <span class="built_in">sizeof</span>(array1[<span class="number">0</span>]);</span><br><span class="line">	std::cout &lt;&lt; <span class="string">"len : "</span> &lt;&lt; len &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">	std::cout &lt;&lt; <span class="built_in">average1</span>(array1) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p><img src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/c%E9%99%B7%E9%98%B11.png"></p>
<p>  可以看到输出的值并不是平均数，通过输出中间数据可以知道，main函数中的长度是10，而average1中的数组长度是1；</p>
<p>  出现这个的原因就是C预言数组在作为函数参数传递时会退化为一个指针，average1中的入参实际上只是函数的首地址，sizeof(arr)输出的只是单个元素的长度。</p>
<p>  可以进行如下优化，通过外部把数组长度先行计算出来然后传递给函数。需要注意，如果传递的是字符数组的话就不需要这么麻烦了，因为字符数组往往是通过'\0'结尾的，函数内部有办法知道数组的长度。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//直接把数组长度传递进来</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">average2</span><span class="params">(<span class="type">int</span> arr[<span class="number">10</span>], <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="type">double</span> result = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">	{</span><br><span class="line">		result += arr[i];</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> result / len;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="type">int</span> array1[] = { <span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>,<span class="number">70</span>,<span class="number">80</span>,<span class="number">90</span>,<span class="number">100</span> };</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> len = <span class="built_in">sizeof</span>(array1) / <span class="built_in">sizeof</span>(array1[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">	std::cout &lt;&lt; <span class="built_in">average2</span>(array1,len) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>  </p>
<p>  其实知道数组当作函数参数传递时会发生退化时，就可以不传递数组，而是只传递指针：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">double</span> <span class="title">average2</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="type">double</span> result = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">	{</span><br><span class="line">		result += arr[i];</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> result / len;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>  </p>
<p>  C语言之所以要这么做，是和c语言发展分不开的。c语言早期是伴随着unix操作系统，是非常底层的，对空间要求非常高的语言。如果函数传参时传递了一个非常大的数据容器，空间转移的效率是非常低的。所以C语言设计者就通过传递指针和容器尺寸这样一种传递方式从而达到节省空间的目的。</p>
<p>  </p>
<p>  C++的解决方案就是引入STL容器，实现底层包装，保证效率的同时也保证简单安全。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这里传递的是引用</span></span><br><span class="line"><span class="comment">//如果传递的是vector本身，c++这里会产生一个副本，如果容器很大会得不偿失</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">average3</span><span class="params">(std::vector&lt;<span class="type">int</span>&gt;&amp; v)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="type">double</span> result = <span class="number">0.0</span>;</span><br><span class="line">	std::vector&lt;<span class="type">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>();</span><br><span class="line">	<span class="keyword">for</span> (;it!=v.<span class="built_in">end</span>();++it)</span><br><span class="line">	{</span><br><span class="line">		result += *it;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> result / v.<span class="built_in">size</span>();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; vt = { <span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>,<span class="number">70</span>,<span class="number">80</span>,<span class="number">90</span>,<span class="number">100</span> };</span><br><span class="line">	std::cout &lt;&lt; <span class="built_in">average3</span>(vt) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>  使用stl容器后，哪怕是二维数组，处理起来也很方便了：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">double</span> <span class="title">average2DV</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt; &gt;&amp; vv)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="type">double</span> result = <span class="number">0.0</span>;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt; vv.<span class="built_in">size</span>(); ++i)</span><br><span class="line">	{</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> j = <span class="number">0</span>; j &lt; vv[i].<span class="built_in">size</span>(); ++j)</span><br><span class="line">		{</span><br><span class="line">			result += vv[i][j];</span><br><span class="line">			size += <span class="number">1</span>;</span><br><span class="line">			cout &lt;&lt; vv[i][j] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">		}</span><br><span class="line">		cout &lt;&lt; endl;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> result / size;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; vv2D{<span class="number">8</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">12</span>,<span class="number">3</span>) }; <span class="comment">//8个vector，每个包含12个3</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">average2DV</span>(vv2D);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h1 id="c语言的移位问题">C语言的移位问题</h1>
<p>问题一：右移操作：无法区分是逻辑右移还是算术右移。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	</span><br><span class="line">	<span class="type">char</span> a1 = <span class="number">0x63</span>;       <span class="comment">// 0110 0011</span></span><br><span class="line">	a1 = (a1 &lt;&lt; <span class="number">4</span>);        <span class="comment">// 0011 0000</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"0x%x\n"</span>, a1);  <span class="comment">//左移操作，末位补0</span></span><br><span class="line"></span><br><span class="line">	a1 = <span class="number">0x63</span>;                <span class="comment">// 0110 0011</span></span><br><span class="line">	a1 = (a1 &gt;&gt; <span class="number">4</span>);        <span class="comment">//  0000 0110 逻辑右移</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"0x%x\n"</span>, a1);  <span class="comment">// 逻辑右移自动补0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="type">char</span> a2 = <span class="number">0x95</span>;       <span class="comment">// 1001 0101</span></span><br><span class="line">	a2 = (a2 &lt;&lt; <span class="number">4</span>);        <span class="comment">// 0101 0000</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"0x%x\n"</span>, a2);  <span class="comment">//左移操作，末位补0</span></span><br><span class="line"></span><br><span class="line">	a2 = <span class="number">0x95</span>;                <span class="comment">// 1001 0101</span></span><br><span class="line">	a2 = (a2 &gt;&gt; <span class="number">4</span>);        <span class="comment">//  1111 1001 算术右移</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"0x%x\n"</span>, a2);   <span class="comment">//这里执行的是算数右移操作，补1了</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>  上面可以看到，C语言在执行右移操作时表现不同，而不同的编译器输出的结果可能都不一样，C语言并没有做统一标准。C语言官方的做法是在做右移操作时，把操作数都变为无符号的数，这样可以保证执行的是逻辑右移操作（补0）。原因是无符号数首位都是0，可以保证补位的数也是0。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">	</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> a3 = <span class="number">0x63</span>;       <span class="comment">// 0110 0011</span></span><br><span class="line">	a3 = (a3 &lt;&lt; <span class="number">4</span>);        <span class="comment">// 0011 0000</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"0x%x\n"</span>, a3);</span><br><span class="line"></span><br><span class="line">	a3 = <span class="number">0x63</span>;                <span class="comment">// 0110 0011</span></span><br><span class="line">	a3 = (a3 &gt;&gt; <span class="number">4</span>);        <span class="comment">//  0000 0110 逻辑右移</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"0x%x\n"</span>, a3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> a4 = <span class="number">0x95</span>;       <span class="comment">// 1001 0101</span></span><br><span class="line">	a4 = (a4 &lt;&lt; <span class="number">4</span>);        <span class="comment">// 0101 0000</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"0x%x\n"</span>, a4);</span><br><span class="line"></span><br><span class="line">	a4 = <span class="number">0x95</span>;                <span class="comment">// 1001 0101</span></span><br><span class="line">	a4 = (a4 &gt;&gt; <span class="number">4</span>);        <span class="comment">//  0000 1001 逻辑右移</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"0x%x\n"</span>, a4);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>  </p>
<p>  </p>
<p>问题二：移位操作位数的限制。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">//示例常见与权限控制，每一位代表不同的权限</span></span><br><span class="line">	<span class="comment">//0000 0000</span></span><br><span class="line">	<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> priv = <span class="number">0xFF</span>;  <span class="comment">//初始化权限</span></span><br><span class="line">	<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> P_BAKCUP = (<span class="number">1</span>&lt;&lt;<span class="number">7</span>);  <span class="comment">//备份权限</span></span><br><span class="line">	<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> P_ADMIN = (<span class="number">1</span>&lt;&lt;<span class="number">8</span>);   <span class="comment">//最高权限</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"0x%x\n"</span>, P_BAKCUP);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"0x%x\n"</span>, P_ADMIN);</span><br><span class="line">	<span class="keyword">if</span> (priv &amp; P_BAKCUP)</span><br><span class="line">	{</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"BAKUP"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">if</span> (priv &amp; P_ADMIN)</span><br><span class="line">	{</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"ADMIN"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p><img src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/c%E9%99%B7%E9%98%B12.png"></p>
<p>  由运行结果可以看到，char本身就只有8位，P_ADMIN的移位操作已经超过了8位，这时候所有的8位都被清零了。这是C语言编码常见错误，移位操作一定要注意操作位数上限，移位数大于0，小于位数；</p>
<p>  </p>
<p>  出现上面两个问题的原因就是，C语言设计移位操作时需要考虑操作数表示的上下文环境。C++为了对这个问题做改进，引入了bitset：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">// bitset</span></span><br><span class="line">	bitset&lt;10&gt; priv = <span class="number">0xFF</span>;  <span class="comment">//手动控制，这里就只有10位</span></span><br><span class="line">	bitset&lt;10&gt; P_BAKCUP = (<span class="number">1</span> &lt;&lt; <span class="number">6</span>);</span><br><span class="line">	bitset&lt;10&gt; P_ADMIN = (<span class="number">1</span> &lt;&lt; <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里可以直接输出</span></span><br><span class="line">	cout &lt;&lt; priv &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; P_BAKCUP &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; P_ADMIN &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> ((priv &amp; P_BAKCUP) == P_BAKCUP)</span><br><span class="line">	{</span><br><span class="line">		cout &lt;&lt; <span class="string">"BAKUP"</span> &lt;&lt; endl;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">if</span> ((priv &amp; P_ADMIN) == P_ADMIN)</span><br><span class="line">	{</span><br><span class="line">		cout &lt;&lt; <span class="string">"ADMIN"</span> &lt;&lt; endl;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p><img src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/c%E9%99%B7%E9%98%B13.png"></p>
<h1 id="c语言强制类型转换问题">C语言强制类型转换问题</h1>
<p>C语言中强制类型转换隐藏了很多bug和陷阱：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using  namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">	<span class="type">int</span> <span class="built_in">array</span>[] = { <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> };</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="built_in">array</span>) / <span class="keyword">sizeof</span>(<span class="built_in">array</span>[<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="type">int</span> threshold = <span class="number">-1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">sizeof</span>(<span class="built_in">array</span>) / <span class="keyword">sizeof</span>(<span class="built_in">array</span>[<span class="number">0</span>]) &gt; threshold)</span><br><span class="line">	{</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"positive number array"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	{</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"negative number array"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p><img src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/c%E9%99%B7%E9%98%B14.png"></p>
<p>  上面的代码当数组长度大于0时，需要输出“positive number
array”，否则输出“negative number
array”。可以通过编译运行后，长度输出为3是正确的，但判断逻辑里却输出了“negative
number array”。</p>
<p>  发生这个问题的原因是sizeof的返回值是unsigned
int,是无符号数，但threshold却是一个有符号数，在执行比较判断语句时，C语言的机制把threshold转换为了一个无符号数，然后才进行的比较。这里发生的是<strong>隐式类型转换</strong>。-1转换为unsigned
int时会变为4294967295，是个很大的正整数（这里涉及到了补码转换）。</p>
<p>  C语言在编写时，可以先用一个有符号的数把数据先取出来。今后编码时也需要注意，尽量避免用无符号的数据来进行数据比较：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using  namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">	<span class="type">int</span> <span class="built_in">array</span>[] = { <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> };</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="built_in">array</span>) / <span class="keyword">sizeof</span>(<span class="built_in">array</span>[<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="type">int</span> threshold = <span class="number">-1</span>;</span><br><span class="line">	<span class="type">int</span> len = <span class="keyword">sizeof</span>(<span class="built_in">array</span>) / <span class="keyword">sizeof</span>(<span class="built_in">array</span>[<span class="number">0</span>]);  <span class="comment">//用一个有符号的变量先把数据拿出来</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (len &gt; threshold)</span><br><span class="line">	{</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"positive number array"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	{</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"negative number array"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>  </p>
<p>  </p>
<p>类型转换还可能会发生在以下情况：假设要计算1+1/2+1/3+……+1/n，如果代码是这么写的：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1+1/2+1/3+1/4+... +1/n</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">{</span><br><span class="line">	<span class="type">double</span> result = <span class="number">0.0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n + <span class="number">1</span>; i++)</span><br><span class="line">	{</span><br><span class="line">		result += <span class="number">1</span> / i;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">	<span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; getSum(n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p><img src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/c%E9%99%B7%E9%98%B15.png"></p>
<p>可以看到，计算出的结果是1。这里的问题出在“result +=
1/n”这句中，被除数是整形，除数也是整形，那么计算结果也是整型值。result虽然会转换为浮点数，但整形计算中已经丢失了精度。</p>
<p>c语言中的一个解决方法是把被除数先转换为浮点数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1+1/2+1/3+1/4+... +1/n</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">{</span><br><span class="line">	<span class="type">double</span> result = <span class="number">0.0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n + <span class="number">1</span>; i++)</span><br><span class="line">	{</span><br><span class="line">		result += <span class="number">1.0</span> / i;  <span class="comment">//把被除数换成浮点数，那么结果会被转换为浮点数</span></span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">	<span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; getSum(n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>  </p>
<p>  </p>
<p>  上面两个例子可以看到，有时候我们会忽略C语言的隐式类型转换，导致出现程序bug；但有时候我们又需要这种隐式类型转换来得到我们想要的结果。c语言中滥用类型转换可能导致灾难性的后果，且很难排查。C语言之所以这么设计，是因为类型转换在底层语言中的运用非常广泛，且灵活方便。C++为了方便排查隐藏bug减少复杂性，提供了四种类型转换的方式：<strong>static_cast、const_cast、dynamic_cast、reinterpret_cast</strong>。</p>
<ul>
<li>static_cast：其实就是类似于C语言中的类型转换，C++提供了这么一种标准格式用于显示类型转换，可以方便程序员精准定位程序哪里使用了强制类型转换；</li>
<li>const_cast：只针对去除const属性；</li>
<li>dynamic_cast：用于类的继承关系转换，比如把子类转换为父类、或者父类转换为子类；</li>
<li>reinterpret_cast：用于指针的转换；</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1+1/2+1/3+1/4+... +1/n</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">getSum</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="type">double</span> result = <span class="number">0.0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n + <span class="number">1</span>; i++)</span><br><span class="line">	{</span><br><span class="line">		result += <span class="built_in">static_cast</span>&lt;<span class="type">double</span>&gt;(<span class="number">1</span>) / i;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">getSum</span>(n) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h1 id="c语言的整数溢出问题">C语言的整数溢出问题</h1>
<p>  32位系统中，一个整数占用4个字节，共32位。其中第一位是符号位，所以一共有31位可以表示整数范围。如果计算的时候，如果我们算出的数值超出了数据表示范围，那么会数据溢出变为负数。要注意C语言中的整数不能和数学上的整数划等号。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">	<span class="type">int</span> i = <span class="number">2147483640</span>;</span><br><span class="line">	<span class="keyword">for</span> (; i &gt; <span class="number">0</span>; i++)</span><br><span class="line">	{</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"adding "</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	}</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"exit "</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p><img src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/c%E9%99%B7%E9%98%B16.png"></p>
<p>  出现这个问题的原因和系统的设计是有关的。数据存储空间是有限的，不能无限增长。C语言的一个解决方案是通过字符串的方式来表达大数的运算，字符串理论上是可以无限长的，C语言是有这个类库的，但并没有直接的解决方案。
C++本身也没有提供好的解决方案，但boost库中提供了cpp_int方法：<a href="https://www.boost.org/">boost官网</a></p>
<p>  </p>
<h1 id="c语言字符串的典型缺陷">C语言字符串的典型缺陷</h1>
<p>  C标准字符和字符串的区别是：字符是单引号括起来的，字符串是双引号括起来的，由'\0'结尾。而'\0'作为结束符这个方式，表达能力有天生的缺陷：一旦字符串中间具有'\0'字符，那么c语言的字符串函数就会认为这个字符已经结束了。如果用c语言的方式存储一些图片或者其他二进制的内容，很容易出问题。</p>
<p><img src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/c%E9%99%B7%E9%98%B17.png"></p>
<p>  C语言的字符串操作还有另一个问题就是效率低下。C语言的字符处理函数都是通过遍历'\0'来寻找字符串结尾的，这个遍历操作会消耗性能。</p>
<p>  C语言设计这种字符串处理方式主要是为了节省空间，有针对性的设计问题。C++语言为了解决这个问题有以下几种思路：</p>
<ul>
<li>C++的string类</li>
<li>开源库<a href="https://github.com/redis">Redis</a>解决方案，<a href="https://redis.io/">redis官网</a></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	cout &lt;&lt; <span class="string">"Testing C++ String: "</span> &lt;&lt; endl;</span><br><span class="line">	string sstr1 = <span class="string">"string"</span>;</span><br><span class="line">	cout &lt;&lt; sstr1.<span class="built_in">length</span>() &lt;&lt; endl;  <span class="comment">//字符串内容的长度</span></span><br><span class="line">	cout &lt;&lt; sstr1.<span class="built_in">capacity</span>() &lt;&lt; endl; <span class="comment">//string的容量长度</span></span><br><span class="line">	cout &lt;&lt; <span class="built_in">sizeof</span>(sstr1) &lt;&lt; endl;  <span class="comment">//实际内存分配长度，不同平台的值可能不一致，但实际大小肯定会大于内容长度</span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">"sstr2: "</span> &lt;&lt; endl;</span><br><span class="line">	string sstr2 = <span class="string">"stri\0ng"</span>;</span><br><span class="line">	cout &lt;&lt; sstr2.<span class="built_in">length</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; sstr2.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">sizeof</span>(sstr2) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">"sstr1: "</span> &lt;&lt; endl;</span><br><span class="line">	sstr1 += sstr2;   <span class="comment">//字符串直接拼接</span></span><br><span class="line">	cout &lt;&lt; sstr1.<span class="built_in">length</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; sstr1.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">sizeof</span>(sstr1) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p><img src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/c%E9%99%B7%E9%98%B18.png"></p>
<p>  可以看到，string类的实现方案中，内部不仅记录了字符串的内容，还有几个变量记录了字符串内容的长度、容量等，在执行字符串操作时不需要遍历寻找'\0'，提高了效率；但是依旧保留了c风格字符串以'\0'结尾的传统，还具有一些缺陷。</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++基础</tag>
      </tags>
  </entry>
  <entry>
    <title>IO流基础</title>
    <url>/2025/C/C++/IO%E6%B5%81%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="io流">I/O流</h1>
<p>  传统的C语言中I/O处理有printf，scanf，getch，gets等函数，他们的问题是不可编程，仅仅能识别内置的数据类型，无法识别自定义的数据类型；而且代码移植性差，有很多坑。</p>
<p>  C++中有I/O流istream，ostream等处理方式，可编程，对于类库的设计者来说很有用；而且还能简化编程，使I/O的风格保持一致。</p>
<p><img src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/IO%E6%B5%811.png"></p>
<p><img src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/IO%E6%B5%812.png"></p>
<p> </p>
<h1 id="io缓存区">IO缓存区</h1>
<p>  计算机发展过程中，需要实现外部的设备可以用统一的标准和计算机程序进行交互。最早的UNIX系统是以文件的方式进行交互。这个思想发展到现在就是IO缓存区。因为外部设备和内存的速度是不一样的，缓存区的存在可以让我们的信息读取更加高效。</p>
<p><img src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/IO%E6%B5%813.png"></p>
<p>标准的IO提供三种类型的缓存模式：</p>
<ol type="1">
<li>按块缓存：如文件系统，一次性加载到内存中</li>
<li>按行缓存：以''区分行</li>
<li>不缓存</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; a)</span><br><span class="line">    {</span><br><span class="line">        cout &lt;&lt; <span class="string">"The numbers are:"</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">        index++;</span><br><span class="line">        <span class="keyword">if</span>(index == <span class="number">5</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    cin &gt;&gt; ch;</span><br><span class="line">    cout &lt;&lt; <span class="string">"the last char is:"</span> &lt;&lt; ch &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p><img src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/IO%E6%B5%814.png"></p>
<p>  上面代码一连输入6个int，内部接收完5个数字后循环结束，但可以看到6还是读入了，并且以char的形式输出，后面的ch还没来得及输入程序就退出了。这是程序中面临的一个问题，输入的6被暂存到缓冲区中成为了脏数据，在我们不之情的情况下把后面的输入给覆盖掉了。</p>
<p><img src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/IO%E6%B5%815.png"></p>
<p> </p>
<p>我们可以使用cin::ignore(int count,type
metadelim)方法来清空缓冲区，第一个参数是要清空多少缓冲区信息，第二个参数表达以什么符号作为结尾</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//清空缓冲区</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; a)</span><br><span class="line">    {</span><br><span class="line">        cout &lt;&lt; <span class="string">"The numbers are:"</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">        index++;</span><br><span class="line">        <span class="keyword">if</span>(index == <span class="number">5</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清空缓冲区脏数据</span></span><br><span class="line">    <span class="comment">//numeric_limits&lt;std::streamsize&gt;::max()表示缓冲区的最大范围</span></span><br><span class="line">    cin.<span class="built_in">ignore</span>(numeric_limits&lt;std::streamsize&gt;::<span class="built_in">max</span>(), <span class="string">'\n'</span>); </span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    cin &gt;&gt; ch;</span><br><span class="line">    cout &lt;&lt; <span class="string">"the last char is:"</span> &lt;&lt; ch &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++基础</tag>
      </tags>
  </entry>
  <entry>
    <title>STL基础</title>
    <url>/2025/C/C++/STL/</url>
    <content><![CDATA[<h1 id="stl标准模板库">STL标准模板库</h1>
<p>  STL全称Standard Template
Library，标准模板库。STL算法是泛型的(generic)，不与任何特定数据结构和对象绑定，不必再环境类似的情况下重写代码。STL算法可以量身定做，并且具有很高的效率。STL可以进行扩充，我们可以编写自己的组件并且能够与STL标准的组件进行很好的配合。</p>
<p>  STL标准库有六大组件：</p>
<ul>
<li>空间配置器：allocator；</li>
<li>容器：string、vector、list、deque、map、set、multimap、multiset；</li>
<li>适配器：stack、queue、priority_queue；</li>
<li>仿函数：greater、less等；</li>
<li>算法：find、swap、reverse、sort、merge等；</li>
<li>迭代器：iterator、const_iterator、reverse_iterator、const_reverse_iterator;</li>
</ul>
<p>  空间配置器帮助我们管理分配内存的事情，从而来给容器分配内存；容器存储数据；迭代器帮助算法处理容器中的数据；仿函数辅助算法实现。</p>
<p>  </p>
<h1 id="容器container">容器(container)</h1>
<p>STL容器的作用用于存放数据，STL容器分为两大类：</p>
<ul>
<li>序列式容器：其中的元素都是可排序的，STL提供了vector、list、deque等序列式容器，而stack、queue、priority_queue则是容器适配器；</li>
<li>关联式容器：每个数据元素都是由一个键(key)和值(value)组成，当元素被插入到容器时，按照其键以某种特定规则放入适当位置，key必须是唯一的；常见的STL关联容器有set、multiset、map、multimap；</li>
</ul>
<h2 id="序列型容器的基本使用">序列型容器的基本使用</h2>
<ul>
<li>vector：数组</li>
<li>list：双向链表</li>
<li>deque：双端队列</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体中重载了函数调用运算符operator()，可以让其像函数一样被调用</span></span><br><span class="line"><span class="comment">//常用于STL算法中的回调</span></span><br><span class="line"><span class="comment">//这样写可以让函数以一个类对象的形式被调用</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Display</span></span><br><span class="line">{</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> i)</span>  </span></span><br><span class="line"><span class="function">	</span>{</span><br><span class="line">		cout &lt;&lt; i &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">	}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="type">int</span> iArr[] = { <span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> };</span><br><span class="line"></span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">iVector</span><span class="params">(iArr, iArr + <span class="number">4</span>)</span></span>;  <span class="comment">//传递首地址和尾地址，用一个数组初始化vector</span></span><br><span class="line">	<span class="function">list&lt;<span class="type">int</span>&gt; <span class="title">iList</span><span class="params">(iArr, iArr + <span class="number">4</span>)</span></span>;</span><br><span class="line">	<span class="function">deque&lt;<span class="type">int</span>&gt; <span class="title">iDeque</span><span class="params">(iArr, iArr + <span class="number">4</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//下面三个是容器适配器，不是容器</span></span><br><span class="line">	<span class="function">queue&lt;<span class="type">int</span>&gt; <span class="title">iQueue</span><span class="params">(iDeque)</span></span>;     <span class="comment">// 队列 先进先出</span></span><br><span class="line">	<span class="function">stack&lt;<span class="type">int</span>&gt; <span class="title">iStack</span><span class="params">(iDeque)</span></span>;         <span class="comment">// 栈 先进后出</span></span><br><span class="line">	<span class="function">priority_queue&lt;<span class="type">int</span>&gt; <span class="title">iPQueue</span><span class="params">(iArr, iArr + <span class="number">4</span>)</span></span>;  <span class="comment">// 优先队列，按优先权，默认从大到小</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//序列型容器的遍历</span></span><br><span class="line">	<span class="comment">//for_each:遍历，传递首尾和一个函数，对于遍历的每一个元素都调用一次函数</span></span><br><span class="line">	for_each( iVector.<span class="built_in">begin</span>(), iVector.<span class="built_in">end</span>(), <span class="built_in">Display</span>() );</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	for_each(iList.<span class="built_in">begin</span>(), iList.<span class="built_in">end</span>(), <span class="built_in">Display</span>());</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	for_each(iDeque.<span class="built_in">begin</span>(), iDeque.<span class="built_in">end</span>(), <span class="built_in">Display</span>());</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//容器适配器的遍历：</span></span><br><span class="line">	<span class="keyword">while</span> ( !iQueue.<span class="built_in">empty</span>() )</span><br><span class="line">	{</span><br><span class="line">		cout &lt;&lt; iQueue.<span class="built_in">front</span>() &lt;&lt; <span class="string">" "</span>;  <span class="comment">//输出队首 1 2 3 4</span></span><br><span class="line">		iQueue.<span class="built_in">pop</span>();  <span class="comment">//弹出队首</span></span><br><span class="line">	}</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (!iStack.<span class="built_in">empty</span>())</span><br><span class="line">	{</span><br><span class="line">		cout &lt;&lt; iStack.<span class="built_in">top</span>() &lt;&lt; <span class="string">" "</span>;    <span class="comment">// 输出栈顶 4 3 2 1</span></span><br><span class="line">		iStack.<span class="built_in">pop</span>();  <span class="comment">//弹出栈顶</span></span><br><span class="line">	}</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (!iPQueue.<span class="built_in">empty</span>())</span><br><span class="line">	{</span><br><span class="line">		cout &lt;&lt; iPQueue.<span class="built_in">top</span>() &lt;&lt; <span class="string">" "</span>; <span class="comment">// 不设置的话默认从大到小4 3 2 1</span></span><br><span class="line">		iPQueue.<span class="built_in">pop</span>();</span><br><span class="line">	}</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> </p>
<h2 id="关联式容器的基本使用">关联式容器的基本使用</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Display</span></span><br><span class="line">{</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(pair&lt;string, <span class="type">double</span>&gt; info)</span></span></span><br><span class="line"><span class="function">	</span>{</span><br><span class="line">		cout &lt;&lt; info.first &lt;&lt; <span class="string">": "</span> &lt;&lt; info.second &lt;&lt; endl;</span><br><span class="line">	}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cmpMap</span></span><br><span class="line">{</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(pair&lt;string, <span class="type">double</span>&gt; a, pair&lt;string, <span class="type">double</span>&gt; b)</span></span></span><br><span class="line"><span class="function">	</span>{</span><br><span class="line">		<span class="keyword">return</span> a.first.<span class="built_in">length</span>() &lt; b.first.<span class="built_in">length</span>();</span><br><span class="line">	}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	map&lt;string, <span class="type">double</span>&gt; studentSocres;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//map可以用类似数组的方式来添加</span></span><br><span class="line">	studentSocres[<span class="string">"LiMing"</span>] = <span class="number">95.0</span>;</span><br><span class="line">	studentSocres[<span class="string">"LiHong"</span>] = <span class="number">98.5</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//map也可以用pair来添加</span></span><br><span class="line">	studentSocres.<span class="built_in">insert</span>( <span class="built_in">pair</span>&lt;string, <span class="type">double</span>&gt;(<span class="string">"zhangsan"</span>, <span class="number">100.0</span>) );</span><br><span class="line">	studentSocres.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string, <span class="type">double</span>&gt;(<span class="string">"Lisi"</span>, <span class="number">98.6</span>));</span><br><span class="line">	studentSocres.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string, <span class="type">double</span>&gt;(<span class="string">"wangwu"</span>, <span class="number">94.5</span>));</span><br><span class="line">	studentSocres.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string, <span class="type">double</span>&gt;(<span class="string">"wangwu"</span>, <span class="number">96.5</span>)); <span class="comment">//这是失败的操作，因为key值重复了</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//map还可以用value_type来添加，是泛型编程的方式</span></span><br><span class="line">	studentSocres.<span class="built_in">insert</span>(map&lt;string, <span class="type">double</span>&gt;::<span class="built_in">value_type</span>(<span class="string">"zhaoliu"</span>, <span class="number">95.5</span>) );</span><br><span class="line">	studentSocres[<span class="string">"wangwu"</span>] = <span class="number">88.5</span>;  <span class="comment">//想修改已经存在的key值的操作，要用这个方式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// map用for_each遍历</span></span><br><span class="line">	for_each(studentSocres.<span class="built_in">begin</span>(), studentSocres.<span class="built_in">end</span>(), <span class="built_in">Display</span>());</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// map用find查找，查找结果会返回一个迭代器</span></span><br><span class="line">	map&lt;string, <span class="type">double</span>&gt;::iterator iter;</span><br><span class="line">	iter = studentSocres.<span class="built_in">find</span>(<span class="string">"zhaoliu"</span>);</span><br><span class="line">	<span class="keyword">if</span> (iter != studentSocres.<span class="built_in">end</span>())</span><br><span class="line">	{</span><br><span class="line">		cout &lt;&lt; <span class="string">"Found the score is: "</span> &lt;&lt; iter-&gt;second &lt;&lt; endl;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	{</span><br><span class="line">		cout &lt;&lt; <span class="string">"Didn't find the key."</span> &lt;&lt; endl;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 使用迭代器完成遍历查找的过程</span></span><br><span class="line">	iter = studentSocres.<span class="built_in">begin</span>();</span><br><span class="line">	<span class="keyword">while</span> (iter != studentSocres.<span class="built_in">end</span>())</span><br><span class="line">	{</span><br><span class="line">		<span class="keyword">if</span> (iter-&gt;second &lt; <span class="number">98.0</span>)  <span class="comment">// 去除不是优秀的同学</span></span><br><span class="line">		{</span><br><span class="line">			studentSocres.<span class="built_in">erase</span>(iter++);  <span class="comment">// 注意：迭代器失效问题</span></span><br><span class="line">			<span class="comment">// erase后，当前传递的迭代器参数就失效了，所以必须要++指向后一个元素</span></span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		{</span><br><span class="line">			iter++;</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	for_each(studentSocres.<span class="built_in">begin</span>(), studentSocres.<span class="built_in">end</span>(), <span class="built_in">Display</span>());</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (iter = studentSocres.<span class="built_in">begin</span>(); iter != studentSocres.<span class="built_in">end</span>(); iter++)</span><br><span class="line">	{</span><br><span class="line">		<span class="keyword">if</span> (iter-&gt;second &lt;= <span class="number">98.5</span>)</span><br><span class="line">		{</span><br><span class="line">			iter = studentSocres.<span class="built_in">erase</span>(iter);  <span class="comment">// 注意：迭代器失效问题</span></span><br><span class="line">			<span class="comment">// erase的返回值指向迭代器的下一个元素，如果不想在参数里做iter++，就把返回值获取下</span></span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	for_each(studentSocres.<span class="built_in">begin</span>(), studentSocres.<span class="built_in">end</span>(), <span class="built_in">Display</span>());</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// find得到并删除元素</span></span><br><span class="line">	iter = studentSocres.<span class="built_in">find</span>(<span class="string">"LiHong"</span>);</span><br><span class="line">	studentSocres.<span class="built_in">erase</span>(iter);  <span class="comment">//这里最好做个判空操作</span></span><br><span class="line">	for_each(studentSocres.<span class="built_in">begin</span>(), studentSocres.<span class="built_in">end</span>(), <span class="built_in">Display</span>());</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> n = studentSocres.<span class="built_in">erase</span>(<span class="string">"LiHong1"</span>); <span class="comment">//返回的是去除元素的计数值，不为零就是成功</span></span><br><span class="line">	cout &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">	for_each(studentSocres.<span class="built_in">begin</span>(), studentSocres.<span class="built_in">end</span>(), <span class="built_in">Display</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 一次性清空所有元素</span></span><br><span class="line">	studentSocres.<span class="built_in">erase</span>(studentSocres.<span class="built_in">begin</span>(), studentSocres.<span class="built_in">end</span>());</span><br><span class="line">	for_each(studentSocres.<span class="built_in">begin</span>(), studentSocres.<span class="built_in">end</span>(), <span class="built_in">Display</span>());</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p> </p>
<h1 id="仿函数functor">仿函数(functor)</h1>
<p>  仿函数一般不会单独使用，主要是为了搭配STL算法。STL主要是为了提高代码的复用性，早期C++为了提高复用性一般使用函数指针，但是函数指针不能满足STL对抽象性的要求，不能满足软件积木的要求，无法和其他STL组件搭配。仿函数的本质就是一个重载了operator()的类，创建一个行为类似函数的对象。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不同方式实现对数组元素的排序</span></span><br><span class="line"><span class="comment">// sort是C++中的一个排序算法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//C++函数</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">MySort</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="keyword">return</span> a &lt; b;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Display</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	cout &lt;&lt; a &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型编程</span></span><br><span class="line"><span class="comment">// 定义为const&amp;是为了优化，如果将来传递进来的是个对象，只需要传引用即可</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">MySortT</span><span class="params">(T <span class="type">const</span>&amp; a, T <span class="type">const</span>&amp; b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="keyword">return</span> a &lt; b;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">DisplayT</span><span class="params">(T <span class="type">const</span>&amp; a)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	cout &lt;&lt; a &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 仿函数</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SortF</span></span><br><span class="line">{</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function">	</span>{</span><br><span class="line">		<span class="keyword">return</span> a &lt; b;</span><br><span class="line">	}</span><br><span class="line">};</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DisplayF</span></span><br><span class="line">{</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function">	</span>{</span><br><span class="line">		cout &lt;&lt; a &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">	}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">// C++仿函数模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SortTF</span></span><br><span class="line">{</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(T <span class="type">const</span>&amp; a, T <span class="type">const</span>&amp; b)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">	</span>{</span><br><span class="line">		<span class="keyword">return</span> a &lt; b;</span><br><span class="line">	}</span><br><span class="line">};</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DisplayTF</span></span><br><span class="line">{</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(T <span class="type">const</span>&amp; a)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">	</span>{</span><br><span class="line">		cout &lt;&lt; a &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">	}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="comment">// C++方式</span></span><br><span class="line">	<span class="comment">// 缺点是不通用，不同的数据类型要写不同的MySort函数</span></span><br><span class="line">	<span class="type">int</span> arr[] = { <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">7</span> };</span><br><span class="line">	<span class="built_in">sort</span>(arr, arr + <span class="number">5</span>, MySort); <span class="comment">//传递排序函数</span></span><br><span class="line">	for_each(arr, arr + <span class="number">5</span>, Display);</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// C++泛型</span></span><br><span class="line">	<span class="type">int</span> arr2[] = { <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">7</span> };</span><br><span class="line">	<span class="built_in">sort</span>(arr2, arr2 + <span class="number">5</span>, MySortT&lt;<span class="type">int</span>&gt;);</span><br><span class="line">	for_each(arr2, arr2 + <span class="number">5</span>, DisplayT&lt;<span class="type">int</span>&gt;);</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// C++仿函数</span></span><br><span class="line">	<span class="type">int</span> arr3[] = { <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">7</span> };</span><br><span class="line">	<span class="built_in">sort</span>(arr3, arr3 + <span class="number">5</span>, <span class="built_in">SortTF</span>&lt;<span class="type">int</span>&gt;() );</span><br><span class="line">	for_each(arr3, arr3 + <span class="number">5</span>, <span class="built_in">DisplayTF</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// C++仿函数模板</span></span><br><span class="line">	<span class="type">int</span> arr4[] = { <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">7</span> };</span><br><span class="line">	<span class="built_in">sort</span>(arr4, arr4 + <span class="number">5</span>, <span class="built_in">SortF</span>());</span><br><span class="line">	for_each(arr4, arr4 + <span class="number">5</span>, <span class="built_in">DisplayF</span>());</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p> </p>
<h1 id="算法algorithm">算法(algorithm)</h1>
<p>STL中算法大致分为4类，包含<algorithm>、<numeric>、<functional>。</functional></numeric></algorithm></p>
<ol type="1">
<li>非可变序列算法：不直接修改其操作的容器内容的算法；</li>
<li>可变序列算法：可以修改它们操作容器内容的算法；</li>
<li>排序算法：包括对序列进行排序和合并的算法、搜索算法以及有序序列上的集合算法；</li>
<li>数值算法：对容器内容进行数值计算；</li>
</ol>
<p>  最常见的算法包括查找、排序和通用算法，排列组合算法、数值算法、集合算法等。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{   </span><br><span class="line">	<span class="comment">// transform和lambda表达式</span></span><br><span class="line">	<span class="comment">// transform是数值算法函数，有多个重载</span></span><br><span class="line">	<span class="comment">// 主要参数就是传递入容器的范围和范围内元素需要执行的函数。</span></span><br><span class="line">	<span class="type">int</span> ones[] = { <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> };</span><br><span class="line">	<span class="type">int</span> twos[] = { <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span> };</span><br><span class="line">	<span class="type">int</span> results[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">	<span class="comment">//参数：第一个容器起始、第一个容器结尾，第二个容器(范围不能小于第一个容器)</span></span><br><span class="line">	<span class="comment">//resulte用于接收结果，要保证空间足够</span></span><br><span class="line">	<span class="comment">//std::plus是STL中的模板类仿函数方法，</span></span><br><span class="line">	<span class="built_in">transform</span>(ones, ones + <span class="number">5</span>, twos, results, std::<span class="built_in">plus</span>&lt;<span class="type">int</span>&gt;()); </span><br><span class="line">	for_each(results, results + <span class="number">5</span>,</span><br><span class="line">		[ ](<span class="type">int</span> a)-&gt;<span class="type">void</span> {</span><br><span class="line">		cout &lt;&lt; a &lt;&lt; endl; } ); <span class="comment">// lambda表达式（匿名函数）</span></span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// find 查找算法</span></span><br><span class="line">	<span class="type">int</span> arr[] = { <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">8</span> };</span><br><span class="line">	<span class="type">int</span> len = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="built_in">count</span>(arr, arr + len, <span class="number">6</span>) &lt;&lt; endl; <span class="comment">// 统计“6”这个元素的个数，输入容器范围和元素</span></span><br><span class="line">	cout &lt;&lt; <span class="built_in">count_if</span>(arr, arr + len, <span class="built_in">bind2nd</span>(<span class="built_in">less</span>&lt;<span class="type">int</span>&gt;(),  <span class="number">7</span>) ) &lt;&lt; endl; <span class="comment">// 统计&lt;7的个数</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">bind2nd是模板方法，输入一个函数和一个变量，函数调用这个变量</span></span><br><span class="line"><span class="comment">bind2nd和bind1st是对应的方法，bind1st的入参是运算左边的数，bind2nd的入参是运算右边的数</span></span><br><span class="line"><span class="comment">比如bind2nd(less&lt;int&gt;(),  7)，7是右边的数，意思是“?&lt;7”,有几个比7小的数</span></span><br><span class="line"><span class="comment">bind1st(less&lt;int&gt;(),  7)，7是左边的数，意思是“7&lt;？”,7比几个数小，也就是有几个数比7大</span></span><br><span class="line"><span class="comment">当然也可以把less&lt;int&gt;()换成greater&lt;int&gt;(),一个是小，一个是大</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">	cout &lt;&lt; <span class="built_in">binary_search</span>(arr, arr + len, <span class="number">9</span>) &lt;&lt; endl;   <span class="comment">// 二分查找，找元素"9",返回是否找到</span></span><br><span class="line"></span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">iA</span><span class="params">(arr + <span class="number">2</span>, arr + <span class="number">6</span>)</span></span>;   <span class="comment">// {2,3,3,4}，创建一个子序列</span></span><br><span class="line">	cout &lt;&lt; *<span class="built_in">search</span>(arr, arr + len, iA.<span class="built_in">begin</span>(), iA.<span class="built_in">end</span>()) &lt;&lt; endl; <span class="comment">// 查找子序列，返回的是地址位置</span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> </p>
<h1 id="迭代器">迭代器</h1>
<p>  迭代器是一种智能指针，用于访问顺序容器和关联容器中的元素，相当于容器和操纵容器的算法之间的中介。迭代器可以分为四种：</p>
<ol type="1">
<li>正向迭代器：iterator</li>
<li>常量正向迭代器：const_iterator，常量指向的是元素，表示迭代器指向的元素不允许修改</li>
<li>反向迭代器：reverse_iterator</li>
<li>常量反向迭代器：const_reverse_iterator</li>
</ol>
<p> </p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">容器</th>
<th style="text-align: left;">迭代器功能</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">vector</td>
<td style="text-align: left;">随机访问</td>
</tr>
<tr class="even">
<td style="text-align: left;">deque</td>
<td style="text-align: left;">随机访问</td>
</tr>
<tr class="odd">
<td style="text-align: left;">list</td>
<td style="text-align: left;">双向访问</td>
</tr>
<tr class="even">
<td style="text-align: left;">set</td>
<td style="text-align: left;">双向访问</td>
</tr>
<tr class="odd">
<td style="text-align: left;">map</td>
<td style="text-align: left;">双向访问</td>
</tr>
<tr class="even">
<td style="text-align: left;">stack</td>
<td style="text-align: left;">不支持迭代器</td>
</tr>
<tr class="odd">
<td style="text-align: left;">queue</td>
<td style="text-align: left;">不支持迭代器</td>
</tr>
<tr class="even">
<td style="text-align: left;">priority_queue</td>
<td style="text-align: left;">不支持迭代器</td>
</tr>
</tbody>
</table>
<p> </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	list&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">3</span>);  <span class="comment">//尾插入</span></span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line">	v.<span class="built_in">push_front</span>(<span class="number">2</span>);  <span class="comment">//头插入</span></span><br><span class="line">	v.<span class="built_in">push_front</span>(<span class="number">1</span>);  <span class="comment">// 1, 2, 3, 4</span></span><br><span class="line"></span><br><span class="line">	list&lt;<span class="type">int</span>&gt;::const_iterator it;</span><br><span class="line">	<span class="keyword">for</span> (it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++)</span><br><span class="line">	{</span><br><span class="line">		<span class="comment">//*it += 1;  //常量迭代器，不允许我们修改指向的元素，这个违法操作</span></span><br><span class="line">		cout &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">	}</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 注意：迭代器不支持&lt;操作</span></span><br><span class="line">	<span class="comment">//for (it = v.begin(); it &lt; v.end(); it++) </span></span><br><span class="line">	<span class="comment">//{</span></span><br><span class="line">	<span class="comment">//	cout &lt;&lt; *it &lt;&lt; " ";</span></span><br><span class="line">	<span class="comment">//}</span></span><br><span class="line">	cout &lt;&lt; v.<span class="built_in">front</span>() &lt;&lt; endl;</span><br><span class="line">	v.<span class="built_in">pop_front</span>();  <span class="comment">// 从顶部去除</span></span><br><span class="line"></span><br><span class="line">	list&lt;<span class="type">int</span>&gt;::reverse_iterator it2;</span><br><span class="line">	<span class="keyword">for</span> (it2 = v.<span class="built_in">rbegin</span>(); it2 != v.<span class="built_in">rend</span>(); it2++)</span><br><span class="line">	{</span><br><span class="line">		*it2 += <span class="number">1</span>;  <span class="comment">//非常量迭代器，允许修改元素</span></span><br><span class="line">		cout &lt;&lt; *it2 &lt;&lt; <span class="string">" "</span>;                          <span class="comment">// 5 4 3</span></span><br><span class="line">	}</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p> </p>
<h1 id="容器适配器adapter">容器适配器(adapter)</h1>
<p>STL有三个容器适配器，注意不要和容器搞混：</p>
<ul>
<li>stack
堆栈：一种“先进后出”的容器适配器，底层数据结构使用的是deque;</li>
<li>queue
队列：一种“先进先出”的容器适配器，底层数据结构使用的是deque;</li>
<li>priority_queue
优先队列：一种特殊的队列，它能够在队列中进行排序（堆排序），底层实现结构是vector或者deque，不同编译器实现不同;</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="comment">//stack&lt;int&gt; s;</span></span><br><span class="line">	<span class="comment">//queue&lt;int&gt; q;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	priority_queue&lt;<span class="type">int</span>&gt; pq;  <span class="comment">// 默认是最大值优先</span></span><br><span class="line">	priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, less&lt;<span class="type">int</span>&gt; &gt; pq2; <span class="comment">//   最大值优先</span></span><br><span class="line">	priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt; &gt; pq3; <span class="comment">// 最小值优先</span></span><br><span class="line"></span><br><span class="line">	pq.<span class="built_in">push</span>(<span class="number">2</span>);</span><br><span class="line">	pq.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">	pq.<span class="built_in">push</span>(<span class="number">3</span>);</span><br><span class="line">	pq.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">while</span> (!pq.<span class="built_in">empty</span>())</span><br><span class="line">	{</span><br><span class="line">		<span class="type">int</span> top = pq.<span class="built_in">top</span>();  <span class="comment">//获取队列头部信息</span></span><br><span class="line">		cout &lt;&lt; <span class="string">" top is: "</span> &lt;&lt; top&lt;&lt; endl;</span><br><span class="line">		pq.<span class="built_in">pop</span>();  <span class="comment">//弹出队列</span></span><br><span class="line">	}</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	pq2.<span class="built_in">push</span>(<span class="number">2</span>);</span><br><span class="line">	pq2.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">	pq2.<span class="built_in">push</span>(<span class="number">3</span>);</span><br><span class="line">	pq2.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">while</span> (!pq2.<span class="built_in">empty</span>())</span><br><span class="line">	{</span><br><span class="line">		<span class="type">int</span> top = pq2.<span class="built_in">top</span>();</span><br><span class="line">		cout &lt;&lt; <span class="string">" top is: "</span> &lt;&lt; top &lt;&lt; endl;</span><br><span class="line">		pq2.<span class="built_in">pop</span>();</span><br><span class="line">	}</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	pq3.<span class="built_in">push</span>(<span class="number">2</span>);</span><br><span class="line">	pq3.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">	pq3.<span class="built_in">push</span>(<span class="number">3</span>);</span><br><span class="line">	pq3.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">while</span> (!pq3.<span class="built_in">empty</span>())</span><br><span class="line">	{</span><br><span class="line">		<span class="type">int</span> top = pq3.<span class="built_in">top</span>();</span><br><span class="line">		cout &lt;&lt; <span class="string">" top is: "</span> &lt;&lt; top &lt;&lt; endl;</span><br><span class="line">		pq3.<span class="built_in">pop</span>();</span><br><span class="line">	}</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p> </p>
<h1 id="空间配置器allocator">空间配置器(allocator)</h1>
<p>  从使用的角度看，空间配置器隐藏在STL组件当中，为容器默默的工作，不需要使用者关心，但是从理解STL实现的角度看，它是需要首先分析的组件。allocator的分析可以体现C++在性能和资源管理上的优化思想。allocator被叫做空间配置器而不是内存配置器，是因为它不仅仅可以在内存上分配空间，甚至可以直接在硬盘上分配一块空间。</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++进阶</tag>
      </tags>
  </entry>
  <entry>
    <title>内存调试初步</title>
    <url>/2025/C/C++/%E5%86%85%E5%AD%98%E8%B0%83%E8%AF%95%E5%88%9D%E6%AD%A5/</url>
    <content><![CDATA[<h1 id="汇编语言">汇编语言</h1>
<p>  用汇编语言翻译机器语言，对人类更友好。要理解汇编语言，需要知道寄存器、基本指令、中断等基础知识。由于汇编语言偏向底层，所以不同的系统上汇编语言是不一样的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 用汇编语言实现对话框弹出helloworld</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">extern MessageBoxA  // 引入MessageBox</span><br><span class="line"></span><br><span class="line">//代码段</span><br><span class="line">section .text    </span><br><span class="line">golbal main</span><br><span class="line"></span><br><span class="line">main:</span><br><span class="line">    push dword 0</span><br><span class="line">    push dword title</span><br><span class="line">    push dword text</span><br><span class="line">    push dword 0       // 传递四个参数</span><br><span class="line">    call MessageBoxA   //调用MessageBoxA</span><br><span class="line">    ret     //返回</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//数据段</span><br><span class="line">section .data    </span><br><span class="line">text:   db 'Hello World',0</span><br><span class="line">title:  db 'MessageBox',0</span><br></pre></td></tr></table></figure>
<h2 id="常见寄存器">常见寄存器</h2>
<ul>
<li>通用寄存器：
<ul>
<li>数据寄存器：EAX、EBX、ECX、EDX</li>
<li>变址寄存器：ESI、EDI</li>
<li>指针寄存器：ESP、EBP</li>
</ul></li>
<li>段寄存器：CS、DS、ES、SS、GS</li>
<li>指令寄存器：EIP</li>
<li>标志寄存器：CF、PF、AF、ZF、SF、OF</li>
</ul>
<h2 id="常见基本语句">常见基本语句</h2>
<ul>
<li>基本运算：INC(加法)、ADD(加法)、DEC(减法)、SUB(减法)、mul(乘法)、div(除法)</li>
<li>循环、跳转：loop(循环)、call(函数调用)、jmp(跳转)、ret(返回)</li>
<li>数据移动：mov、lea</li>
<li>栈操作：PUSH、POP</li>
<li>逻辑运算：AND、OR、XOR(异或)、NOT</li>
<li>比较运算：cmp、test</li>
</ul>
<h2 id="中断">中断</h2>
<p>  汇编语言需要和底层打交道，这里就需要有中断机制</p>
<ul>
<li>内中断：和CPU直接交互</li>
<li>int指令</li>
<li>端口：对应硬件设备的交互</li>
<li>外中断：来自外设的中断</li>
</ul>
<p>  </p>
<h1 id="从汇编看函数栈">从汇编看函数栈</h1>
<p>  在编程语言中函数是以栈结构来设计的，先调用的函数后返回。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">firstCall</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> z = x + y;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">firstCall</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="main函数栈">main函数栈</h2>
<p><img src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/%E4%BB%8E%E6%B1%87%E7%BC%96%E7%9C%8B%E5%87%BD%E6%95%B0%E6%A0%88.png"></p>
<p><img src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/%E5%87%BD%E6%95%B0%E6%A0%881.png"></p>
<p>栈是由高地址向低地址生长的，所以每次push操作都会使ESP的值减小，相反每次POP操作都会使ESP增大；</p>
<p><img src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/%E5%87%BD%E6%95%B0%E6%A0%882.png"></p>
<p><img src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/%E5%87%BD%E6%95%B0%E6%A0%883.png"></p>
<p><img src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/%E5%87%BD%E6%95%B0%E6%A0%884.png"></p>
<p><img src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/%E5%87%BD%E6%95%B0%E6%A0%885.png"></p>
<p> </p>
<h2 id="main函数执行流程">main函数执行流程</h2>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++进阶</tag>
      </tags>
  </entry>
  <entry>
    <title>避免头文件重复包含</title>
    <url>/2025/C/C++/%E5%A4%B4%E6%96%87%E4%BB%B6%E9%87%8D%E5%A4%8D%E5%8C%85%E5%90%AB/</url>
    <content><![CDATA[<p>  为了避免一个文件被多次include，有两种方式：</p>
<ul>
<li>使用宏来防止同一个文件被多次包含
<ul>
<li>优点：可移植性好</li>
<li>缺点：无法防止宏名重复，难以排错</li>
</ul></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _SOMEFILE_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _SOMEFILE_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>  </p>
<ul>
<li>使用编译器来防止同一个文件被多次包含
<ul>
<li>优点：可以防止宏名重复，易排错</li>
<li>缺点：可移植性不好，windows支持，其他平台未必</li>
</ul></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux_CPP</title>
    <url>/2025/C/C++/Linux_C++/</url>
    <content><![CDATA[<h1 id="linux开发环境搭建">Linux开发环境搭建</h1>
<h2 id="gccg的安装">gcc、g++的安装</h2>
<p>gcc和g++是GUN的C&amp;C++编译器，这两个本质上区别不大，gcc默认下使用C编译器，g++默认使用C++编译器。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install</span> gcc</span><br><span class="line"></span><br><span class="line">yum <span class="keyword">install</span> gcc-c++</span><br></pre></td></tr></table></figure>
<h2 id="编译流程">编译流程</h2>
<ul>
<li>源文件生存可执行程序：</li>
</ul>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">&gt;<span class="symbol">$</span> g++ helloworld.cpp -o helloworld</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果用gcc编译器，不会包含标准库信息，需要在命令行中包含</span></span><br><span class="line">&gt;<span class="symbol">$</span> gcc -lstdc++ helloworld.cpp -o helloworld</span><br><span class="line"></span><br><span class="line"><span class="comment">//-wall可以看到警告信息</span></span><br><span class="line">&gt;<span class="symbol">$</span> g++ -Wall helloworld.cpp -o helloworld</span><br></pre></td></tr></table></figure>
<p> </p>
<p>GCC命令的编译选项：</p>
<table>
<colgroup>
<col style="width: 50%">
<col style="width: 50%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">参数</th>
<th style="text-align: left;">解释</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">-ansi</td>
<td style="text-align: left;">只支持ANSI标准的C语法。这一选项将进制GNU
C的某些特色，例如asm或者typeof关键字</td>
</tr>
<tr class="even">
<td style="text-align: left;">-S</td>
<td style="text-align: left;">只激活预处理和编译，就是指把文件编译成为汇编代码</td>
</tr>
<tr class="odd">
<td style="text-align: left;">-c</td>
<td style="text-align: left;">只编译并生成目标文件</td>
</tr>
<tr class="even">
<td style="text-align: left;">-g</td>
<td style="text-align: left;">生成调试信息。GNU调试器可利用该信息</td>
</tr>
<tr class="odd">
<td style="text-align: left;">-o FILENAME</td>
<td style="text-align: left;">生成指定的输出文件。用在生成可执行文件时</td>
</tr>
<tr class="even">
<td style="text-align: left;">-O0</td>
<td style="text-align: left;">不进行优化处理</td>
</tr>
<tr class="odd">
<td style="text-align: left;">-O或-O1</td>
<td style="text-align: left;">优化生成代码</td>
</tr>
<tr class="even">
<td style="text-align: left;">-O2或-O3</td>
<td style="text-align: left;">进一步优化</td>
</tr>
<tr class="odd">
<td style="text-align: left;">-shared</td>
<td style="text-align: left;">生成共享目标文件。通常用在建立共享库时</td>
</tr>
<tr class="even">
<td style="text-align: left;">-static</td>
<td style="text-align: left;">禁止使用共享连接</td>
</tr>
<tr class="odd">
<td style="text-align: left;">-w</td>
<td style="text-align: left;">不生成任何警告信息</td>
</tr>
<tr class="even">
<td style="text-align: left;">-Wall</td>
<td style="text-align: left;">生成所有警告信息</td>
</tr>
<tr class="odd">
<td style="text-align: left;">-IDIRECTORY</td>
<td style="text-align: left;">指定额外的头文件搜索路径DIRECTORY</td>
</tr>
<tr class="even">
<td style="text-align: left;">-LDIRECTORY</td>
<td style="text-align: left;">指定额外的函数库搜索路径DIRECTORY</td>
</tr>
<tr class="odd">
<td style="text-align: left;">-ILIBRARY</td>
<td style="text-align: left;">链接时搜索指定的函数库LIBRARY</td>
</tr>
<tr class="even">
<td style="text-align: left;">-m486</td>
<td style="text-align: left;">针对486进行代码优化</td>
</tr>
<tr class="odd">
<td style="text-align: left;">-E</td>
<td style="text-align: left;">只运行C预编译器</td>
</tr>
</tbody>
</table>
<p> </p>
<h1 id="make和makefile">make和Makefile</h1>
<p>  make是一个批处理工具，本身其实没什么功能。make工具就根据Makefile中的命令进行编译和链接。其实Windows系统中也有这些步骤，只不过微软已经把这些嵌入到了编译器中，不需要程序员去关心。Linux系统也有一些IDE可以帮助我们完成这些工作，比如CMake。</p>
<h2 id="makefile的作用">makefile的作用</h2>
<p>工程中可执行文件的产生过程如下：</p>
<ol type="1">
<li>配置环境(系统环境)</li>
<li>确定标准库和头文件的位置</li>
<li>确定依赖关系（源代码之间编译的依赖关系）</li>
<li>头文件预编译</li>
<li>预处理</li>
<li>编译</li>
<li>链接</li>
<li>安装</li>
<li>和操作系统建立联系</li>
<li>生成安装包</li>
</ol>
<p>  大型工程中需要确定代码之间的依赖关系(第三步)，当依赖关系复杂的时候，make命令工具诞生了，而Makefile文件正是为make工具所使用的。<u><strong>Makefile描述了整个工程文件的编译顺序、编译规则。</strong></u></p>
<h2 id="make流程">make流程</h2>
<p>  假设我们有一个简单的demo，reply.h、reply.cpp两个文件定义了一个类，输出“helloworld”，main.cpp是主函数文件，生成类对象。这三个文件有依赖关系。我们编译的步骤如下：</p>
<ol type="1">
<li><strong>写Makefile文件</strong></li>
</ol>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">main</span>: reply<span class="selector-class">.o</span> <span class="selector-tag">main</span><span class="selector-class">.o</span>    <span class="comment">//左侧main是目标，依赖右侧的两个文件</span></span><br><span class="line">    g++ reply<span class="selector-class">.o</span> <span class="selector-tag">main</span><span class="selector-class">.o</span> -o <span class="selector-tag">main</span>  <span class="comment">//使用g++命令，用reply.o、main.o生成main</span></span><br><span class="line">reply<span class="selector-class">.o</span>: reply<span class="selector-class">.cpp</span>  <span class="comment">//reply.o,依赖reply.cpp</span></span><br><span class="line">    g++ -c reply<span class="selector-class">.cpp</span>  -o reply<span class="selector-class">.o</span>  <span class="comment">//用g++命令生成reply.o,只编译</span></span><br><span class="line"><span class="selector-tag">main</span><span class="selector-class">.o</span>: <span class="selector-tag">main</span><span class="selector-class">.cpp</span>  <span class="comment">//main.o,依赖main.cpp</span></span><br><span class="line">    g++ -c <span class="selector-tag">main</span><span class="selector-class">.cpp</span>  -o <span class="selector-tag">main</span><span class="selector-class">.o</span>  <span class="comment">//用g++命令生成main.o,只编译</span></span><br></pre></td></tr></table></figure>
<p>  可以看到，先表明最终生成文件的依赖关系，然后生成。其次挨个写被依赖文件自身的依赖关系。从上往下是倒置的依赖关系。</p>
<p> </p>
<ol start="2" type="1">
<li><strong>用make命令</strong></li>
</ol>
<p><code>$ make</code></p>
<p>  类似于批处理，make命令会去调用makefile文件，完成Makefile文件中的各项命令。</p>
<p> </p>
<h2 id="makefile文件格式">makefile文件格式</h2>
<ul>
<li>makefile的基本规则：</li>
</ul>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">目标<span class="comment">(target)</span>...: 依赖<span class="comment">(prerequisites)</span></span><br><span class="line">    命令<span class="comment">(command)</span></span><br></pre></td></tr></table></figure>
<p>注意：每个命令前必须是Tab字符。</p>
<p> </p>
<ul>
<li><p>makefile的简化规则：</p>
<ol type="1">
<li>变量定义： 变量 = 字符串</li>
<li>变量使用： $(变量名)</li>
</ol></li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">//上面的makefile文件可以做如下简化：</span></span><br><span class="line"></span><br><span class="line">TARGET = <span class="selector-tag">main</span></span><br><span class="line">OBJS = reply<span class="selector-class">.o</span> <span class="selector-tag">main</span><span class="selector-class">.o</span></span><br><span class="line">$(TARGET): $(OBJS)</span><br><span class="line">    g++ $(OBJS) -o $(TARGET)</span><br><span class="line">reply<span class="selector-class">.o</span>: reply<span class="selector-class">.cpp</span>  </span><br><span class="line"><span class="selector-tag">main</span><span class="selector-class">.o</span>: <span class="selector-tag">main</span><span class="selector-class">.cpp</span>  </span><br><span class="line"></span><br><span class="line">clean:</span><br><span class="line">    rm $(TARGET) $(OBJS)   <span class="comment">//生成完成后</span></span><br></pre></td></tr></table></figure>
<p> </p>
<ul>
<li>清空操作</li>
</ul>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">//在makefile文件中可以加上清理操作：</span><br><span class="line"></span><br><span class="line">TARGET = main</span><br><span class="line">OBJS = reply.o main.o</span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: clean  //<span class="keyword">.PHONY</span>关键字，表示clean不存在，否则目录下存在"clean"同名文件的话，clean会失败</span></span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">    rm <span class="variable">$(TARGET)</span> <span class="variable">$(OBJS)</span>   </span><br></pre></td></tr></table></figure>
<p>执行<code>$ make clean</code>命令后，可以根据makefile中定义的删除操作把文件删掉。</p>
<h2 id="makefile的扩展用法">makefile的扩展用法</h2>
<ol type="1">
<li>make工程的安装和卸载</li>
</ol>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">TARGET = main</span><br><span class="line">OBJS = reply.o main.o</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>安装可以简化为拷贝操作</span><br><span class="line"><span class="regexp">//</span>把main拷贝到<span class="regexp">/user/</span>local<span class="regexp">/bin/m</span>ainTest </span><br><span class="line">install:</span><br><span class="line">    cp .<span class="regexp">/main /u</span>ser<span class="regexp">/local/</span>bin/mainTest </span><br><span class="line"></span><br><span class="line">uninstall:</span><br><span class="line">    rm <span class="regexp">/user/</span>local<span class="regexp">/bin/m</span>ainTest </span><br></pre></td></tr></table></figure>
<p> </p>
<ol start="2" type="1">
<li>Makefile中的变量</li>
</ol>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">一、用户自定义变量</span><br><span class="line"> 变量 = 字符串，使用的时候就用$()括起来。就类似于C++中的宏定义。注意变量的大小写敏感。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">二、变量中的变量</span><br><span class="line">  变量可以先使用再声明：</span><br><span class="line">foo = $(bar)  <span class="comment">//还没声明bar，但可以先直接用</span></span><br><span class="line">bar = $(ugh)</span><br><span class="line">ugh = Hug   </span><br><span class="line"></span><br><span class="line">  这样可以使变量定义更加灵活，但如果工程过于复杂不建议用，因为这样定义需要make来推导</span><br><span class="line">  定义的层级过多，会导致编译速度很慢。</span><br><span class="line"></span><br><span class="line">  如果希望只能使用声明过的变量，那么可以使用<span class="string">":="</span>来替换<span class="string">"="</span></span><br><span class="line">  <span class="string">":="</span>如果使用了还没有声明的变量，会失效</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">三、追加变量</span><br><span class="line">  可以使用<span class="string">"+="</span>来追加变量</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">四、多行变量</span><br><span class="line">  define two-lines</span><br><span class="line">  第一行命令</span><br><span class="line">  第二行命令</span><br><span class="line">  endif</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">五、环境变量</span><br><span class="line">  就是操作系统的环境变量，Windows和Linux下都有</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">六、自动变量(目标变量)</span><br><span class="line">  上面说的变量都是全局变量，整个makefile文件的运行过程中都可以被访问。</span><br><span class="line">  自动变量和上面的不一样，这是一种规则变量，设定好规则后，只有makefile运行过程中符合规则时才生效</span><br><span class="line">  $&lt; : 表示第一个匹配的依赖</span><br><span class="line">  $@ : 表示目标</span><br><span class="line">  $^ : 表示所有依赖</span><br><span class="line">  $? : 表示所有依赖中更新的文件</span><br><span class="line">  $+ : 表示所有依赖文件不去重</span><br><span class="line">  $(@D) : 表示目标文件路径</span><br><span class="line">  $(@F) : 表示目标文件名称</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">七、模式变量</span><br><span class="line">  模式变量就是符号<span class="string">'%'</span>,比较类似在搜索时使用的通配符，可以表示任何一个字符</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">八、自动匹配</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<p> </p>
<h1 id="makefile自动生成部署cmake">Makefile自动生成部署——CMake</h1>
<p>  一般来说，项目的目录结构来说起码要包含如下目录：src目录下是头文件的实现文件；include目录下是包含的头文件；bin目录下是可运行文件；build目录下是临时构建的文件。当我们把文件分门别类后，可以让整个项目的层次分明。但对于大型工程来说，这么复杂的目录结构会导致makefile的编写极其困难。</p>
<p>  为了解决这两个问题，有几个非常好用的工具：<a href="https://cmake.org/documentation/">automake/autocinfig</a>、<a href="https://cmake.org/documentation/">CMake</a>。</p>
<p>  生成CMake工程不需要写makefile文件，又CMake自动生成，我们只需要写CMakeList.txt这样的文本文件即可，这个文件是有模板的：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CMakeList.txt</span></span><br><span class="line"><span class="comment"># 设置cmake最低版本</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>.<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 设置C++标准</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"><span class="comment"># 项目名称</span></span><br><span class="line"><span class="keyword">project</span>(cmake_test)</span><br><span class="line"><span class="comment"># 包含的头文件目录</span></span><br><span class="line"><span class="keyword">include_directories</span>(./<span class="keyword">include</span>)</span><br><span class="line"><span class="keyword">set</span>(SRC_DIR ./src)</span><br><span class="line"><span class="comment"># 指定生成链接库</span></span><br><span class="line"><span class="keyword">add_library</span>(XXX <span class="variable">${SRC_DIR}</span>/XXX.cpp)</span><br><span class="line"><span class="keyword">add_library</span>(YYY <span class="variable">${SRC_DIR}</span>/YYY.cpp)</span><br><span class="line"><span class="comment"># 设置变量</span></span><br><span class="line"><span class="keyword">set</span>(LIBRARIES XXX YYY)</span><br><span class="line"><span class="keyword">set</span>(OBJECT XXX_test)</span><br><span class="line"><span class="comment"># 生成可执行文件</span></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">${OBJECT}</span> <span class="variable">${SRC_DIR}</span>/main.cpp)</span><br><span class="line"><span class="comment"># 为可执行文件链接目标库</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">${OBJECT}</span> <span class="variable">${LIBRARIES}</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++进阶</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>基础容器--字符串</title>
    <url>/2022/C/C++/%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h1 id="字符串变量与常量">字符串变量与常量</h1>
<h2 id="字符串变量">字符串变量</h2>
<ul>
<li>字符串是一个特殊的字符数组，以空字符'\0'结尾;</li>
<li>空字符'\0'<strong>自动</strong>添加到字符串的内部表示中;</li>
<li>在声明字符串变量的时候，要时刻记得为这个空结束符预留一个额外元素的空间：char
str[11] = {"helloworld"},十个字符要留11个位置</li>
</ul>
<h2 id="字符串常量">字符串常量</h2>
<ul>
<li>字符串常量就是一对双引号括起来的字符序列："helloworld";</li>
<li>字符串常量中的每个元素可以作为一个数组元素访问;</li>
<li>字符串常量也是以'\0'结尾的;</li>
</ul>
<h1 id="字符串的指针表示">字符串的指针表示</h1>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span>* pStrHelloWorld = <span class="string">&quot;helloworld&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>表示一个char型的指针变量，指向内存中一个存储字符串“helloworld”的地址。</p>
<p>定义字符串有两种方式，char[]和char*，要区分以下两个概念：</p>
<ol type="1">
<li>区分地址本身和地址存储的信息；</li>
<li>区分可变与不可变；</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//char strHello[10] = &#123; &quot;helloworld&quot; &#125;;  //错误定义，没有给&#x27;\0&#x27;留空间</span></span><br><span class="line"></span><br><span class="line">	<span class="type">char</span> strHello[<span class="number">11</span>] = &#123; <span class="string">&quot;helloworld&quot;</span> &#125;;</span><br><span class="line">	<span class="type">char</span> strHello[] = &#123; <span class="string">&quot;helloworld&quot;</span> &#125;;  <span class="comment">//这样定义也可以</span></span><br><span class="line">	<span class="comment">//strHello是数组变量，它本身的值是不允许改变的，但是它指向的区域的值strHello[index]是可以改变的</span></span><br><span class="line">	strHello[<span class="number">2</span>] = <span class="string">&#x27;6&#x27;</span>;    <span class="comment">//strHello = he6loworld</span></span><br><span class="line">	<span class="comment">//strHello = &#123; &quot;helloworld&quot; &#125;;    //本身不允许改变，编译不通过</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//ptrHello是指针变量，它本身是可以改变的，但是ptrHello[index]指向的值可变与否要取绝与所指向的区间是否可以改变</span></span><br><span class="line">	<span class="type">const</span> <span class="type">char</span>* ptrHello_1 = <span class="string">&quot;helloworld&quot;</span>;  <span class="comment">//指针指向常量区(必须要加const)，ptrHello[index]不可改变，但本身指向的地址可以变。</span></span><br><span class="line">	ptrHello_1 = <span class="string">&quot;change&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span> tmp[<span class="number">7</span>] = <span class="string">&quot;change&quot;</span>;</span><br><span class="line">	<span class="type">char</span>* ptrHello_2 = strHello;      <span class="comment">//指针指向数组变量，ptrHello[index]可以改变,本身也可以变</span></span><br><span class="line">	ptrHello_2[<span class="number">2</span>] = <span class="string">&#x27;l&#x27;</span>;</span><br><span class="line">	ptrHello_2 = tmp;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>char*
pstr是指针，pstr本身可变，pstr[index]是否可变取决于指向的存储区间是否可变；</p>
<p>char
str[]是字符串数组，str本身的值不允许改变，但可以改变str[index];</p>
<h1 id="字符串操作">字符串操作</h1>
<p>头文件：string.h</p>
<h2 id="字符串长度">字符串长度</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">strlen</span>(s);    <span class="comment">//返回字符串s的长度，要注意字符串的长度不包含&#x27;\0&#x27;。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sizeof</span>(s);   <span class="comment">//返回字符串所占用的空间，包含&#x27;\0&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> strA[<span class="number">11</span>] = <span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line">	<span class="keyword">auto</span> n1 = <span class="built_in">sizeof</span>(strA);     <span class="comment">//11</span></span><br><span class="line">	<span class="keyword">auto</span> n2 = <span class="built_in">strlen</span>(strA);     <span class="comment">//10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="type">wchar_t</span> strB[<span class="number">11</span>] = <span class="string">L&quot;helloworld&quot;</span>;</span><br><span class="line">	<span class="keyword">auto</span> n3 = <span class="built_in">sizeof</span>(strB);        <span class="comment">//22</span></span><br><span class="line">	<span class="keyword">auto</span> n4 = <span class="built_in">wcslen</span>(strB);        <span class="comment">//10</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="字符串比较">字符串比较</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">strcmp</span>(s1,s2); </span><br><span class="line"><span class="built_in">wcscmp</span>(s1,s2); </span><br><span class="line"><span class="comment">//s1 == s2,返回0</span></span><br><span class="line"><span class="comment">//s1 &lt; s2 ,返回值小于0</span></span><br><span class="line"><span class="comment">//s1 &gt; s2 ，返回值大于0</span></span><br></pre></td></tr></table></figure>
<p>两个字符串自左向右逐个字符相比，按照ASCII值大小来比较，直到出现不同字符或遇到'\0'为止；</p>
<h2 id="字符串拷贝">字符串拷贝</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">strcpy</span>(s1,s2);   <span class="comment">//赋值字符串s2到字符串s1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">strncpy</span>(s1,s2,n);   <span class="comment">//将字符串s2中的前n个字符拷贝到s1中</span></span><br></pre></td></tr></table></figure>
<p><strong>要注意一个陷阱，一定要保证字符串s1的内存大小能存的下要拷贝的s2的大小</strong></p>
<h2 id="字符串拼接">字符串拼接</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">strcat</span>(s1,s2);   <span class="comment">//将字符串s2拼接到s1后面</span></span><br></pre></td></tr></table></figure>
<p><strong>这个更加要注意，s1的大小要足够存放拼接后的s1+s2字符串的大小</strong></p>
<p>两个char*不能直接相加，字符串拼接必须要用这个函数。（指针相加是什么操作啊(#`O′)）</p>
<h2 id="字符串查找">字符串查找</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">strchr</span>(s1,ch);   <span class="comment">//指向字符串s1中字符ch第一次出现的位置</span></span><br><span class="line"><span class="built_in">strstr</span>(s1,s2);   <span class="comment">//指向字符串s1中字符串s2的第一次出现的位置</span></span><br></pre></td></tr></table></figure>
<h2 id="安全函数">安全函数</h2>
<p>C语言的字符串处理有其漏洞所在。上面的所有方法都无法做边界检查，如果不注意就会发生缓冲区溢出的问题，这个问题在编码时是很严重的事故。。现在我们往往在程序中使用更加安全的API函数：</p>
<p>上述所有API函数都有其_s版本，如strcpy_s()，在执行操作的同时要告诉系统当前可使用的缓冲区的大小。
strlen()的安全版本是strnlen_s()，传入字符串的同时要传入一个最大的边界，以防止某些字符串没有'\0'结束标志。</p>
<h1 id="c新型字符串--string类">C++新型字符串--string类</h1>
<p>C++标准库中提供了string类型专门表示字符串</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br></pre></td></tr></table></figure>
<p>使用string可以更加方便和安全的管理字符串，对性能要求不是特别高的场景可以使用。</p>
<h2 id="定义">定义</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string s;   <span class="comment">//定义空字符串</span></span><br><span class="line">string s = <span class="string">&quot;helloworld&quot;</span>;  <span class="comment">//定义并初始化</span></span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(<span class="string">&quot;helloworld&quot;</span>)</span></span>;</span><br><span class="line">string s = <span class="built_in">string</span>(<span class="string">&quot;helloworld&quot;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="字符串长度-1">字符串长度</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cout&lt;&lt;s1.<span class="built_in">length</span>()&lt;&lt;endl;    <span class="comment">//输出字符串长度</span></span><br><span class="line">cout&lt;&lt;s1.<span class="built_in">size</span>()&lt;&lt;endl;      <span class="comment">//本质和上面一样</span></span><br><span class="line">cout&lt;&lt;s1.<span class="built_in">capacity</span>()&lt;&lt;endl;  <span class="comment">// 字符串的容量</span></span><br></pre></td></tr></table></figure>
<h2 id="字符串比较-1">字符串比较</h2>
<p>直接使用运算符== != &lt; &gt; &gt;= &lt; =
即可，通过ASCII码来比较。</p>
<h2 id="转换为c风格字符串">转换为C风格字符串</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string s1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* c_str1 = s1.<span class="built_in">c_str</span>();</span><br></pre></td></tr></table></figure>
<h2 id="随机访问">随机访问</h2>
<p>字符串本身就是数组，可以使用下标的方式访问</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string s = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">cout&lt;&lt;s[<span class="number">0</span>]&lt;&lt;endl;</span><br></pre></td></tr></table></figure>
<h2 id="字符串拷贝-1">字符串拷贝</h2>
<p>不需要使用函数，直接使用=赋值</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string s1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">string s2 = s1;</span><br></pre></td></tr></table></figure>
<h2 id="字符串拼接-1">字符串拼接</h2>
<p>string重载了+和+=，不需要使用函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string s1 = <span class="string">&quot;hell0&quot;</span>,s2 = <span class="string">&quot;world&quot;</span>;</span><br><span class="line">string s3 = s1+s2;</span><br><span class="line">s1 += s2;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++基础</tag>
      </tags>
  </entry>
  <entry>
    <title>基础容器--数组</title>
    <url>/2022/C/C++/%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h1 id="数组">数组</h1>
<h2 id="序列型容器">序列型容器</h2>
<p>数组代表内存里一组<u>连续的同类型</u>的存储区，可以用来把多个存储区合并成一个整体。比如：int
arr[10] = {1,2,3,4,5,6,7,8};</p>
<p>数组声明：</p>
<ul>
<li>int arr[10];</li>
<li>类型名int表示数组里所有元素的类型</li>
<li>整数10表示数组里包含的元素个数</li>
<li>数组元素个数不可以改变，是常量</li>
</ul>
<p>使用注意：</p>
<ul>
<li>每个元素都有下标，标识一个元素在当前数组容器中的位置。通过下标可以直接访问数组内任意元素</li>
<li>下标从零开始</li>
<li>超过范围的下标不可以使用，会内存错误。一定要注意，内存溢出是程序中经常出现的BUG</li>
<li>数组名和下标可以表示数组里的元素，如a[2]表示第三个元素</li>
</ul>
<p>数组优点：</p>
<ul>
<li>可以编写循环程序，依次处理数组里的所有元素；</li>
<li>循环变量依次代表所有有效下标；</li>
</ul>
<h2
id="数组使用常见错误off-by-one-error差一错误">数组使用常见错误：off-by-one
error(差一错误)</h2>
<p>考虑一个问题，假定整数x满足边界条件x&gt;=16且x&lt;=37，那么此范围内的整数x可能的取值有多少？这个问题思考有两个基本原则：</p>
<ol type="1">
<li>首先考虑最简单的情况（特例），然后将结果外推；</li>
<li>仔细计算边界问题；</li>
</ol>
<p>特例：x的上界与下界重合，即x&gt;=16与x&lt;=16，显然其中的x个数为1；那么假定下界位low，上界位high；当low与high重合，个数为1，即共有high-low+1个元素。那么外推，这里共有37-16+1=22个元素。
最容易出错的地方就是+1，很容易就仅仅计算high-low。</p>
<p>  我们可以抽象出一个编程技巧来规避这个错误：用数学上的左闭右开[,)区间表示，上述问题可以看作[16,38)，即38-16=22。C++中，我们编程也遵循这个原则，从0开始，使用非对称区间，让下界可以取到值，上界取不到值。这样设计程序，可以直接用上界-下界来取得范围大小；当取值范围为空的时候，上界值=下界值；即使取值范围为空，上界值也永远不可能小于下界值。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//推荐的方式：</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> index=<span class="number">0</span>;index &lt; <span class="number">10</span>;++index)</span><br><span class="line">&#123;</span><br><span class="line">	cout&lt;&lt;a[index]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不推荐的方式</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> index=<span class="number">0</span>;index &lt;= <span class="number">9</span>;++index)</span><br><span class="line">&#123;</span><br><span class="line">	cout&lt;&lt;a[index]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  </p>
<p>结论--C语言设计数组下标的原则：从0开始，使用非对称区间[,)；让下界可以取到值，上界取不到值；这样设计的好处：</p>
<ol type="1">
<li>取值的范围大小可以直接上界-下界；</li>
<li>如果这个取值范围为空，上界值=下界值；</li>
<li>即使取值范围为空，上界值永远不可能小于下界值；</li>
</ol>
<h2 id="增删改查">增删改查</h2>
<ul>
<li>在尾部添加和删除操作，时间复杂度为O(1)。只需要操作尾部元素即可，对与其他元素没有干扰。</li>
<li>在数组中间进行添加和删除操作，时间复杂度为O(n)。在中间操作，会对其他元素造成影响，操作元素后面的每一个元素都需要进一步操作</li>
<li>数组的访问用遍历很高效，时间复杂度为O(1)；</li>
<li>数组的查找复杂度一般为O(n)，取决于数组的容量(数组容量很大的时候并不适合遍历查找，时间复杂度太高，可以用二分查找)；</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下标访问</span></span><br><span class="line">a[<span class="number">2</span>] = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指针访问</span></span><br><span class="line"><span class="type">int</span>* p = a;</span><br><span class="line">*(p+<span class="number">2</span>) = <span class="number">5</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//寻找a[]中第一个值为3的目标：</span></span><br><span class="line"><span class="type">int</span> len = <span class="built_in">sizeof</span>(a)/<span class="built_in">sizeof</span>(a[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> index = <span class="number">0</span>; index &lt; len; ++index)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(a[index] == <span class="number">3</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> index;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  </p>
<h2 id="二维数组">二维数组</h2>
<p>二维数组是包含行列两个维度的数组。</p>
<p>二维数组访问：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">2</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> row = <span class="number">0</span>; row &lt; <span class="number">2</span>; ++row)  <span class="comment">//行</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> col = <span class="number">0</span>; col &lt; <span class="number">4</span>; ++col) <span class="comment">//列</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout&lt;&lt;a[row][col]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  二维数组我们一般按照一行一行的遍历，虽然可以进行一列一列的遍历的，但是实际操作中不建议这么做：因为循环需要满足“空间局部性”：在一个小的时间窗口内，访问的地址越接近越好，这样执行的速度快；也就是说我们一般把最长的循环放在内层，最短的循环放在最外层，以减少CPU跨切循环的次数。</p>
<p>  </p>
<h1 id="c新型数组--vector">C++新型数组--vector</h1>
<p>Vector是<strong>面向对象</strong>方式的<strong>动态</strong>数组。</p>
<p>动态是指容量不固定：我们经常使用的简单的数组，因为定义的时候就有固定容量，所以无法实现动态扩容插入元素。使用vector容器，可以轻松实现动态扩容添加元素。</p>
<p>面向对象是C++的特性，vector封装了一系列的方法，我们创建vecor的对象可以方便的使用。</p>
<h2 id="添加">添加</h2>
<p>  使用vector容器，可以轻松实现动态扩容插入元素，传统的C数组容量有限，vector可以动态管理扩容。</p>
<ul>
<li>push_back，尾添加</li>
<li>insert，任意位置添加（效率不高）</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; vec = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//尾添加</span></span><br><span class="line">	vec.<span class="built_in">push_back</span>(<span class="number">5</span>);  <span class="comment">//尾添加，不会出现下标越界 &#123;1,2,3,4,5&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//指定位置添加</span></span><br><span class="line">	<span class="comment">//insert方法，传入位置和值</span></span><br><span class="line">	vec.<span class="built_in">insert</span>(--vec.<span class="built_in">end</span>(), <span class="number">6</span>);   <span class="comment">//&#123;1,2,3,4,6,5&#125;</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="遍历">遍历</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> index = <span class="number">0</span>;index &lt; vec.<span class="built_in">size</span>(); ++index)</span><br><span class="line">&#123;</span><br><span class="line">	cout&lt;&lt;vec[index]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  我们可以使用vector中的capacity()方法来查看vector当前的容量，用size()的方法来查看已经存储的元素的个数。这两者有区别，容量是指容器可以容纳元素的个数，数量是已经存储的数据个数；</p>
<h2 id="删除">删除</h2>
<ul>
<li>vec.pop_back(); //尾删除</li>
<li>vec.eraser(pos); //指定位置删除</li>
</ul>
<p>  要注意如果打算使用eraser的方法进行尾删除，要注意end()的位置。数组的区间往往是左闭右开，end()指向的是尾元素的后面的地址，并不是尾元素自身。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vec.<span class="built_in">pop_back</span>();</span><br><span class="line">vec.<span class="built_in">eraser</span>(vec.<span class="built_in">end</span>()<span class="number">-1</span>);   <span class="comment">//这两者等价</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++基础</tag>
      </tags>
  </entry>
  <entry>
    <title>字符编码</title>
    <url>/2025/C/C++/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/</url>
    <content><![CDATA[<h1 id="ascii码表">ASCII码表</h1>
<p>  ASCII(American Standard Code for Information
Interchange,美国信息交换标准代码)是基于拉丁字母的一套电脑编码系统，主要用于显示现代英语和其他西欧语言。它是最通用的信息交换标准，并等同于国际标准ISO/IEC
646。</p>
<p>  
ASCII码使用指定的7位或8位二进制数组合来表示128或256种可能的字符。美国一开始设计的是7位共128个，包含95个可见字符和33个控制字符，后期扩展到8位，称为扩展ASCII码。</p>
<p>  </p>
<h1 id="国标编码">国标编码</h1>
<p>  中国也有自己的编码，用于表示中文字符。设计编码首先要确定字符集。国标使用分区管理，共计分为94个区，每个区含94位，共8836个码位。1<sub>9区收录除汉字外的682个字符；10</sub>15区为空白区，没有使用；16<sub>55区收录3755个一级汉字，按照拼音排序；56</sub>87区收录3008个二级汉字，按照部首/笔画排序；剩余的88~94区为空白区，没有使用。这套字符集称为<strong>GB2312</strong>字符集。按照这个字符集来编码，比如3区的6行7列字符，编码0367。</p>
<p>  ASCII是直接把码位按照二进制存储，但国标编码不是。比如5709编码的汉字(侃)，把6709按照前两位和后两位分开，并分别转为16进制：0x39和0x09；然后两个数分别加上0xA0得到0xD9和0xA9，将两数合并，0xD90xA9就是汉字侃的GB2312码。</p>
<p>  GB2312编码之所以要加0xA0，是为了要兼容ASCII码。GB2312是双字节编码，为了与ASCII编码区分，每个单字节的第八位必须是1，所以GB2312编码最少要从0x80(1000
0000)开始。但是根据规定，0x80~0x9F需要留给控制块，所以只能从0xA0开始。</p>
<p>  计算机判断字符是ASCII码还是GB2312编码的方式就是通过字符大小，ASCII码是7个字节，如果小于127就是ASCII码，如果连续碰到两个大于127的8位就把两个组合起来当作GB2312编码。</p>
<p>  GB2312编码只能表示6763个汉字，后期也不够用了，所以对GB2312做了扩展为<strong>GBK字符集</strong>。GB2312的高位和地位都要求必须大于127，GBK不再规定低位大于127，只保证高位大于127。把之前没用上的码位都用上，扩充了将近20000个汉字和符号。计算机只要碰到一个大于127的字节，就表示一个汉字的开始。</p>
<p>  后期还扩展了GB18030字符集，新增了少数民族的字符。</p>
<p>  </p>
<h1 id="unicode">Unicode</h1>
<p>  ASCII可表示的字符数太少了，但如果每个国家都设计一套自己的编码就太乱了，为了把世界上的文字都映射到一套字符空间中，诞生了Unicode。Unicode是一个标准，规定了字符集和编码。</p>
<p>  最开始的Unicode字符集称为UCS-2字符集，和ASCII码一样，把用到的字符按顺序罗列并标上对应的码位。存储方式和ASCII一样，直接把码位按照二进制方式存储。一共可以表示<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.919ex" height="1.887ex" role="img" focusable="false" viewBox="0 -833.9 1290.1 833.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g></g></g></g></g></svg></mjx-container></span>即65536个字符。后期发现不够用后出现了UCS-4字符集，可以表示<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.919ex" height="1.887ex" role="img" focusable="false" viewBox="0 -833.9 1290.1 833.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g></g></g></g></g></svg></mjx-container></span>将近43亿个字符，但由于这个编码占用的存储空间太大了，并没有被广泛接受。</p>
<p>  互连网时代后，对Unicode做了优化，目前有3种Unicode的编码方式：</p>
<ol type="1">
<li>UTF-8：用1byte来表示字符，可以兼容ASCII码；
<ol type="1">
<li>特点是存储效率高，可变长（不方便内部随机访问）;</li>
<li>无字节序问题，可以作为外部编码；</li>
</ol></li>
<li>UTF-16：用2bytes表示一个字符，可以分为UTF-16BE(big
endian)和UTF-16LE(little endian)
<ol type="1">
<li>特点是定长的，方便内部随机访问；</li>
<li>有字节序问题，不可以作为外部编码；</li>
</ol></li>
<li>UTF-32：用4bytes表示一个字符，可以分为UTF-32BE(big
endian)和UTF-32LE(little endian)
<ol type="1">
<li>特点是定长的，方便内部随机访问；</li>
<li>有字节序问题，不可以作为外部编码；</li>
</ol></li>
</ol>
<p>   注意：如果使用的Windows系统，Windows文件可能有BOM(byte order
mark)来表示字节序，如果要在其他平台使用，可以去掉BOM或者忽略掉。BOM在文本文件头部，FEFF(十进制为254
255)表示大端，FFFE(十进制为255 254)表示小端。</p>
<p>  </p>
<p>  UTF-8编码原理：UTF-8将UCS-4字符集的码位划分为4个区间(0x00000000<sub>0x0000007F；0x00000080</sub>0x000007FF；0x00000800<sub>0x0000FFFF；0x00010000</sub>0x0010FFFF)，第一个区间的编码样式为0XXXXXXX，第二个区间的编码样式为110XXXXX
10XXXXXX，第三个区间的编码样式为1110XXXX 10XXXXXX
10XXXXXX，第四个区间的编码样式为11110XXX 10XXXXXX 10XXXXXX
10XXXXXX。</p>
<p>  汉字“王”在UCS-4中的编码为0x0000738B，转换为二进制就是“0000 0000
0000 0000 0111 0011 1000
1011”。0x0000738B属于UCS-4的第三区间，这个区间的编码样式是“1110XXXX
10XXXXXX
10XXXXXX”。此时我们得到了“王”这个字符的二进制形式和编码样式，把二进制形式从高到低依次插入到编码样式中，得到了“王”对应的UTF-8编码：“11100111
10001110 10001011”，十六进制为“0xe7 0x8e 0x8b”。</p>
<p>  </p>
<p><strong><u>程序中编码错误的根本原因在于编码方式和解码方式的不统一。</u></strong></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++基础</tag>
      </tags>
  </entry>
  <entry>
    <title>指针与引用</title>
    <url>/2022/C/C++/%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8/</url>
    <content><![CDATA[<h1 id="指针">指针</h1>
<p>  内存由很多内存单元组成。这些内存单元用于存放各种类型的数据。为了标识内存单元，计算机对内存的每个单元都进行了编号，这个编号就称为<strong>内存地址</strong>，内存地址决定了内存单元在内存中的位置。程序员并不需要记住这些内存地址，C++的编译器让我们可以通过名字来访问这些内存位置。</p>
<p>  指针本身就是一个变量，其符合变量定义的基本形式，它存储的值是内存地址。对于一个基本类型T，T*
是“到T的指针”类型，一个类型为T*的变量能够保存一个类型为T的对象的地址。</p>
<p>  通过一个指针访问它所指向的地址的过程称为<strong>间接访问</strong>(indirection)或者<strong>引用指针</strong>(dereferencing
the point)。这个用于执行间接访问的操作符是单目操作符*。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">	<span class="type">float</span> b = <span class="number">3.14f</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//指针变量定义</span></span><br><span class="line">	<span class="type">int</span>* c = &amp;a;  <span class="comment">//c存储a的内存地址</span></span><br><span class="line">	<span class="type">float</span>* d = &amp;b; <span class="comment">//d存储b的地址</span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; c &lt;&lt; endl;   <span class="comment">//输出a变量的地址</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//间接访问</span></span><br><span class="line">	cout &lt;&lt; (*c) &lt;&lt; endl; <span class="comment">//等同于cout&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line">	cout &lt;&lt; (*d) &lt;&lt; endl;<span class="comment">//等同于cout&lt;&lt;b&lt;&lt;endl;</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> </p>
<p>变量、地址和指针变量总结：</p>
<p>一个变量具有三个重要的信息：</p>
<ol type="1">
<li>变量的类型；</li>
<li>变量所存储的信息；</li>
<li>变量的地址位置</li>
</ol>
<p>指针变量是一个专门用来记录变量地址的变量，通过指针变量可以间接访问另一个变量的值，这里的另一个变量也可以是个指针，这就是多级指针的问题；</p>
<h1 id="左值与右值">左值与右值</h1>
<p>字符串可以用字符数组表示，也可以用指针来表示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//两种字符串表示</span></span><br><span class="line">	<span class="type">char</span> strHello[] = &#123; <span class="string">&quot;hello&quot;</span> &#125;;</span><br><span class="line">	<span class="type">const</span> <span class="type">char</span>* pStrHello = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">	pStrHello = strHello;   <span class="comment">//正确，指针变量的值可以改变</span></span><br><span class="line">	strHello = pStrHello;   <span class="comment">//编译器报错，数组变量的值不允许改变</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>strHello不可改变，strHello[index]的值可以改变；pStrHello可以改变，pStrHello[index]的值能否改变取决于所指的存储区域是否可变。这里就涉及到了左值与右值的概念。</p>
<ul>
<li><strong>左值：编译器为其单独分配了一块存储空间，可以取其地址的，左值可以放在赋值运算符左边（也可以放右边）；</strong></li>
<li><strong>右值：指的是数据本身；编译器没有分配存储空间，不能取到自身地址，右值只能放在赋值运算符右边</strong></li>
</ul>
<p>左值最常见的情况就是函数和数据成员变量的名字；右值是没有标识符、不可取地址的表达式，一般也称为“临时对象”。</p>
<p>比如：a = b +
c;&amp;a是允许的操作而&amp;(b+c)不能通过编译，因此a是一个左值，(b+c)是一个右值；</p>
<h1 id="c原始指针">C++原始指针</h1>
<h2 id="一般类型指针t">一般类型指针T*</h2>
<p>T是一个泛型，泛指任何一种类型</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">4</span>;</span><br><span class="line"><span class="type">int</span>* iP = &amp;i;</span><br><span class="line">cout&lt;&lt;(*iP)&lt;&lt;endl; <span class="comment">//这俩的*含义不一样，一个是指针，一个是间接引用</span></span><br><span class="line"></span><br><span class="line"><span class="type">double</span> d = <span class="number">3.14</span>;</span><br><span class="line"><span class="type">double</span>* dP =&amp;d;</span><br><span class="line">cout&lt;&lt;(*dP)&lt;&lt;endl;</span><br></pre></td></tr></table></figure>
<p>不论T是什么类型，T*这个指针的内存空间都是一样的，为<strong>4个字节</strong></p>
<h2 id="指针的数组-与-数组的指针">指针的数组 与 数组的指针</h2>
<p>指针的数组 T* t[]：指针的数组仍然是数组，里面每个值是个指针(array of
pointers)</p>
<p>数组的指针 T(*t)[] :一个指针，指向一个数组(a pointer to an array)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>* a[<span class="number">4</span>];  <span class="comment">//一个数组，每个元素都是int指针</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> c[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="built_in">int</span>(*b)[<span class="number">4</span>];  <span class="comment">//声明一个数组指针，可以指向包含4个int元素的数组</span></span><br><span class="line">b = &amp;c;  <span class="comment">//数组的个数一定要匹配！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将数组c中的元素赋值给数组a：</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">	a[i] = &amp;(c[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//输出数组内容：</span></span><br><span class="line">cout&lt;&lt;*(a[<span class="number">0</span>])&lt;&lt;endl;  <span class="comment">//先取数组下标得到地址，然后做间接访问</span></span><br><span class="line">cout&lt;&lt;(*b)[<span class="number">3</span>]&lt;&lt;endl;  <span class="comment">//b是指针，先间接访问取值得到数组，然后取数组下标</span></span><br></pre></td></tr></table></figure>
<h2 id="const与指针">const与指针</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> strHello[] = &#123; <span class="string">&quot;helloworld&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span> <span class="type">const</span>* pStr1 = <span class="string">&quot;helloworld&quot;</span>;  <span class="comment">//修饰char，指针指向的地址可变，但是存储的区域中的内容不可变</span></span><br><span class="line">	<span class="type">char</span>* <span class="type">const</span> pStr2 = <span class="string">&quot;helloworld&quot;</span>; <span class="comment">//修饰char*，指针指向的地址不可变。在最新的VS中编译不过，因为&quot;helloworld&quot;是常量，必须要用const指针</span></span><br><span class="line">	<span class="type">const</span> <span class="type">char</span>* <span class="type">const</span> pStr3 = <span class="string">&quot;helloworld&quot;</span>; <span class="comment">//地址和空间中的内容都不允许改变</span></span><br><span class="line"></span><br><span class="line">	pStr1 = strHello;</span><br><span class="line">	<span class="comment">//pStr2 = strHello;   //错误，pStr2地址不可改</span></span><br><span class="line">	<span class="comment">//pStr3 = strHello;   //错误，pStr3地址不可改 </span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//pStr1[1] = &#x27;a&#x27;;   //错误，存储区内的char不可改变</span></span><br><span class="line">	pStr2[<span class="number">1</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">	<span class="comment">//pStr3[1] = &#x27;a&#x27;;   //错误，存储区内的char不可变</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如何确定const修饰的内容:</p>
<ul>
<li>看左侧最近的部分</li>
<li>如果左侧没有，则看右侧</li>
</ul>
<h2 id="指向指针的指针">指向指针的指针</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="type">int</span>* b = &amp;a;</span><br><span class="line"><span class="type">int</span>** c = &amp;b; <span class="comment">//二级指针</span></span><br></pre></td></tr></table></figure>
<p>*操作符具有从右向左的结合性，**c 这个表达式相当于
*(*c)，必须从里向外逐层求值 *c得到的是c指向的位置，即b的地址；**c相当于
*b，间接引用得到变量a的值。</p>
<p>下表是上面例子的一些变量表示：</p>
<table>
<thead>
<tr class="header">
<th>表达式</th>
<th>值</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>a</td>
<td>123</td>
</tr>
<tr class="even">
<td>b</td>
<td>&amp;a</td>
</tr>
<tr class="odd">
<td>*b</td>
<td>a,123</td>
</tr>
<tr class="even">
<td>c</td>
<td>&amp;b</td>
</tr>
<tr class="odd">
<td>*c</td>
<td>b，&amp;a</td>
</tr>
<tr class="even">
<td>**c</td>
<td>*b，a，123</td>
</tr>
</tbody>
</table>
<h2 id="未初始化指针和非法指针">未初始化指针和非法指针</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>* a;  <span class="comment">//只声明不赋值,a指向哪里完全不知道</span></span><br><span class="line">*a = <span class="number">12</span>;<span class="comment">//错误！！</span></span><br></pre></td></tr></table></figure>
<p>  上述操作并没有对指针a进行初始化，也就是说我们并不知道a最终会指向哪里。运气好的话定位到一个非法地址（程序不能访问的地址），程序会出错从而崩溃终止。最坏的情况下，a定位到了一个可以访问的地址，这样我们就无意间修改了它，这样的错误难以捕捉，引发的错误与原先用来操作的代码毫不相干，我们根本无法定位。</p>
<p><strong><u>用指针进行间接访问之前，一定要确保它已经初始化，并且被恰当的赋值。</u></strong></p>
<h2 id="nullnullptr和void">NULL、nullptr和void*</h2>
<p>NULL指针是一个特殊的指针变量，表示不指向任何东西。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>* a = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>
<p>NULL指针的概念非常有用，它给了一种方法，来表示特定的指针目前未指向任何东西。</p>
<ul>
<li>对于一个指针，如果已经知道将被初始化为什么地址，那么请给他赋值，否则请把它设置为NULL，这样可以有效避免不可确定性访问的问题；</li>
<li>在对一个指针间接引用前，先判断这个指针的值是否为NULL；</li>
<li>指针使用完成后也请重新赋值为NULL；</li>
</ul>
<p>  </p>
<p>  在早期的C语言中，编译器定义：<kbd>#define NULL
((void*)0)</kbd>。void*是一个很万能的指针，可以转换任意的类型。参数传递时经常用到，函数编写时无法预测将来要传递什么信息，就用void*代替。</p>
<p>  C++语言诞生时没有把NULL定义为void*，而是定义为了0：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> NULL</span></span><br><span class="line">  <span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> NULL 0</span></span><br><span class="line">  <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> NULL ((void*)0)</span></span><br><span class="line">  <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>  C++中NULL表示为int而不是指针，和C语言的差异会导致问题，所以C++11中用nullptr来代替(void*)0，NULL只表示0。在新的C++标准中，空指针尽量使用nullptr来表示。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">void</span>* i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;func(void* i)&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;func(int i)&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span>* pi = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="type">int</span>* pi2 = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="type">char</span>* pc = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="type">char</span>* pc2 = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="built_in">func</span>(<span class="literal">NULL</span>);                   <span class="comment">// func(int i)</span></span><br><span class="line">	<span class="built_in">func</span>(<span class="literal">nullptr</span>);                 <span class="comment">// func(void* i)</span></span><br><span class="line">	<span class="built_in">func</span>(pi);                         <span class="comment">// func(void* i)</span></span><br><span class="line">	<span class="built_in">func</span>(pi2);                       <span class="comment">// func(void* i)</span></span><br><span class="line">	<span class="built_in">func</span>(pc);                        <span class="comment">// func(void* i)</span></span><br><span class="line">	<span class="built_in">func</span>(pc2);                      <span class="comment">// func(void* i)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="野指针">野指针</h2>
<p>野指针是指向“垃圾”内存的指针。if等判断对它们不起作用，因为没有置为NULL，它存有值，但是我们用不了；</p>
<p>一般情况下有三种情况被称为野指针： 1. 指针变量没有初始化； 2.
已经释放不用的指针没有置为NULL，如delete和free之后的指针； 3.
指针操作超越了变量的作用域范围（指针指向具有一定生命周期的空间）；</p>
<p><strong><u>没有初始化的，不用的或者超出范围的指针，请一定置为NULL</u></strong></p>
<h1 id="指针的基本运算">指针的基本运算</h1>
<h2 id="与操作符">&amp;与*操作符</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> ch = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">char</span>* cP = &amp;ch;</span><br></pre></td></tr></table></figure>
<p><img
src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/%E6%8C%87%E9%92%88%E6%93%8D%E4%BD%9C1.png" /></p>
<p>  &amp;操作符不能做左值，&amp;操作编译器做是事情是把变量的地址位置取出来，然后放在内存空间中。但是他本身并不是变量自身，仅仅是一块空间存储着变量地址，这块空间的地址我们的程序是没办法获取到的。就像上图，&amp;ch操作拿到的是ch变量的地址，但取出的信息不会像cp这个变量一样有一块能获取地址的内存空间来存储。一定要注意，虽然cp是ch的地址，&amp;ch也是ch的地址，但这俩不是一个概念，只是恰好存的东西一样。</p>
<p>  </p>
<p><img
src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/%E6%8C%87%E9%92%88%E6%93%8D%E4%BD%9C2.png" /></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">*cp = <span class="string">&#x27;b&#x27;</span>;  <span class="comment">//左值，取的是空间</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> tmp = *cp; <span class="comment">//右值，取的是内容</span></span><br></pre></td></tr></table></figure>
<p>  间接引用操作当用作左值的时候，实际的操作是把变量ch当前的位置取出来（取空间），这种操作我们可以对这块空间进行操作，比如赋值操作；当我们把他当作右值时，实际的操作取的就不是存储空间，而是存储空间中的值。</p>
<p>  </p>
<p><img
src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/%E6%8C%87%E9%92%88%E6%93%8D%E4%BD%9C3.png" /></p>
<p>  *cp +
1首先得到cp中的值，得到a，做+1操作就是对ASCII码进行操作，得到b。但是这个操作还是由编译器创造一块空间取值，我们得不到这个变量的地址，不能做左值。这个+1的操作是按照cp的类型来做加法的，移动的是cp这个类型的大小。</p>
<p>  *(cp+1)操作我们先做了+1，而cp本身是个指针，我们做的是指针的加法，得到的是ch这个变量的地址的后面那个地址（做这个操作前要确定cp指向的地址后面的内容是可以访问的）。这个操作也是可以用作左值和右值，左值就是取地址，右值就是取空间中存储的值。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> ch = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//&amp;操作符</span></span><br><span class="line">	<span class="comment">//&amp;ch = 97;      //错误，&amp;ch左值不合法</span></span><br><span class="line">	<span class="type">char</span>* cp = &amp;ch; <span class="comment">//&amp;ch做右值</span></span><br><span class="line">	<span class="comment">//&amp;cp = 97;		//错误，&amp;左值不合法</span></span><br><span class="line">	<span class="type">char</span>** cpp = &amp;cp;		<span class="comment">//&amp;cp右值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//*操作符</span></span><br><span class="line">	*cp = <span class="string">&#x27;a&#x27;</span>;				<span class="comment">//*cp左值取变量ch的位置</span></span><br><span class="line">	<span class="type">char</span> ch2 = *cp;			<span class="comment">//*cp右值取变量ch存储的值</span></span><br><span class="line">	<span class="comment">//*cp + 1 = &#x27;a&#x27;;			//错误，*cp+1左值不合法的位置</span></span><br><span class="line">	ch2 = *cp + <span class="number">1</span>;			<span class="comment">//*cp+1右值取到的字符做ASCII码+1操作</span></span><br><span class="line">	*(cp + <span class="number">1</span>) = <span class="string">&#x27;a&#x27;</span>;			<span class="comment">//左值，语法上合法，访问到cp后面的位置，赋值为a.一定要保证这个位置是可以访问的，这种操作有风险</span></span><br><span class="line">	ch2 = *(cp + <span class="number">1</span>);			<span class="comment">//右值操作，取ch后面的位置的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="指针的-与---">指针的++ 与 --</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>* cp2 = ++cp;</span><br><span class="line"><span class="comment">//汇编代码：</span></span><br><span class="line">mov		eax,dword ptr [cp]		<span class="comment">//eax是寄存器，dwptr存储cp指针。把指针内容放置寄存器内</span></span><br><span class="line">add		eax,<span class="number">1</span>					<span class="comment">//寄存器数据+1</span></span><br><span class="line">mov		dword ptr [cp],eax		<span class="comment">//把寄存器内容存回cp中</span></span><br><span class="line">mov 	ecx,dword ptr [cp]		<span class="comment">//把cp的内容放置在ecx寄存器</span></span><br><span class="line">mov		dword ptr [cp2],ecx		<span class="comment">//把寄存器ecx内容放置在cp2中</span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>* cp3 = cp++;</span><br><span class="line"><span class="comment">//汇编代码：</span></span><br><span class="line">mov		eax,dword ptr[cp]		<span class="comment">//把cp指针内容放置在eax寄存器中</span></span><br><span class="line">mov		dword ptr[cp3],eax		<span class="comment">//把eax内容直接放在cp3指针</span></span><br><span class="line">mov		ecx,dword ptr[cp]		<span class="comment">//把cp信息放置在exc寄存器中</span></span><br><span class="line">add		ecx,<span class="number">1</span>					<span class="comment">//ecx+1操作</span></span><br><span class="line">mov		dword ptr[cp],ecx		<span class="comment">//ecx内容写入cp指针</span></span><br></pre></td></tr></table></figure>
<p>前置操作先做加法再赋值，后置操作先赋值后做加法操作。自减操作符和自增操作符相同，前置操作先做减法再赋值，后置操作先赋值再做减法。</p>
<p>  </p>
<p><img
src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/%E6%8C%87%E9%92%88%E6%93%8D%E4%BD%9C4.png" /></p>
<p>自增/自减操作获得的地址不能当作左值，它得到的只是个地址的副本，没有明确的变量来存储它的位置。</p>
<p>  </p>
<p><img
src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/%E6%8C%87%E9%92%88%E6%93%8D%E4%BD%9C5.png" /></p>
<p>++操作符优先级高于*，先计算地址偏移；</p>
<h2 id="和----等运算符连续">++++和----等运算符连续</h2>
<p>  编译器程序分解符号的方法是：一个字符一个字符的读入，如果该字符可能组成一个符号，那么读入下一个字符，一直到读入的字符不能组成一个有意义的符号。这个处理过程称为“贪心法”。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">1</span>,b=<span class="number">2</span>；</span><br><span class="line"><span class="type">int</span> c;</span><br><span class="line"><span class="type">int</span> d;</span><br><span class="line">c = a+++b;   <span class="comment">//相当于a++ +b。连续读取，当读取到两个+号时不能再组成新符号了</span></span><br><span class="line">d = a++++b;	<span class="comment">//相当于a++ ++b。这个是错误的 ，两个表达式之间不构成任何运算</span></span><br></pre></td></tr></table></figure>
<h1 id="c程序的存储区域划分">C++程序的存储区域划分</h1>
<h2 id="栈和队列">栈和队列</h2>
<p><img
src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97.png" /></p>
<p>  数据结构中有两种常见的结构，一种是栈结构，先进入的数据会被压在栈底，后进入的数据会被放在栈顶，是一种先进后出的结构；还有一种是队列结构，和栈相反，类似于生活中的队列，先进入的数据会先出队列。</p>
<p>  在C++中，栈是一种很常见的结构，我们一般性的变量都在栈上，函数也会在栈上处理。</p>
<h2 id="存储区域划分">存储区域划分</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>  a = <span class="number">0</span>;                       <span class="comment">//GVAR全局初始化区</span></span><br><span class="line"><span class="type">int</span>* p1;						  <span class="comment">//BSS全局未初始化区</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>						 <span class="comment">//text 代码区</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> b = <span class="number">1</span>;					<span class="comment">//stack栈区</span></span><br><span class="line">	<span class="type">char</span> s[] = <span class="string">&quot;abc&quot;</span>;			<span class="comment">//stack栈区</span></span><br><span class="line">	<span class="type">int</span>* p2 = <span class="literal">NULL</span>;				<span class="comment">//stack栈区</span></span><br><span class="line"></span><br><span class="line">	<span class="type">const</span> <span class="type">char</span>* p3 = <span class="string">&quot;123456&quot;</span>;	<span class="comment">//&quot;123456\0&quot;在常量区，p3在stack栈区</span></span><br><span class="line"></span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> c = <span class="number">0</span>;			<span class="comment">//GVAR全局(静态)初始化区</span></span><br><span class="line"></span><br><span class="line">	p1 = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>);			<span class="comment">//heap堆区变量</span></span><br><span class="line">	p2 = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">20</span>);			<span class="comment">//heap堆区变量</span></span><br><span class="line"></span><br><span class="line">	<span class="type">char</span>* p4 = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">7</span>];		<span class="comment">//heap堆区变量</span></span><br><span class="line">	<span class="built_in">strcpy_s</span>(p4, <span class="number">7</span>, <span class="string">&quot;123456&quot;</span>);	<span class="comment">//text代码区</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (p1 != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">delete</span> p1;</span><br><span class="line">		p1 = <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (p2 != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">delete</span> p2;</span><br><span class="line">		p2 = <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//p3指向常量区，由内存接管</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (p4 != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">delete</span>[] p4;</span><br><span class="line">		p4 = <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过调试上面的代码，可以观察到一些程序中的地址分布：</p>
<p><img
src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/%E6%A0%88.png" /></p>
<p>  上图是栈区变量b,s,p2的地址空间，可以看到虽然我们定义变量的顺序是b,s,p2，但是内存空间的地址位置是从高地址到低地址变化的，越早分配的变量，拿到的地址位置越高。</p>
<p><img
src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/%E5%9C%B0%E5%9D%80%E5%88%86%E9%85%8D.png" /></p>
<p>  再观察p3变量。看p3本身的地址可以观察到它的地址分配再p2的上面，因为都是栈区变量，但是内部存储的一个地址并不是在栈区，是在常量区。在常量区中的内容，我们是无法修改的。这就是指针变量的特点，可以指向不同的位置。如果p2指向的是一个字符数组，那么指向的就是栈区空间，是可以改变的。</p>
<p>  继续观察p1，p1是在函数之外声明的，看地址也可以观察到，它的地址和b，s相差很大，可知它并不在栈区。这种定义在函数外的变量属于全局的区域。</p>
<p>  当p1和p2执行完new操作后，观察p1和p2指向的地址空间，发现两个区域相邻。而且p1先new,p2后new，地址空间p2指向的地址也比p1要高。new操作会产生新的区域，我们称为堆区，和栈区相反，内存分配方式由低地址向高地址分配。</p>
<p><img
src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/%E5%A0%86%E5%8C%BA%E7%9A%84%E4%BF%A9%E5%8F%98%E9%87%8F.png" /></p>
<p>  再看p4，p4本身是在main函数中定义的，是栈区变量。它new的是一个char型的数组，new出的地址和p1和p2指向的地址也很接近，可知也是堆区内。</p>
<p>对存储区域做一个总结，如下图：</p>
<p><img
src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E6%80%BB%E7%BB%93.png" /></p>
<h2 id="动态分配资源--堆区">动态分配资源--堆区</h2>
<ol type="1">
<li>从现代编程语言的观点来看，使用堆，或者说使用动态内存分配，是一件很自然的事情；</li>
<li>动态内存带来了不确定性：内存分配耗时需要多久(分配大空间不好控制)？分配失败了怎么办？在实时性要求很高的场合，如嵌入式控制器和电信设备，这些不确定性是很严重的；</li>
<li>一般而言，当我们在堆上分配内存时，很多语言会使用new这样的关键字，也有些语言是隐式分配，不使用new的语义，但使用的是new的方式。在C++中new对应词是delete，因为C++是允许程序员完全接管内存的分配释放的。</li>
</ol>
<h2 id="分配和回收动态内存的原则">分配和回收动态内存的原则</h2>
<p>程序通常需要牵扯到三个内存管理器的操作：</p>
<ol type="1">
<li>分配一个某大小的内存块；</li>
<li>释放一个之前分配的内存块；</li>
<li>垃圾收集操作，寻找不再使用的内存块并给予释放；</li>
</ol>
<p>这个回收策略需要实现性能、实时性、额外开销等各方面的平衡，很难有统一和高效的做法。C++语言使用了1和2；Java使用了1和3。</p>
<h2
id="资源管理方案--raiiresource-acquisition-is-initization">资源管理方案--RAII（Resource
Acquisition Is Initization）</h2>
<ul>
<li>这是C++特有的资源管理方式，主流的编程语言中，C++是唯一一个依赖RAII来做资源管理的,核心思想是分配资源的时候就可以管理资源；</li>
<li>RAII依托<strong>栈</strong>和<strong>析构函数</strong>，来对所有的资源--包括堆内存在内进行管理。比如一个对象在构造和析构中就把资源管理起来，当对象生存空间超出后进入析构状态，我们就可以进行资源的释放。RAII的使用，使得C++不需要类似于Java哪样的垃圾收集方法也能有效管理内存。</li>
<li>RAII有些比较成熟的智能指针代表，如std::auto_ptr和boost::stared_ptr。</li>
</ul>
<h2 id="c的几种变量的对比">C++的几种变量的对比</h2>
<table>
<colgroup>
<col style="width: 32%" />
<col style="width: 45%" />
<col style="width: 22%" />
</colgroup>
<thead>
<tr class="header">
<th></th>
<th style="text-align: left;">stack</th>
<th style="text-align: left;">heap</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>作用域</td>
<td
style="text-align: left;">函数体内，语句块{}作用域，超出后被系统回收</td>
<td
style="text-align: left;">整个程序范围内，由new、malloc开始，delete、free结束</td>
</tr>
<tr class="even">
<td>编译期间大小确定</td>
<td style="text-align: left;">变量大小范围确定</td>
<td style="text-align: left;">需要运行期间才能确定</td>
</tr>
<tr class="odd">
<td>大小范围</td>
<td
style="text-align: left;">Windows默认1M，Linux默认8M或10M，注意空间很小，不要分配大内存变量</td>
<td
style="text-align: left;">所有系统的堆空间上限接近内存(虚拟内存)总大小(有一部分被OS占用)</td>
</tr>
<tr class="even">
<td>内存分配方式</td>
<td style="text-align: left;">地址由高到底减少</td>
<td style="text-align: left;">地址由低到高增加</td>
</tr>
<tr class="odd">
<td>内容是否可变</td>
<td style="text-align: left;">可变</td>
<td style="text-align: left;">可变</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr class="header">
<th></th>
<th style="text-align: center;">全局静态存储区</th>
<th style="text-align: center;">常量存储区</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>存储内容</td>
<td style="text-align: center;">全局变量，静态变量</td>
<td style="text-align: center;">常量</td>
</tr>
<tr class="even">
<td>编译期间大小是否确定</td>
<td style="text-align: center;">确定</td>
<td style="text-align: center;">确定</td>
</tr>
<tr class="odd">
<td>内容是否可变</td>
<td style="text-align: center;">可变</td>
<td style="text-align: center;">不可变</td>
</tr>
</tbody>
</table>
<h2 id="内存泄漏memory-leak问题">内存泄漏(Memory Leak)问题</h2>
<p>  内存泄漏指的是程序中已经动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果；</p>
<p>  内存泄漏主要发生在堆内存分配方式中，即“配置了内存后，所有指向该内存的指针都遗失了”。如果缺乏垃圾回收机制，这样的内存片就无法归还系统；</p>
<p>  因为内存泄漏属于程序运行中的问题，无法通过编译识别，所以只能在程序运行过程中来判别和诊断。</p>
<h1 id="比指针更安全的解决方案">比指针更安全的解决方案</h1>
<p>  使用指针是非常危险的行为，可能存在空指针，野指针的问题，并可能造成内存泄漏问题。可是指针又非常高效，所以我们希望以更安全的方式来使用指针。一般有两种典型方案：</p>
<ul>
<li>使用更安全的指针：智能指针；</li>
<li>不使用指针，使用更安全的方式：引用；</li>
</ul>
<h2 id="c的智能指针">C++的智能指针</h2>
<p>  C++推出了四种常见的智能指针：unique_ptr、shared_ptr、weak_ptr和C++11中已经废弃(deprecated)的auto+ptr，C++17中auto+ptr已经被正式删除。</p>
<h3 id="auto_ptr">auto_ptr</h3>
<p>  auto_ptr是一种简单直接的智能指针，可以指向一个泛型对象。我们由new获得的对象在堆区中，如果auto_ptr指向这个对象，那么在auto_ptr对象销毁的时候，它所管理的对象也会一并delete掉，这不是一个特别合理的行为，因为指针指向对象不是一种强关联的关系。</p>
<p>  所有权转移：有一个auto_ptr指向一个对象，如果我们不小心把对象传递给另外的智能指针(即有另一个auto_ptr指向了原来的对象)，原来的指针就不再拥有这个对象了。这个操作是通过C++中的拷贝构造和赋值完成的，会直接剥夺指针对源对象内存的控制权。被剥夺后，对象内存的所有权转移给新指针，然后将原对象指针置为nullptr。因为这个问题，导致auto_ptr存在很大的安全隐患，这是被废弃的重要原因。</p>
<p><img
src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/auto_ptr.png" /></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span> <span class="comment">//智能指针头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	&#123;<span class="comment">// 确定auto_ptr失效的范围</span></span><br><span class="line">		<span class="comment">// 对int使用</span></span><br><span class="line">		<span class="function">auto_ptr&lt;<span class="type">int</span>&gt; <span class="title">pI</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(<span class="number">10</span>))</span></span>;      <span class="comment">//关注pI的生命周期范围和指向的堆区空间的声明周期范围</span></span><br><span class="line">		cout &lt;&lt; *pI &lt;&lt; endl;                <span class="comment">// 10 </span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// auto_ptr	C++ 17中移除	拥有严格对象所有权语义的智能指针</span></span><br><span class="line">		<span class="comment">// auto_ptr原理：在拷贝 / 赋值过程中，直接剥夺原对象对内存的控制权，转交给新对象，</span></span><br><span class="line">		<span class="comment">// 然后再将原对象指针置为nullptr（早期：NULL）。这种做法也叫管理权转移。</span></span><br><span class="line">		<span class="comment">// 他的缺点不言而喻，当我们再次去访问原对象时，程序就会报错，所以auto_ptr可以说实现的不好，</span></span><br><span class="line">		<span class="comment">// 很多企业在其库内也是要求不准使用auto_ptr。</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//对字符串数组使用</span></span><br><span class="line">		auto_ptr&lt;string&gt; languages[<span class="number">5</span>] = &#123;</span><br><span class="line">			<span class="built_in">auto_ptr</span>&lt;string&gt;(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&quot;C&quot;</span>)),</span><br><span class="line">			<span class="built_in">auto_ptr</span>&lt;string&gt;(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&quot;Java&quot;</span>)),</span><br><span class="line">			<span class="built_in">auto_ptr</span>&lt;string&gt;(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&quot;C++&quot;</span>)),</span><br><span class="line">			<span class="built_in">auto_ptr</span>&lt;string&gt;(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&quot;Python&quot;</span>)),</span><br><span class="line">			<span class="built_in">auto_ptr</span>&lt;string&gt;(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&quot;Rust&quot;</span>))</span><br><span class="line">		&#125;;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;There are some computer languages here first time: \n&quot;</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; *languages[i] &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		auto_ptr&lt;string&gt; pC;</span><br><span class="line">		pC = languages[<span class="number">2</span>]; <span class="comment">// languges[2] loses ownership. 将所有权从languges[2]转让给pC!!!</span></span><br><span class="line">		<span class="comment">//此时languges[2]不再引用该字符串从而变成空指针</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;There are some computer languages here second time: \n&quot;</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; *languages[i] &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;The winner is &quot;</span> &lt;&lt; *pC &lt;&lt; endl;</span><br><span class="line">		<span class="comment">//下面会报错</span></span><br><span class="line">		<span class="comment">//cout &lt;&lt; &quot;There are some computer languages here third time: \n&quot;;</span></span><br><span class="line">		<span class="comment">//for (int i = 0; i &lt; 5; ++i)</span></span><br><span class="line">		<span class="comment">//&#123;</span></span><br><span class="line">		<span class="comment">//	cout &lt;&lt; *languages[i] &lt;&lt; endl;</span></span><br><span class="line">		<span class="comment">//&#125;</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//出了大括号，auto_ptr的内存被回收</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//xmemory文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//观察auto_ptr的模板可以看到它是怎么实现资源释放和所有权转移的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//资源释放：是通过析构来完成的</span></span><br><span class="line">~<span class="built_in">auto_ptr</span>() <span class="keyword">noexcept</span> &#123;</span><br><span class="line">        <span class="keyword">delete</span> _Myptr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//所有权转移，观察赋值的重载：</span></span><br><span class="line">auto_ptr&amp; <span class="keyword">operator</span>=(auto_ptr&amp; _Right) <span class="keyword">noexcept</span> &#123;</span><br><span class="line">        <span class="built_in">reset</span>(_Right.<span class="built_in">release</span>());   <span class="comment">//保存原有的地址，把原有保存这个地址的指针置成nullptr</span></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="unique_ptr">unique_ptr</h3>
<p>  auto_ptr提供了自动管理内存的一个方法，但是它和对象的耦合性太紧了，如果多方操作对象很容易出问题，所以推出了unique_ptr。unique_ptr是专属所有权，所以被unique_ptr管理的内存，只能被一个对象持有，不支持复制(参数传递)和赋值(=)操作。</p>
<p>  移动语义：虽然unique_ptr禁止了拷贝语义，但有时候我们也需要能够转移所有权，于是提供了移动语义，即可以使用std::move()进行所有权的转移。</p>
<p><img
src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/unique_ptr.png" /></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 在这个范围之外，unique_ptr被释放</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">auto</span> i = <span class="built_in">unique_ptr</span>&lt;<span class="type">int</span>&gt;(<span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>));</span><br><span class="line">		<span class="comment">//i在栈区，指向一个堆区分配的区域</span></span><br><span class="line">		cout &lt;&lt; *i &lt;&lt; endl;</span><br><span class="line">	&#125;<span class="comment">//大括号结束后，i自动释放，指向的堆区内部也自动delete</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// unique_ptr</span></span><br><span class="line">	<span class="keyword">auto</span> w = std::<span class="built_in">make_unique</span>&lt;<span class="type">int</span>&gt;(<span class="number">10</span>);</span><br><span class="line">	cout &lt;&lt; *(w.<span class="built_in">get</span>()) &lt;&lt; endl;                          <span class="comment">// 10。get()方法返回的就是指针</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//auto w2 = w;  // 编译错误！！如果想要把 w 复制给 w2, 是不可以的。</span></span><br><span class="line">	<span class="comment">//  因为复制从语义上来说，两个对象将共享同一块内存。</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// unique_ptr 只支持移动语义, 即如下</span></span><br><span class="line">	<span class="keyword">auto</span> w2 = std::<span class="built_in">move</span>(w); <span class="comment">// w2 获得内存所有权，w 此时等于 nullptr</span></span><br><span class="line">	cout &lt;&lt; ((w.<span class="built_in">get</span>() != <span class="literal">nullptr</span>) ? (*w.<span class="built_in">get</span>()) : <span class="number">-1</span>) &lt;&lt; endl;       <span class="comment">// -1</span></span><br><span class="line">	cout &lt;&lt; ((w2.<span class="built_in">get</span>() != <span class="literal">nullptr</span>) ? (*w2.<span class="built_in">get</span>()) : <span class="number">-1</span>) &lt;&lt; endl;   <span class="comment">// 10</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="shared_ptr和weak_ptr">shared_ptr和weak_ptr</h3>
<p>  unique_ptr在同一时间只能由一个指针持有对象，使用上具有局限性。所以推出了shared_ptr。</p>
<p>  shared_ptr通过一个引用计数共享一个对象，在这个机制上提供了可以共享所有权的智能指针，当然引用计数需要额外的开销。当引用计数为0时，说明该对象没有被使用，可以进行析构。</p>
<p><img
src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/share_ptr.png" /></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// shared_ptr </span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//shared_ptr 代表的是共享所有权，即多个 shared_ptr 可以共享同一块内存。</span></span><br><span class="line">		<span class="keyword">auto</span> wA = <span class="built_in">shared_ptr</span>&lt;<span class="type">int</span>&gt;(<span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">20</span>));</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">auto</span> wA2 = wA;          <span class="comment">//shared_ptr可以赋值，同时指向对象</span></span><br><span class="line">			cout &lt;&lt; ((wA2.<span class="built_in">get</span>() != <span class="literal">nullptr</span>) ? (*wA2.<span class="built_in">get</span>()) : <span class="number">-1</span>) &lt;&lt; endl;       <span class="comment">// 20</span></span><br><span class="line">			cout &lt;&lt; ((wA.<span class="built_in">get</span>() != <span class="literal">nullptr</span>) ? (*wA.<span class="built_in">get</span>()) : <span class="number">-1</span>) &lt;&lt; endl;         <span class="comment">// 20</span></span><br><span class="line">			cout &lt;&lt; wA2.<span class="built_in">use_count</span>() &lt;&lt; endl;              <span class="comment">// 打印引用计数 2</span></span><br><span class="line">			cout &lt;&lt; wA.<span class="built_in">use_count</span>() &lt;&lt; endl;               <span class="comment">// 打印引用计数 2</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//cout &lt;&lt; wA2.use_count() &lt;&lt; endl;                                               </span></span><br><span class="line">		cout &lt;&lt; wA.<span class="built_in">use_count</span>() &lt;&lt; endl;                  <span class="comment">// wA2消亡，引用计数为1</span></span><br><span class="line">		cout &lt;&lt; ((wA.<span class="built_in">get</span>() != <span class="literal">nullptr</span>) ? (*wA.<span class="built_in">get</span>()) : <span class="number">-1</span>) &lt;&lt; endl;        <span class="comment">// 20</span></span><br><span class="line">		<span class="comment">//shared_ptr 内部是利用引用计数来实现内存的自动管理，每当复制一个 shared_ptr，</span></span><br><span class="line">		<span class="comment">//	引用计数会 + 1。当一个 shared_ptr 离开作用域时，引用计数会 - 1。</span></span><br><span class="line">		<span class="comment">//	当引用计数为 0 的时候，则 delete 内存。</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//跳出作用域，wA也消亡，同时内存会被释放</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// shared_ptr也支持move()语法</span></span><br><span class="line">	<span class="keyword">auto</span> wAA = std::<span class="built_in">make_shared</span>&lt;<span class="type">int</span>&gt;(<span class="number">30</span>);</span><br><span class="line">	<span class="keyword">auto</span> wAA2 = std::<span class="built_in">move</span>(wAA); <span class="comment">// 此时 wAA 等于 nullptr，wAA2.use_count() 等于 1</span></span><br><span class="line">	cout &lt;&lt; ((wAA.<span class="built_in">get</span>() != <span class="literal">nullptr</span>) ? (*wAA.<span class="built_in">get</span>()) : <span class="number">-1</span>) &lt;&lt; endl;          <span class="comment">// -1</span></span><br><span class="line">	cout &lt;&lt; ((wAA2.<span class="built_in">get</span>() != <span class="literal">nullptr</span>) ? (*wAA2.<span class="built_in">get</span>()) : <span class="number">-1</span>) &lt;&lt; endl;      <span class="comment">// 30</span></span><br><span class="line">	cout &lt;&lt; wAA.<span class="built_in">use_count</span>() &lt;&lt; endl;              <span class="comment">// 0</span></span><br><span class="line">	cout &lt;&lt; wAA2.<span class="built_in">use_count</span>() &lt;&lt; endl;             <span class="comment">// 1</span></span><br><span class="line">	<span class="comment">//将 wAA 对象 move 给 wAA2，意味着 wAA 放弃了对内存的所有权和管理，此时 wAA对象等于 nullptr。</span></span><br><span class="line">	<span class="comment">//而 wAA2 获得了对象所有权，但因为此时 wAA 已不再持有对象，因此 wAA2 的引用计数为 1。</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  引用计数也会带来一个严重问题：循环引用。即存在一种情况，有两个对象，对象A内部有shared_ptr指针指向B，B中也有shared_ptr指向A，当A使用完毕打算回收内存空间时，会检查内部变量pA,此时会去尝试清理B，但B中也有pB指向A，此时循环引用会导致堆里面的内存无法正常回收，造成内存泄漏。</p>
<p><img
src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/sharef_ptr%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8.png" /></p>
<p>  为了避免这种循环引用，标准库提供了weak_ptr，被用来和shared_ptr共同工作，用一种观察者模式工作，获得资源的观测权，像旁观者那样观测资源的使用情况。比如两个对象A和B互为关联，但B只是想获取A的一些属性，并不需要A的所有权，那么可以用weak_ptr，指向A但是并不拿A的引用计数。因为B没有A的引用计数，那么A销毁的时候，B也可以同时销毁。这就是观察者模式，观察者意味着weak_ptr只对shared_ptr进行引用，而不改变其引用计数，当被观察的shared_ptr失效后，相应的weak_ptr也失效。</p>
<p><img
src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/weak_ptr.png" /></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">B</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">	shared_ptr&lt;B&gt; pb;</span><br><span class="line">	~<span class="built_in">A</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">B</span> &#123;</span><br><span class="line">	shared_ptr&lt;A&gt; pa;</span><br><span class="line">	~<span class="built_in">B</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;~B()&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pa 和 pb 存在着循环引用，根据 shared_ptr 引用计数的原理，pa 和 pb 都无法被正常的释放。</span></span><br><span class="line"><span class="comment">// weak_ptr 是为了解决 shared_ptr 双向引用的问题。</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BW</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">AW</span></span><br><span class="line">&#123;</span><br><span class="line">	shared_ptr&lt;BW&gt; pb;</span><br><span class="line">	~<span class="built_in">AW</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;~AW()&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BW</span></span><br><span class="line">&#123;</span><br><span class="line">	weak_ptr&lt;AW&gt; pa;</span><br><span class="line">	~<span class="built_in">BW</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;~BW()&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Test shared_ptr and shared_ptr:  &quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="function">shared_ptr&lt;A&gt; <span class="title">tA</span><span class="params">(<span class="keyword">new</span> A())</span></span>;                                               </span><br><span class="line">	<span class="function">shared_ptr&lt;B&gt; <span class="title">tB</span><span class="params">(<span class="keyword">new</span> B())</span></span>;                                                </span><br><span class="line">	cout &lt;&lt; tA.<span class="built_in">use_count</span>() &lt;&lt; endl;  <span class="comment">//1</span></span><br><span class="line">	cout &lt;&lt; tB.<span class="built_in">use_count</span>() &lt;&lt; endl;  <span class="comment">//1</span></span><br><span class="line">	tA-&gt;pb = tB;</span><br><span class="line">	tB-&gt;pa = tA;</span><br><span class="line">	cout &lt;&lt; tA.<span class="built_in">use_count</span>() &lt;&lt; endl;     <span class="comment">// 2</span></span><br><span class="line">	cout &lt;&lt; tB.<span class="built_in">use_count</span>() &lt;&lt; endl;     <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Test2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Test weak_ptr and shared_ptr:  &quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="function">shared_ptr&lt;AW&gt; <span class="title">tA</span><span class="params">(<span class="keyword">new</span> AW())</span></span>;</span><br><span class="line">	<span class="function">shared_ptr&lt;BW&gt; <span class="title">tB</span><span class="params">(<span class="keyword">new</span> BW())</span></span>;</span><br><span class="line">	cout &lt;&lt; tA.<span class="built_in">use_count</span>() &lt;&lt; endl;    <span class="comment">// 1</span></span><br><span class="line">	cout &lt;&lt; tB.<span class="built_in">use_count</span>() &lt;&lt; endl;    <span class="comment">// 1</span></span><br><span class="line">	tA-&gt;pb = tB;</span><br><span class="line">	tB-&gt;pa = tA;   <span class="comment">//tB-&gt;pa是weak_ptr，指向tA但不会对tA的引用计数产生影响</span></span><br><span class="line">	cout &lt;&lt; tA.<span class="built_in">use_count</span>() &lt;&lt; endl;    <span class="comment">// 1</span></span><br><span class="line">	cout &lt;&lt; tB.<span class="built_in">use_count</span>() &lt;&lt; endl;    <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">Test</span>();</span><br><span class="line">	<span class="built_in">Test2</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">上面代码输出：</span><br><span class="line"><span class="keyword">Test </span>shared_ptr and shared_ptr:</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line"><span class="keyword">Test </span>weak_ptr and shared_ptr:</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">~AW()</span><br><span class="line">~BW()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">可以看到weak_ptr不会对引用计数产生影响，而产生循环引用的地方不会发生析构</span><br></pre></td></tr></table></figure>
<h2 id="引用">引用</h2>
<p>  引用在本质上仍然是是指针，只不过自身比较特殊，是<strong>不允许修改的指针</strong>。(我们常说java中没有指针，其实java中的指针就是引用)</p>
<p>在指针使用上，我们会遇到一些问题：</p>
<ol type="1">
<li>空指针</li>
<li>野指针（没有初始化）</li>
<li>不知不觉改变了指针的值，我们却仍然在使用</li>
</ol>
<p>使用引用，我们可以避免这些问题：</p>
<ol type="1">
<li>不存在空引用；</li>
<li>引用必须被初始化；</li>
<li>一个引用永远指向它初始化的那个对象，不允许被修改。</li>
</ol>
<p> </p>
<ul>
<li>引用的基本使用：可以认为是指定变量的别名，使用时可以认为是变量本身：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x1 = <span class="number">1</span>,x2 = <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span>&amp; rx = x1;	<span class="comment">//定义引用，可以认为rx是x1的别名</span></span><br><span class="line">rx = <span class="number">2</span>;</span><br><span class="line">cout&lt;&lt;x1&lt;&lt;rx&lt;&lt;endl;	<span class="comment">//x1和rx都是2</span></span><br><span class="line">rx = x2;		<span class="comment">//引用一旦被初始化就不能更改，所以这里不是赋值rx为x2，而是x1=x2(别名直接替换)</span></span><br><span class="line">cout&lt;&lt;x1&lt;&lt;x2&lt;&lt;endl;		<span class="comment">//都是3</span></span><br></pre></td></tr></table></figure>
<ul>
<li>当我们在函数中需要操作形参并且返回时一并返回，这时候我们就可以传递引用。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编写一个函数，输入两个int型变量a,b</span></span><br><span class="line"><span class="comment">// 实现在函数内部将a,b的值进行交换。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span>&amp; a, <span class="type">int</span>&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> tmp = a;</span><br><span class="line">	a = b;</span><br><span class="line">	b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap2</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span>* b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> tmp = *a;</span><br><span class="line">	*a = *b;</span><br><span class="line">	*b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 交换变量的测试</span></span><br><span class="line">	<span class="type">int</span> a = <span class="number">3</span>, b = <span class="number">4</span>;</span><br><span class="line">	<span class="built_in">swap</span>(a, b);</span><br><span class="line">	<span class="built_in">assert</span>(a == <span class="number">4</span> &amp;&amp; b == <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">	a = <span class="number">3</span>, b = <span class="number">4</span>;</span><br><span class="line">	<span class="built_in">swap2</span>(&amp;a, &amp;b);</span><br><span class="line">	<span class="built_in">assert</span>(a == <span class="number">4</span> &amp;&amp; b == <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> </p>
<p>  C++为什么要同时存在指针和引用？在java语言中我们直接使用引用，传统C语言我们都使用指针。C++可以认为是夹在C和java之间的一种。之所以要使用引用是为了支持函数的运算符重载。而C++为了兼容C语言不能摒弃指针。</p>
<p>  在函数传递参数的时候，对于内置基础类型（int、double等）而言，在函数中传递值更高效(pass
by value)；在面向对象中自定义类型而言，在函数中传递const引用更高效(pass
by reference to const)。</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++基础</tag>
      </tags>
  </entry>
  <entry>
    <title>类型转换</title>
    <url>/2025/C/C++/%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h1 id="c语言的类型转换">C语言的类型转换</h1>
<ul>
<li>隐式类型转换：<kbd>double f =
1/2;</kbd>中，虽然用double变量来接收结果，但表达式运算全是整型数，会转换为整形数的除法，运算结果为0,转换为double后为0.0；<kbd>double
f =
1.0/2;</kbd>中，由于1.0是浮点型，所以2会发生隐式类型转换变为2.0，最终结果是0.5;</li>
<li>显示类型转换：(类型说明符)(表达式)，比如<kbd>double f =
double(1)/double(2);</kbd></li>
</ul>
<p>  </p>
<p>C语言的类型转换很灵活，但存在一些问题：</p>
<ol type="1">
<li>任意类型之间都可以转换，编译器无法判断其准确性；</li>
<li>难于定位，在源码中无法快速定位转换位置；</li>
</ol>
<p> </p>
<h1 id="c的类型转换">C++的类型转换</h1>
<h2 id="const_case">const_case</h2>
<p>  用于转换指针或引用，去掉类型的const属性。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//const_case使用</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// C++ const_cast</span></span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="comment">//int* pA = &amp;a;  //const int*类型不能用于初始化int*类型实体</span></span><br><span class="line">	<span class="type">int</span>* pA = <span class="built_in">const_cast</span>&lt;<span class="type">int</span>*&gt;(&amp;a);</span><br><span class="line">	*pA = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//需要注意，虽然我们用指针把a的值改变了，实际上也确实改变了</span></span><br><span class="line"><span class="comment">//但假如我们要使用a的值，比如cout一下，那么a原来的值（10）会直接赋值到行为上</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;a&lt;&lt;endl；输出的结果是10，而不是100</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> </p>
<h2 id="reinterpret_cast">reinterpret_cast</h2>
<p>  这是一种很危险的类型转换。既不检查指向的内容，也不检查指针类型本身，只是做了类型的重新解释。reinterpret_cast需要保证转换前后的类型所占用的内存大小一致，否则将引发编译时错误。</p>
<p>  虽然危险，但工程中的使用常见还是比较广泛，比如void*和其他类型的转换，遇到这种场景最好使用reinterpret_cast而不是C语言的强制类型转换，因为C语言的强制转换不做任何的检查。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//reinterpret_cast使用</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// C++ reinterpret_cast</span></span><br><span class="line">	<span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(*FuncPtr)</span> <span class="params">()</span></span>; <span class="comment">//定义函数指针，返回值void，参数也是void</span></span><br><span class="line"></span><br><span class="line">	FuncPtr funcPtr;</span><br><span class="line">	<span class="comment">//funcPtr = &amp;Test;  //两个函数模型不匹配，不能赋值</span></span><br><span class="line">	funcPtr = <span class="built_in">reinterpret_cast</span>&lt;FuncPtr&gt;(&amp;Test);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> </p>
<h2 id="static_case和dynamic_cast">static_case和dynamic_cast</h2>
<p>  用于基本的类型转换(这种方式就是类似于C语言的类型转换方式)。也可以用于有继承关系类对象和类指针之间的转换，但需要由程序员来确保转换是安全的，它不会产生动态转换的类型安全检查的开销，因为类型检查不是编译器能检测出来的，必须要等到运行时才能动态检查。</p>
<p>  dynamic_cast是为了弥补static_cast的不足，可以做类型的检查。它只能用于含有虚函数的类，必须用于多态体系中，用于类层次间的向上和向下转化；向下转化时，如果是非法的对于指针返回NULL。(向上转化：子类转换为父类；向下转化：父类转化为子类。子类转化为父类比较安全，但父类转化为子类不安全，因为子类一定有父类的属性，但父类未必有子类的属性)。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//static_cast 和 dynamic_cast</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Base</span>() : _i(<span class="number">0</span>) &#123; ; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">T</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Base:T&quot;</span> &lt;&lt; _i &lt;&lt; endl; &#125;  <span class="comment">//必须有虚函数，dynamic_cast才做检查</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">int</span> _i;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Derived</span>() :_j(<span class="number">1</span>) &#123; ; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">T</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Derived:T&quot;</span> &lt;&lt; _j &lt;&lt; endl; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">int</span> _j;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// static_cast</span></span><br><span class="line">	<span class="type">int</span> i = <span class="number">6</span>;</span><br><span class="line">	<span class="type">double</span> d = <span class="built_in">static_cast</span>&lt;<span class="type">double</span>&gt;(i);  <span class="comment">//基本类型转换  int -&gt; double</span></span><br><span class="line">	<span class="type">double</span> d2 = <span class="number">5.6</span>;</span><br><span class="line">	<span class="type">int</span> i2 = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(d2);  <span class="comment">//基本类型转换  double -&gt; int</span></span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> ii = <span class="number">5</span>;</span><br><span class="line">	<span class="type">double</span> dd = <span class="built_in">static_cast</span>&lt;<span class="type">double</span>&gt;(ii);</span><br><span class="line">	<span class="type">double</span> dd2 = <span class="number">5.6</span>;</span><br><span class="line">	<span class="type">int</span> ii2 = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(dd2);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// static_cast与dynamic_cast</span></span><br><span class="line"></span><br><span class="line">	Base cb;</span><br><span class="line">	Derived cd;</span><br><span class="line">	Base* pcb;</span><br><span class="line">	Derived* pcd;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 子类--》 父类</span></span><br><span class="line">	<span class="comment">// 这个是安全的</span></span><br><span class="line">	pcb = <span class="built_in">static_cast</span>&lt;Base*&gt;(&amp;cd);</span><br><span class="line">	<span class="keyword">if</span> (pcb == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;unsafe static_cast from Derived to Base&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	pcb = <span class="built_in">dynamic_cast</span>&lt;Base*&gt;(&amp;cd);</span><br><span class="line">	<span class="keyword">if</span> (pcb == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;unsafe dynamic_cast from Derived to Base&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 父类--》 子类</span></span><br><span class="line">	<span class="comment">// 这个有风险，dynamic_cast会做检查导致失败</span></span><br><span class="line">	pcd = <span class="built_in">static_cast</span>&lt;Derived*&gt;(&amp;cb);</span><br><span class="line">	<span class="keyword">if</span> (pcd == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;unsafe static_cast from Base to Derived&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	pcd = <span class="built_in">dynamic_cast</span>&lt;Derived*&gt;(&amp;cb);</span><br><span class="line">	<span class="keyword">if</span> (pcd== <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;unsafe dynamic_cast from Base to Derived&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img
src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2.png" /></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++基础</tag>
      </tags>
  </entry>
  <entry>
    <title>文件操作</title>
    <url>/2025/C/C++/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>  计算机程序的输入流起点和输出流的终点都可以是磁盘文件。C++把每个文件都看成是一个有序的字节序列，每个文件都以文件结束标志结束。</p>
<p>  按照文件中数据的组织形式可以把文件分为：</p>
<ol type="1">
<li>文本文件：文件中信息形式为ASCII码文件，每个字符占用一个字节；</li>
<li>二进制文件：文件中信息的形式与其在内存中的形式相同；</li>
</ol>
<p>  </p>
<p>文件操作步骤：</p>
<ol type="1">
<li>打开文件open；</li>
<li>检查打开是否成功；</li>
<li>读或写read\write；</li>
<li>检查是否读完EOF（end of file）；</li>
<li>使用完文件后关闭文件close;</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//把输入的字符信息写入文件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    fstream fout;</span><br><span class="line">    fout.<span class="built_in">open</span>(<span class="string">"test.txt"</span>, ios::app);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    //可以直接这么写，程序会默认打开</span></span><br><span class="line"><span class="comment">    fstream fout("test.txt");   </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(fout.<span class="built_in">fail</span>())  <span class="comment">//也可以判断fout是否非空：if(!fout)</span></span><br><span class="line">    {</span><br><span class="line">        cout &lt;&lt; <span class="string">"open fail"</span> &lt;&lt; endl;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; a)</span><br><span class="line">    {</span><br><span class="line">        fout &lt;&lt; <span class="string">"The numbers are:"</span> &lt;&lt; a &lt;&lt; endl; <span class="comment">//用定义的fout输出到文件</span></span><br><span class="line">        index++;</span><br><span class="line">        <span class="keyword">if</span>(index == <span class="number">5</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    fout.<span class="built_in">close</span>();  <span class="comment">//关闭文件</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>  </p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">文件打开方式</th>
<th style="text-align: left;">行为</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">ios::in</td>
<td style="text-align: left;">ifstream的默认模式，打开文件进行读操作</td>
</tr>
<tr class="even">
<td style="text-align: left;">ios::out</td>
<td style="text-align: left;">ofstream的默认方式，打开文件进行写操作</td>
</tr>
<tr class="odd">
<td style="text-align: left;">ios::ate</td>
<td style="text-align: left;">打开一个已经有输入或输出文件并查找到文件尾</td>
</tr>
<tr class="even">
<td style="text-align: left;">ios::app</td>
<td style="text-align: left;">打开文件以便在文件的尾部添加数据</td>
</tr>
<tr class="odd">
<td style="text-align: left;">ios::nocreate</td>
<td style="text-align: left;">如果文件不存在，则打开操作失败</td>
</tr>
<tr class="even">
<td style="text-align: left;">ios::trunc</td>
<td style="text-align: left;">如果文件存在，清除文件原有内容(默认)</td>
</tr>
<tr class="odd">
<td style="text-align: left;">ios::binary</td>
<td style="text-align: left;">以二进制方式打开</td>
</tr>
</tbody>
</table>
<p>  </p>
<p>  文件的默认打开方式是ASCII，如果需要以二进制方式打开，需要设置ios::binary：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//二进制的方式拷贝一个文件：</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> bufferLen = <span class="number">2048</span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">CopyFile</span><span class="params">(<span class="type">const</span> string&amp; src, <span class="type">const</span> string&amp; dst)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="comment">// 打开源文件和目标文件</span></span><br><span class="line">	<span class="comment">// 源文件以二进制读的方式打开</span></span><br><span class="line">	<span class="comment">// 目标文件以二进制写的方式打开</span></span><br><span class="line">	<span class="function">ifstream <span class="title">in</span><span class="params">(src.c_str(), ios::in | ios::binary)</span></span>;</span><br><span class="line">	<span class="function">ofstream <span class="title">out</span><span class="params">(dst.c_str(), ios::out | ios::binary | ios::trunc)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 判断文件打开是否成功，失败返回false</span></span><br><span class="line">	<span class="keyword">if</span> (!in || !out)</span><br><span class="line">	{</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 从源文件中读取数据，写到目标文件中</span></span><br><span class="line">	<span class="comment">// 通过读取源文件的EOF来判断读写是否结束</span></span><br><span class="line">	<span class="comment">// 分块读取，不要一下全读进来，防止缓冲区不够用</span></span><br><span class="line">	<span class="type">char</span> temp[bufferLen];</span><br><span class="line">	<span class="keyword">while</span> (!in.<span class="built_in">eof</span>())</span><br><span class="line">	{</span><br><span class="line">		in.<span class="built_in">read</span>(temp, bufferLen);</span><br><span class="line">		streamsize count = in.<span class="built_in">gcount</span>(); <span class="comment">//实际读的大小</span></span><br><span class="line">		out.<span class="built_in">write</span>(temp, count);</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 关闭源文件和目标文件</span></span><br><span class="line">	<span class="comment">// 如果不关闭会导致资源泄露</span></span><br><span class="line">	in.<span class="built_in">close</span>();</span><br><span class="line">	out.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">CopyFile</span>(<span class="string">"AA.mp3"</span>, <span class="string">"BB.mp3"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++基础</tag>
      </tags>
  </entry>
  <entry>
    <title>编程思想——泛型编程</title>
    <url>/2025/C/C++/%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<p>  如果说面向对象是一种通过间接层来调用函数以换取一种抽象（创建一个接口类），那么泛型编程则是更直接的抽象，它不会因为间接层而损失效率。不同于面向对象的动态期多态，泛型编程是一种静态期多态，通过编译器生成最直接的代码。泛型编程可以将算法与特定类型、结构剥离，尽可能复用代码。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过函数的方法实现输出最大值</span></span><br><span class="line"><span class="comment">//需要针对不同的输入参数写不同的代码</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a: b;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">max</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a: b;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">//调用函数</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">max</span>(<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">max</span>(<span class="number">1.3</span>, <span class="number">2.4</span>) &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过泛型编程的方法实现输出两数的最大值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 模板函数</span></span><br><span class="line"><span class="comment">//class不是面向对象的class，这个class表示T是个泛型</span></span><br><span class="line"><span class="comment">//T可以表示任何类型，具体代表哪个数据类型取决于编译期代码生成的是什么类型</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;  </span></span><br><span class="line"><span class="function">T <span class="title">max</span><span class="params">(T a, T b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="keyword">return</span> a &gt; b ? a:b;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">//调用函数</span></span><br><span class="line">    <span class="comment">//编译期时，编译器自动生成不同类型的方法</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">max</span>(<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">max</span>(<span class="number">1.3</span>, <span class="number">2.4</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">max</span>(<span class="string">'a'</span>, <span class="string">'b'</span>) &lt;&lt; endl;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p> </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">泛型编程的主要工作不是程序员，而是编译器</span></span><br><span class="line"><span class="comment">编译器会在编译期间根据代码自动生成方法</span></span><br><span class="line"><span class="comment">由于大量工作是编译器操作，可能通用的泛型函数并不能满足我们的需求</span></span><br><span class="line"><span class="comment">所以我们通常还需要“特化”处理</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//特化</span></span><br><span class="line"><span class="comment">//如果是字符串的话特殊处理</span></span><br><span class="line"><span class="comment">//其余的输入可以让输入类型不相同，返回值统一为int</span></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="function"><span class="type">char</span>* <span class="title">max</span><span class="params">(<span class="type">char</span>* a, <span class="type">char</span>* b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="keyword">return</span> (<span class="built_in">strcmp</span>(a, b) &gt; <span class="number">0</span> ?  (a) : (b));</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T1, <span class="keyword">class</span> T2&gt;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(T1 a, T2 b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(a &gt; b ? a : b);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">//调用函数</span></span><br><span class="line">    <span class="type">char</span>* s1 = <span class="string">"hello"</span>;</span><br><span class="line">    <span class="type">char</span>* s2 = <span class="string">"world"</span>;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">max</span>(s1, s2) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">max</span>(<span class="number">2</span>, <span class="number">4.5</span>) &lt;&lt; endl;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>  泛型编程是把算法和具体的数据结构分开了，我们不需要考虑类型本身是什么，直接用一套逻辑把所有的类型都涵盖了，如果需要针对某些特殊类型做处理，我们就进行单独的“特化”。这里比较复杂的操作是编译器的推理过程，程序员所做的工作无非是把该定义好的类型通知编译器，让编译器帮助我们做处理。</p>
<p> </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">泛型编程的思想可以做一些算法优化，比如下面的等差数列求和</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1+2+3...+100 ==&gt; n*(n+1)/2 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这里用泛型不是用泛型编程可以传递广泛类型的属性，这里直接定义了int</span></span><br><span class="line"><span class="comment">//这里是借用泛型编程的另一个特征：编译期推理，让程序自动生成代码</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> n&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Sum</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">// 递推的思路，求前n个数的和可以表示为前(n-1)个数的和+n</span></span><br><span class="line"><span class="comment">// Sum(n) = Sum(n-1)+n</span></span><br><span class="line"><span class="comment">// 这里声明一个enum的成员，内部的枚举值是N，N的计算方法是递归求和</span></span><br><span class="line"><span class="comment">// 利用泛型编程的自动推理完成编译期计算</span></span><br><span class="line">	<span class="keyword">enum</span> <span class="title class_">Value</span> {</span><br><span class="line">        N = Sum&lt;n<span class="number">-1</span>&gt;::N+n</span><br><span class="line">	};</span><br><span class="line">};</span><br><span class="line"><span class="comment">//下面这个就是递推的基准点，n=1的特化</span></span><br><span class="line"><span class="comment">// 如果不设置，那么就会无穷递归</span></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Sum</span>&lt;<span class="number">1</span>&gt;</span><br><span class="line">{</span><br><span class="line">	<span class="keyword">enum</span> <span class="title class_">Value</span> {N = <span class="number">1</span>};    <span class="comment">// n=1</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">//这里只需要输出结果就行，运算过程中在编译期就完成了</span></span><br><span class="line">    cout &lt;&lt; Sum&lt;<span class="number">100</span>&gt;::N &lt;&lt; endl; <span class="comment">//计算1+2+……+99+100</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p> </p>
<p>  <strong>模板编程的难点很大程度上在于对编译器的理解，我们需要直到怎么帮助编译器提供需要生成代码的信息。</strong></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++基础</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义结构</title>
    <url>/2022/C/C++/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="枚举">枚举</h1>
<p>使用#define和const可以创建符号常量，使用enum不仅可以创建符号常量，还能定义新的数据类型。</p>
<p>枚举类型的声明和定义：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明，创建一个数据类型，还没有分配存储空间</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">wT</span>&#123;</span><br><span class="line">    Monday,</span><br><span class="line">    Tuseday,</span><br><span class="line">    Wednesday,</span><br><span class="line">    Thursday,</span><br><span class="line">    Firday,</span><br><span class="line">    Saturday,</span><br><span class="line">    Sunday</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义，创建一个对象</span></span><br><span class="line">wT weekday;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">enum</span> <span class="title class_">wT</span>&#123;Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday&#125;; <span class="comment">// 声明wT类型</span></span><br><span class="line">	wT weekday;</span><br><span class="line">	weekday = Monday;</span><br><span class="line">	weekday = Tuesday;</span><br><span class="line">	<span class="comment">//weekday = 1;             // 错误 不能直接给int值，只能赋值成wT定义好的类型值</span></span><br><span class="line">    <span class="comment">//可以写成weekday = wT(1),但是涉及类型转换的写法不推荐</span></span><br><span class="line">	cout &lt;&lt; weekday &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Monday = 0;             // 错误 类型值不能做左值，不是有存储空间的变量</span></span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> a = Wednesday; <span class="comment">//内部有类型转换</span></span><br><span class="line">	cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用细节：</p>
<ul>
<li>枚举值不能做左值；</li>
<li>非枚举变量不可以赋值给枚举变量；</li>
<li>枚举变量可以赋值给非枚举变量；</li>
</ul>
<h1 id="结构体和联合体">结构体和联合体</h1>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结构体</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">6</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    Score s;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//联合体</span></span><br><span class="line"><span class="keyword">union</span> <span class="title class_">Score</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> sc;</span><br><span class="line">    <span class="type">char</span> level;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="存储结构与结构体数据对齐">存储结构与结构体数据对齐</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">union</span> <span class="title class_">Score</span> </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">double</span> ds;    <span class="comment">//8字节</span></span><br><span class="line">		<span class="type">char</span> level;   <span class="comment">//1字节</span></span><br><span class="line">	&#125;;                  <span class="comment">//按照最大值，占用8字节</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">Student</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">char</span> name[<span class="number">6</span>];       <span class="comment">//6字节                           </span></span><br><span class="line">		<span class="type">int</span> age;            <span class="comment">//32位环境 4字节</span></span><br><span class="line">		Score s;            <span class="comment">//8字节对齐</span></span><br><span class="line">	&#125;;                      <span class="comment">//整体按照8字节对齐，整体占用24字节</span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="built_in">sizeof</span>(Score) &lt;&lt; endl;      <span class="comment">// 8</span></span><br><span class="line">	</span><br><span class="line">	Student s1;</span><br><span class="line">    <span class="comment">//注意s1.name=“lili”写法是错误的，编译不过</span></span><br><span class="line">    <span class="comment">//数组名不能当左值</span></span><br><span class="line">	<span class="built_in">strcpy_s</span>(s1.name, <span class="string">&quot;lili&quot;</span>);</span><br><span class="line">	s1.age = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//联合体占用同一块内存空间</span></span><br><span class="line">	s1.s.ds = <span class="number">95.5</span>;</span><br><span class="line">	s1.s.level = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="built_in">sizeof</span>(Student) &lt;&lt; endl;    <span class="comment">// 24     </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>  联合体内部公用一块内存空间，所以内部占用空间按照最大的数据类型来存储，联合体适合内存受限的场景，比如嵌入式系统。也因为这个原因，同一时间只有一个成员有效，写入一个成员时会覆盖其他成员。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">s1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> x;</span><br><span class="line">    <span class="type">int</span> z;</span><br><span class="line">    <span class="type">short</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sizeof</span>(s1) = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">s2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> x;</span><br><span class="line">    <span class="type">short</span> y;</span><br><span class="line">    <span class="type">int</span> z;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sizeof</span>(s2) = <span class="number">8</span>;</span><br></pre></td></tr></table></figure>
<p><img
src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/%E7%BB%93%E6%9E%84%E4%BD%93%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80.png" /></p>
<ul>
<li>结构体的每个成员在内存中的起始地址必须满足其类型的对其要求，32位系统要求如下：
<ul>
<li>char：任何地址</li>
<li>short：偶数倍地址</li>
<li>int：4的整数倍、</li>
<li>float：4的整数倍</li>
<li>double：8的整数倍</li>
<li>指针：4的整数倍</li>
</ul></li>
</ul>
<p>  可以看到，如果结构体中存在一个double，则会按照8字节来对齐。然后所有成员按照顺序依次分配内存，编译器会在成员之间插入填充字节，确保下一个成员满足对齐要求。如果存在结构体嵌套，也按照这个对齐规则，所有结构体中的最大成员值来进行内存对齐。结构体的总大小波许是最大成员对齐值的整数倍。</p>
<p>  程序是可以修改默认编译选项的，修改结构体内存分配，如果设置为1，那就是连续的内存分配布局：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">Visual C++：</span><br><span class="line"><span class="selector-id">#pragma</span> <span class="built_in">pack</span>(n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g++:</span><br><span class="line"><span class="built_in">__attribute__</span>(<span class="built_in">aligned</span>(n))</span><br><span class="line"><span class="built_in">__attribute__</span>(__packed__)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++基础</tag>
      </tags>
  </entry>
  <entry>
    <title>补码</title>
    <url>/2025/C/C++/%E8%A1%A5%E7%A0%81/</url>
    <content><![CDATA[<h1 id="机器数和真值">机器数和真值</h1>
<p>机器数：一个数在计算机中的二进制表示形式，叫做这个数的机器数。</p>
<p>机器数是带符号的，在计算机中用一个数的最高位存放符号，正数为0，负数为1；</p>
<p>比如：十进制数+3，就是00000000000000000000000000000011；十进制数-3，就是10000000000000000000000000000011；（int值占4字节）；这个例子只是整型数，浮点数有其他表达方式。</p>
<p> </p>
<p>真值：真正的数学意义上的数值。因为机器数第一位是符号位，所以机器数的形式就不等于真正的数值。</p>
<p> </p>
<h1 id="补码">补码</h1>
<p>按照上面的机器数的表示方法有一个问题，第一位用作符号位的话，这个数的表示范围会变小。所以计算机中存储用的并不是机器数，而是补码。</p>
<p> </p>
<h2 id="无符号数的编码">无符号数的编码</h2>
<p>用一个函数<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="5.496ex" height="1.902ex" role="img" focusable="false" viewBox="0 -683 2429.3 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mn" transform="translate(759,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="msub" transform="translate(1259,0)"><g data-mml-node="mi"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mi" transform="translate(614,-150) scale(0.707)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g></g></g></svg></mjx-container></span>（Binary to
Unsigned的缩写，长度为w）来表示：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.777ex;" xmlns="http://www.w3.org/2000/svg" width="21.616ex" height="3.422ex" role="img" focusable="false" viewBox="0 -1169 9554.4 1512.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mn" transform="translate(759,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="msub" transform="translate(1259,0)"><g data-mml-node="mi"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mi" transform="translate(614,-150) scale(0.707)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g><g data-mml-node="mo" transform="translate(2429.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mover" transform="translate(2818.3,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(313.8,558) translate(-500 0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g><g data-mml-node="mo" transform="translate(3390.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(4057.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="munderover" transform="translate(5112.8,0)"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1089,477.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mo" transform="translate(716,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1494,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(1089,-285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><g data-mml-node="msub" transform="translate(7828.5,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="msup" transform="translate(8727.4,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span></p>
<p>eg:</p>
<p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="68.059ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 30081.9 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mn" transform="translate(759,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="msub" transform="translate(1259,0)"><g data-mml-node="mi"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mn" transform="translate(614,-150) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g><g data-mml-node="mo" transform="translate(2276.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(2665.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(2943.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(4943.6,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(5221.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5888.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(6944.1,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(7666.3,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(8666.6,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mo" transform="translate(9825.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(10825.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(11547.8,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(12548,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(13706.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(14707,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(15429.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(16429.4,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(17588.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(18588.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(19310.7,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(20310.9,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(21525.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(22581,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(23303.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(24303.4,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(25025.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(26025.9,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(26748.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(27748.3,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(28526.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(29581.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></span></p>
<p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="68.059ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 30081.9 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mn" transform="translate(759,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="msub" transform="translate(1259,0)"><g data-mml-node="mi"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mn" transform="translate(614,-150) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g><g data-mml-node="mo" transform="translate(2276.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(2665.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(2943.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(4943.6,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(5221.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5888.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(6944.1,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(7666.3,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(8666.6,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mo" transform="translate(9825.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(10825.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(11547.8,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(12548,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(13706.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(14707,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(15429.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(16429.4,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(17588.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(18588.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(19310.7,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(20310.9,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(21525.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(22581,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(23303.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(24303.4,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(25025.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(26025.9,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(26748.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(27748.3,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(28526.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(29581.9,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g></g></svg></mjx-container></span></p>
<p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="69.19ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 30581.9 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mn" transform="translate(759,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="msub" transform="translate(1259,0)"><g data-mml-node="mi"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mn" transform="translate(614,-150) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g><g data-mml-node="mo" transform="translate(2276.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(2665.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(2943.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1000,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(4943.6,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(5221.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5888.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(6944.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(7666.3,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(8666.6,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mo" transform="translate(9825.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(10825.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(11547.8,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(12548,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(13706.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(14707,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(15429.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(16429.4,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(17588.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(18588.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(19310.7,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(20310.9,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(21525.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(22581,0)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g><g data-mml-node="mo" transform="translate(23303.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(24303.4,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(25025.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(26025.9,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(26748.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(27748.3,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(28526.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(29581.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container></span></p>
<p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="69.19ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 30581.9 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mn" transform="translate(759,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="msub" transform="translate(1259,0)"><g data-mml-node="mi"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mn" transform="translate(614,-150) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g><g data-mml-node="mo" transform="translate(2276.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(2665.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(2943.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1000,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(4943.6,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(5221.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5888.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(6944.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(7666.3,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(8666.6,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mo" transform="translate(9825.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(10825.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(11547.8,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(12548,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(13706.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(14707,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(15429.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(16429.4,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(17588.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(18588.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(19310.7,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(20310.9,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(21525.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(22581,0)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g><g data-mml-node="mo" transform="translate(23303.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(24303.4,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(25025.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(26025.9,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(26748.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(27748.3,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(28526.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(29581.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container></span></p>
<p> </p>
<h2 id="有符号数的补码">有符号数的补码</h2>
<p>用一个函数<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="5.503ex" height="1.902ex" role="img" focusable="false" viewBox="0 -683 2432.3 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mn" transform="translate(759,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="msub" transform="translate(1259,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(617,-150) scale(0.707)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g></g></g></svg></mjx-container></span>（Binary to
Two`s-complement的缩写，长度为w）来表示：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.777ex;" xmlns="http://www.w3.org/2000/svg" width="35.33ex" height="3.422ex" role="img" focusable="false" viewBox="0 -1169 15615.8 1512.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mn" transform="translate(759,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="msub" transform="translate(1259,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(617,-150) scale(0.707)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g><g data-mml-node="mo" transform="translate(2432.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mover" transform="translate(2821.3,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(313.8,558) translate(-500 0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g><g data-mml-node="mo" transform="translate(3393.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(4060.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(5115.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(5893.8,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mo" transform="translate(716,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1494,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="msup" transform="translate(7958.8,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mo" transform="translate(716,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1494,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(10174,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="munderover" transform="translate(11174.2,0)"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1089,477.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mo" transform="translate(716,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1494,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(1089,-285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><g data-mml-node="msub" transform="translate(13889.9,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="msup" transform="translate(14788.8,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span></p>
<p>eg:</p>
<p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="69.826ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 30862.9 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mn" transform="translate(759,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="msub" transform="translate(1259,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mn" transform="translate(617,-150) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g><g data-mml-node="mo" transform="translate(2279.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(2668.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(2946.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(4946.6,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(5224.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5891.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(6947.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(7725.1,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(8447.3,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(9447.6,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mo" transform="translate(10606.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(11606.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(12328.8,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(13329,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(14487.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(15488,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(16210.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(17210.4,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(18369.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(19369.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(20091.7,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(21091.9,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(22306.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(23362,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(24084.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(25084.4,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(25806.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(26806.9,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(27529.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(28529.3,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(29307.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(30362.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></span></p>
<p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="69.826ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 30862.9 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mn" transform="translate(759,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="msub" transform="translate(1259,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mn" transform="translate(617,-150) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g><g data-mml-node="mo" transform="translate(2279.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(2668.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(2946.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(4946.6,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(5224.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5891.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(6947.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(7725.1,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(8447.3,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(9447.6,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mo" transform="translate(10606.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(11606.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(12328.8,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(13329,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(14487.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(15488,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(16210.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(17210.4,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(18369.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(19369.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(20091.7,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(21091.9,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(22306.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(23362,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(24084.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(25084.4,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(25806.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(26806.9,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(27529.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(28529.3,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(29307.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(30362.9,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g></g></svg></mjx-container></span></p>
<p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="73.346ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 32418.9 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mn" transform="translate(759,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="msub" transform="translate(1259,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mn" transform="translate(617,-150) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g><g data-mml-node="mo" transform="translate(2279.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(2668.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(2946.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1000,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(4946.6,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(5224.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5891.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(6947.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(7725.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(8447.3,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(9447.6,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mo" transform="translate(10606.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(11606.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(12328.8,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(13329,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(14487.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(15488,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(16210.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(17210.4,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(18369.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(19369.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(20091.7,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(21091.9,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(22306.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(23362,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(24140,0)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g><g data-mml-node="mo" transform="translate(24862.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(25862.4,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(26584.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(27584.9,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(28307.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(29307.3,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(30085.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(31140.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(31918.9,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g></g></svg></mjx-container></span></p>
<p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="73.346ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 32418.9 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mn" transform="translate(759,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="msub" transform="translate(1259,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mn" transform="translate(617,-150) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g><g data-mml-node="mo" transform="translate(2279.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(2668.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(2946.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1000,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(4946.6,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(5224.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5891.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(6947.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(7725.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(8447.3,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(9447.6,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mo" transform="translate(10606.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(11606.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(12328.8,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(13329,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(14487.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(15488,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(16210.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(17210.4,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(18369.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(19369.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(20091.7,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(21091.9,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(22306.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(23362,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(24140,0)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g><g data-mml-node="mo" transform="translate(24862.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(25862.4,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(26584.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(27584.9,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(28307.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(29307.3,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(30085.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(31140.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(31918.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></span></p>
<p> </p>
<h1 id="补码数值范围">补码数值范围</h1>
<table>
<colgroup>
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">数</th>
<th style="text-align: left;">8位字长</th>
<th style="text-align: left;">16位字长</th>
<th style="text-align: left;">32位字长</th>
<th style="text-align: left;">64位字长</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">UMax</td>
<td style="text-align: left;">0xFF<br>255</td>
<td style="text-align: left;">0xFFFF<br>65535</td>
<td style="text-align: left;">0xFFFFFFFF<br>4294967295</td>
<td style="text-align: left;">0xFFFFFFFFFFFFFFFF<br>18446744073709551615</td>
</tr>
<tr class="even">
<td style="text-align: left;">TMin</td>
<td style="text-align: left;">0x80<br>-128</td>
<td style="text-align: left;">0x8000<br>-32768</td>
<td style="text-align: left;">0x80000000<br>-2147483648</td>
<td style="text-align: left;">0x8000000000000000<br>-9223372036854775808</td>
</tr>
<tr class="odd">
<td style="text-align: left;">TMax</td>
<td style="text-align: left;">0x7F<br>127</td>
<td style="text-align: left;">0x7FFF<br>32767</td>
<td style="text-align: left;">0x7FFFFFFF<br>2147483647</td>
<td style="text-align: left;">0x7FFFFFFFFFFFFFFF<br>9223372036854775807</td>
</tr>
<tr class="even">
<td style="text-align: left;">-1<br>0</td>
<td style="text-align: left;">0xFF<br>0x00</td>
<td style="text-align: left;">0xFFFF<br>0x0000</td>
<td style="text-align: left;">0xFFFFFFFF<br>0X00000000</td>
<td style="text-align: left;">0xFFFFFFFFFFFFFFFF<br>0X0000000000000000</td>
</tr>
</tbody>
</table>
<p>需要注意，无符号数中0xFFFFFFFF是最大值，但有符号数中这个值代表-1；还要注意有符号数中的最小值是0x80000000;</p>
<p> </p>
<h1 id="字节序byte-ordering">字节序（Byte Ordering）</h1>
<p>以32位机器为例，一个字有32bits字长，占用4bytes，在内存中有以下两个存放方式：</p>
<ol type="1">
<li>大端法（Big Endian）:大多数IBM机器、Internet传输；</li>
</ol>
<p><img src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/BigEndian.png"></p>
<ol start="2" type="1">
<li>小端法（Little Endian）:Inter兼容机</li>
</ol>
<p><img src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/SmallEndian.png"></p>
<p>个人机器基本上都是小端表示法。</p>
<p><img src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/%E5%A4%A7%E5%B0%8F%E7%AB%AF%E8%B0%83%E8%AF%95.png"></p>
<h1 id="补码的意义">补码的意义</h1>
<p>  我们在设计软件系统时总是希望软件系统尽可能的简单通用。于是人们希望在只有加法运算器的情况下设计一种方法能实现减法运算。</p>
<p>  以时间为例：表盘一圈12个小时，现在是8点，那么3小时前是5点，9小时以后还是5点(8+9-12)，这里进行的是模12的操作。所以8-3和8+9的结果是一样的；我们就可以用9来表示-3，如果想计算8-3，那么就用加法器计算8+9；</p>
<p>  当然单纯的这么想是有问题的，以时间为例我们可以得到一个对照表，遇见12就清零：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">0</th>
<th style="text-align: left;">-1</th>
<th style="text-align: left;">-2</th>
<th style="text-align: left;">-3</th>
<th style="text-align: left;">-4</th>
<th style="text-align: left;">-5</th>
<th style="text-align: left;">-6</th>
<th style="text-align: left;">-7</th>
<th style="text-align: left;">-8</th>
<th style="text-align: left;">-9</th>
<th style="text-align: left;">-10</th>
<th style="text-align: left;">-11</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">0</td>
<td style="text-align: left;">11</td>
<td style="text-align: left;">10</td>
<td style="text-align: left;">9</td>
<td style="text-align: left;">8</td>
<td style="text-align: left;">7</td>
<td style="text-align: left;">6</td>
<td style="text-align: left;">5</td>
<td style="text-align: left;">4</td>
<td style="text-align: left;">3</td>
<td style="text-align: left;">2</td>
<td style="text-align: left;">1</td>
</tr>
</tbody>
</table>
<ul>
<li>5-3 ==&gt; (5+9)%12=2</li>
<li>3-5 ==&gt; (3+7)%12 = 10 ==&gt;-2</li>
</ul>
<p>  我们计算3-5的时候，得到的值是10，我们可以在对照表中得到10对应的值是-2，但我们计算5-3的时候，得到的值是2，我们却不需要找对应的值。计算机如何区分什么时候要找对应的值，什么时候不需要呢？</p>
<p>  可以对表进行一些修改：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">0</th>
<th style="text-align: left;">-1</th>
<th style="text-align: left;">-2</th>
<th style="text-align: left;">-3</th>
<th style="text-align: left;">-4</th>
<th style="text-align: left;">-5</th>
<th style="text-align: left;">-6</th>
<th style="text-align: left;">5</th>
<th style="text-align: left;">4</th>
<th style="text-align: left;">3</th>
<th style="text-align: left;">2</th>
<th style="text-align: left;">1</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">0</td>
<td style="text-align: left;">11</td>
<td style="text-align: left;">10</td>
<td style="text-align: left;">9</td>
<td style="text-align: left;">8</td>
<td style="text-align: left;">7</td>
<td style="text-align: left;">6</td>
<td style="text-align: left;">5</td>
<td style="text-align: left;">4</td>
<td style="text-align: left;">3</td>
<td style="text-align: left;">2</td>
<td style="text-align: left;">1</td>
</tr>
</tbody>
</table>
<ul>
<li>5-3 ==&gt; (5+9)%12=2 ==&gt;2</li>
<li>3-5 ==&gt; (3+7)%12 = 10 ==&gt;-2</li>
</ul>
<p>  表格修改后，每次计算完都在表格中进行对照，这样操作统一，得到的值也是正确的了。其实在计算机内部，补码的用处就是构造这张映射表的。</p>
<p><img src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/%E8%A1%A5%E7%A0%81%E5%B1%95%E7%A4%BA.png"></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++基础</tag>
      </tags>
  </entry>
  <entry>
    <title>调试技巧——assert()</title>
    <url>/2022/C/C++/%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7%E2%80%94%E2%80%94assert/</url>
    <content><![CDATA[<p>  编写代码时，我们总会做出一些假设，断言就是用在代码中捕获这些假设。断言表示为一些布尔表达式，我们相信在程序中的某个特定点该表达式的值为真，可以在任意时刻启用和禁用断言来验证。</p>
<p>  举个例子，在离散数学中有个德摩根定律，我们在C++语言中可以验证：</p>
<p><img
src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/%E6%91%A9%E6%A0%B9%E5%AE%9A%E5%BE%8B.png" /></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">bool</span> A = <span class="literal">false</span>;</span><br><span class="line">	<span class="type">bool</span> B= <span class="literal">true</span>;</span><br><span class="line">	<span class="comment">//德摩根率：</span></span><br><span class="line">	cout&lt;&lt;(!(A || B) == (!A &amp;&amp; !B))&lt;&lt;endl;  <span class="comment">//输出1</span></span><br><span class="line">	cout&lt;&lt;(!(A &amp;&amp; B) == (!A || !B))&lt;&lt;endl;  <span class="comment">//输出1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种代码方式在开发中并不常见，而是使用以下断言的方式：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">bool</span> A = <span class="literal">false</span>;</span><br><span class="line">	<span class="type">bool</span> B= <span class="literal">true</span>;</span><br><span class="line">	<span class="comment">//德摩根率：</span></span><br><span class="line">	<span class="built_in">assert</span>( !(A || B) == (!A &amp;&amp; !B) );  </span><br><span class="line">	<span class="built_in">assert</span>( !(A &amp;&amp; B) == (!A || !B) );  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个程序中，并不会有任何输出结果，但是程序正常运行。</p>
<p>假如assert()函数中表达式出错(非真)，整个程序在运行的时候就会报错，并指出哪里出了问题。</p>
<p>所以今后在我们开发的时候可以运用这一特性，完成开发测试用例的编写：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">assert</span>(函数返回值 == 预期结果);</span><br></pre></td></tr></table></figure>
<p>只要函数运行符合预期结果，程序正常运行，一旦不符合就会出错。</p>
<p>注意assert()不是函数，而是一个宏定义。</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++基础</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象编程</title>
    <url>/2025/C/C++/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h1 id="类">类</h1>
<p>  C++使用struct、class来定义一个类：struct的默认成员权限是public，class的默认成员权限是private；除此之外，二者基本无差别。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>{</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">double</span> score;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">GetSorce</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> score;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
<p>上面学生的类并不是真实世界中的学生，只是一个抽象的概念，并不包含真实世界中学生的所有属性，只是把一些属性抽象出来。</p>
<p>  </p>
<p>  面向对象的误区：对象是对现实世界中具体物体的反映，继承是对物体分类的反映？这个观念是错误的。举个例子，现实生活中我们往往把正方形看作是长和宽都相等的特殊的长方形，如果把这个思想引入到C++中，可能会这么设计继承关系：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">rectangle</span>  <span class="comment">//长方形</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">SetLength</span><span class="params">(<span class="type">double</span> a)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        ……</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">square</span> : <span class="keyword">public</span> rectangle  <span class="comment">//正方形，继承长方形类</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">SetLength</span><span class="params">(<span class="type">double</span> a)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        ……</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>  上面设计了两个类，一个长方形类，一个正方形类，其中正方形类继承了长方形类以及内部的方法SetLength。当我们调用长方形类SetLength的方法时，我们只是修改了长方形的长，长方形的宽不受影响；但是如果我们调用了正方形对象的SetLength方法，不仅长会受到影响，宽也会受到影响。这个从面向对象的继承体系来说就有很大的问题了。所以我们不要把现实世界中的关系代入到面向对象编程中。</p>
<p>  </p>
<h1 id="抽象法则">抽象法则</h1>
<h2 id="具体类型的抽象">具体类型的抽象</h2>
<ul>
<li><strong>让自定义的类像内置类型一样</strong></li>
</ul>
<p>  一个普通的int型变量，可以完成加、减、乘、除、比较、输出、自增等等一系列操作；如果现在有一个自定义的复数类型，我们自然也希望可以像使用int型变量一样使用它，同时它对我们是一个黑盒，一种抽象，我们不需要关心内部是如何实现的。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//complex.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Complex</span>();                                    <span class="comment">// 默认构造函数</span></span><br><span class="line">	<span class="built_in">Complex</span>(<span class="type">double</span> r,  <span class="type">double</span> i);      <span class="comment">// 构造函数</span></span><br><span class="line">	<span class="keyword">virtual</span> ~<span class="built_in">Complex</span>();                      <span class="comment">// 析构函数</span></span><br><span class="line">	<span class="built_in">Complex</span>(<span class="type">const</span> Complex&amp; x);      <span class="comment">// 拷贝构造</span></span><br><span class="line">	Complex&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Complex &amp;c); <span class="comment">// =号运算符</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">double</span> <span class="title">GetReal</span><span class="params">( )</span> <span class="type">const</span> </span>{ <span class="keyword">return</span> _real; } <span class="comment">//const修饰函数，函数体内成员变量不允许改变</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">SetReal</span><span class="params">(<span class="type">double</span> d)</span> </span>{ _real = d; }</span><br><span class="line">	<span class="function"><span class="type">double</span> <span class="title">GetImage</span><span class="params">()</span> <span class="type">const</span> </span>{ <span class="keyword">return</span> _image; }<span class="comment">//const修饰函数，函数体内成员变量不允许改变</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">SetImage</span><span class="params">(<span class="type">double</span> i)</span> </span>{ _image = i; }</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 运算符重载</span></span><br><span class="line">    <span class="comment">//这里函数参数传递的是引用，因为可能从外面传递另外一个complex，但我们不想生成一个副本</span></span><br><span class="line">    <span class="comment">//重载等号操作符时返回的是引用，可以让返回值在其他地方使用</span></span><br><span class="line">	Complex <span class="keyword">operator</span>+(<span class="type">const</span> Complex &amp;c) <span class="type">const</span>; </span><br><span class="line">	Complex&amp; <span class="keyword">operator</span>+=(<span class="type">const</span> Complex &amp;c);</span><br><span class="line">	Complex <span class="keyword">operator</span>-(<span class="type">const</span> Complex &amp;c) <span class="type">const</span>;</span><br><span class="line">	Complex&amp; <span class="keyword">operator</span>-=(<span class="type">const</span> Complex &amp;c);</span><br><span class="line">	Complex <span class="keyword">operator</span>*(<span class="type">const</span> Complex &amp;c) <span class="type">const</span>;</span><br><span class="line">	Complex&amp; <span class="keyword">operator</span>*=(<span class="type">const</span> Complex &amp;c);</span><br><span class="line">	Complex <span class="keyword">operator</span>/(<span class="type">const</span> Complex &amp;c) <span class="type">const</span>;</span><br><span class="line">	Complex&amp; <span class="keyword">operator</span>/=(<span class="type">const</span> Complex &amp;c);</span><br><span class="line">    Complex&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Complex &amp;c); </span><br><span class="line"></span><br><span class="line">	<span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> Complex &amp;c) <span class="type">const</span>;</span><br><span class="line">	<span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> Complex &amp;c) <span class="type">const</span>;</span><br><span class="line">	<span class="type">bool</span> <span class="keyword">operator</span>&gt;(<span class="type">const</span> Complex &amp;c)  <span class="type">const</span>;</span><br><span class="line">	<span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> Complex &amp;c) <span class="type">const</span>;</span><br><span class="line">	<span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Complex &amp;c) <span class="type">const</span>;</span><br><span class="line">	<span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> Complex &amp;c) <span class="type">const</span>;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 前置和后置++</span></span><br><span class="line">	Complex&amp; <span class="keyword">operator</span>++();   <span class="comment">//前置++</span></span><br><span class="line">	Complex <span class="keyword">operator</span>++(<span class="type">int</span>); <span class="comment">//后置++</span></span><br><span class="line">	Complex&amp; <span class="keyword">operator</span>--();   <span class="comment">//前置--</span></span><br><span class="line">	Complex <span class="keyword">operator</span>--(<span class="type">int</span>); <span class="comment">//后置--</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//标准输入输出IO重载</span></span><br><span class="line">    <span class="comment">//输入输出需要把当前的Complex对象传递进来，也要把外部的ostream或istream传递进来</span></span><br><span class="line">    <span class="comment">//但是传递进来的ostream本身不是当前类内的成员变量，不能访问当前类的属性</span></span><br><span class="line">    <span class="comment">//所以定义为friend</span></span><br><span class="line">	<span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="type">const</span> Complex &amp;x);</span><br><span class="line">	<span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; is, Complex &amp;x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">double</span> _real;             <span class="comment">// 复数的实部</span></span><br><span class="line">	<span class="type">double</span> _image;         <span class="comment">// 复数的虚部</span></span><br><span class="line">};</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//complex.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"stdafx.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"complex.h"</span></span></span><br><span class="line"></span><br><span class="line">Complex::<span class="built_in">Complex</span>()</span><br><span class="line">{</span><br><span class="line">	_real = <span class="number">0.0</span>;</span><br><span class="line">	_image = <span class="number">0.0</span>;</span><br><span class="line">	<span class="comment">//cout &lt;&lt; "Complex::Complex()" &lt;&lt; endl;</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Complex::<span class="built_in">Complex</span>(<span class="type">double</span> r, <span class="type">double</span> i)</span><br><span class="line">{</span><br><span class="line">	_real = r;</span><br><span class="line">	_image = i;</span><br><span class="line">	<span class="comment">//cout &lt;&lt; "Complex::Complex(double r, double i)" &lt;&lt; endl;</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Complex::<span class="built_in">Complex</span>(<span class="type">const</span> Complex&amp; c)</span><br><span class="line">{</span><br><span class="line">	_real = c._real;</span><br><span class="line">	_image = c._image;</span><br><span class="line">	<span class="comment">//cout &lt;&lt; "Complex::Complex(const Complex&amp; c)" &lt;&lt; endl;</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Complex&amp; Complex::<span class="keyword">operator</span>= (<span class="type">const</span> Complex&amp; c)</span><br><span class="line">{</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span> != &amp;c)  <span class="comment">//如果二者相等，就不需要做操作，这里比较的是地址</span></span><br><span class="line">	{</span><br><span class="line">		_real = c._real;</span><br><span class="line">		_image = c._image;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Complex::~<span class="built_in">Complex</span>()</span><br><span class="line">{</span><br><span class="line">	_real = _image = <span class="number">0.0</span>;</span><br><span class="line">	<span class="comment">//cout &lt;&lt; "Complex::~Complex()" &lt;&lt; endl;</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Complex Complex::<span class="keyword">operator</span>+ (<span class="type">const</span> Complex&amp; c) <span class="type">const</span></span><br><span class="line">{</span><br><span class="line">	<span class="comment">//Complex tmp;</span></span><br><span class="line">	<span class="comment">//tmp._real = _real + c._real;</span></span><br><span class="line">	<span class="comment">//tmp._image = _image + c._image;</span></span><br><span class="line">	<span class="comment">//return tmp;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//上面的写法，在return的时候会触发拷贝构造</span></span><br><span class="line">    <span class="comment">//调试打断点可以发现，return会进入“=”操作符的重载，重载函数入参的地址和tmp这个临时对象的地址不一样</span></span><br><span class="line">    <span class="comment">//这个tmp被传递到拷贝构造里了</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Complex</span>(_real + c._real, _image + c._image);</span><br><span class="line">    <span class="comment">//临时对象优化，上面的写法就不会触发拷贝构造，直接走了自定义的构造函数</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Complex&amp; Complex::<span class="keyword">operator</span>+= (<span class="type">const</span> Complex&amp; c)</span><br><span class="line">{</span><br><span class="line">	_real += c._real;</span><br><span class="line">	_image += c._image;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Complex Complex::<span class="keyword">operator</span>-(<span class="type">const</span> Complex &amp;c) <span class="type">const</span></span><br><span class="line">{</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Complex</span>(_real - c._real, _image - c._image);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Complex&amp; Complex::<span class="keyword">operator</span>-=(<span class="type">const</span> Complex &amp;c)</span><br><span class="line">{</span><br><span class="line">	_real -= c._real;</span><br><span class="line">	_image -= c._image;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Complex Complex::<span class="keyword">operator</span>*(<span class="type">const</span> Complex &amp;c) <span class="type">const</span></span><br><span class="line">{</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Complex</span>(_real*c._real - _image*c._image, _real*c._image + _image*c._real);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Complex&amp; Complex::<span class="keyword">operator</span>*=(<span class="type">const</span> Complex &amp;c)</span><br><span class="line">{</span><br><span class="line">	Complex <span class="built_in">tmp</span>(*<span class="keyword">this</span>);  <span class="comment">//拷贝构造函数</span></span><br><span class="line">	_real = tmp._real*c._real - _image*c._image;</span><br><span class="line">	_image = tmp._real*c._image + tmp._image*c._real;</span><br><span class="line">	<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Complex Complex::<span class="keyword">operator</span>/(<span class="type">const</span> Complex &amp;c) <span class="type">const</span></span><br><span class="line">{</span><br><span class="line">	<span class="type">double</span> t = c._real*c._real + c._image*c._image;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Complex</span>((_real*c._real - _image*(-c._image)) / t, (_real*(-c._image) + _image*c._real) / t);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Complex&amp; Complex::<span class="keyword">operator</span>/=(<span class="type">const</span> Complex &amp;c)</span><br><span class="line">{</span><br><span class="line">	Complex <span class="built_in">tmp</span>(*<span class="keyword">this</span>);  <span class="comment">//拷贝构造函数</span></span><br><span class="line">	<span class="type">double</span> t = c._real*c._real + c._image*c._image;</span><br><span class="line">	_real = (tmp._real*c._real - tmp._image*(-c._image)) / t;</span><br><span class="line">	_image = (tmp._real*(-c._image) + tmp._image*c._real) / t;</span><br><span class="line">	<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> Complex::<span class="keyword">operator</span>==(<span class="type">const</span> Complex&amp; c) <span class="type">const</span></span><br><span class="line">{</span><br><span class="line">	<span class="built_in">return</span> (_real == c._real) &amp;&amp; (_image == c._image);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> Complex::<span class="keyword">operator</span>!=(<span class="type">const</span> Complex&amp; c) <span class="type">const</span></span><br><span class="line">{</span><br><span class="line">	<span class="keyword">return</span> !( (_real == c._real) &amp;&amp; (_image == c._image) );</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> Complex::<span class="keyword">operator</span>&gt;(<span class="type">const</span> Complex &amp;c)  <span class="type">const</span></span><br><span class="line">{</span><br><span class="line">	<span class="keyword">return</span> (_real &gt; c._real) &amp;&amp; (_image &gt; c._image);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> Complex::<span class="keyword">operator</span>&gt;=(<span class="type">const</span> Complex &amp;c) <span class="type">const</span></span><br><span class="line">{</span><br><span class="line">	<span class="built_in">return</span> (_real &gt;= c._real) &amp;&amp; (_image &gt;= c._image);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> Complex::<span class="keyword">operator</span>&lt;(<span class="type">const</span> Complex &amp;c) <span class="type">const</span></span><br><span class="line">{</span><br><span class="line">	<span class="keyword">return</span> (_real &lt; c._real) &amp;&amp; (_image &lt; c._image);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> Complex::<span class="keyword">operator</span>&lt;=(<span class="type">const</span> Complex &amp;c) <span class="type">const</span></span><br><span class="line">{</span><br><span class="line">	<span class="built_in">return</span> (_real &lt;= c._real) &amp;&amp; (_image &lt;= c._image);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Complex&amp; Complex::<span class="keyword">operator</span>++ () <span class="comment">// 前置++</span></span><br><span class="line">{</span><br><span class="line">	_real++;</span><br><span class="line">	_image++;</span><br><span class="line">	<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Complex Complex::<span class="keyword">operator</span>++ (<span class="type">int</span>) <span class="comment">// 后置++</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">//先用中间变量，然后执行计算，之后把原始值传递出去</span></span><br><span class="line">	<span class="comment">//Complex tmp(*this);</span></span><br><span class="line">	<span class="comment">//_real++;</span></span><br><span class="line">	<span class="comment">//_image++;</span></span><br><span class="line">	<span class="comment">//return tmp;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//上面的方法会调用拷贝构造，使用下面方法优化</span></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Complex</span>(_real++, _image++);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Complex&amp; Complex::<span class="keyword">operator</span>--()   <span class="comment">//前置--</span></span><br><span class="line">{</span><br><span class="line">	_real--;</span><br><span class="line">	_image--;</span><br><span class="line">	<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Complex Complex::<span class="keyword">operator</span>--(<span class="type">int</span>) <span class="comment">//后置--</span></span><br><span class="line">{</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Complex</span>(_real--, _image--);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意输入输出的写法，虽然在类内声明了，但本身并不是类的成员</span></span><br><span class="line"><span class="comment">//所以定义为全局函数，不要加“Complex::”</span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="type">const</span> Complex &amp;x)</span><br><span class="line">{</span><br><span class="line">	os &lt;&lt; <span class="string">"real value is  "</span> &lt;&lt; x._real &lt;&lt; <span class="string">"  image value is "</span> &lt;&lt; x._image;</span><br><span class="line">	<span class="keyword">return</span> os;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">istream&amp; <span class="keyword">operator</span> &gt;&gt; (istream&amp; is, Complex &amp;x)</span><br><span class="line">{</span><br><span class="line">	is &gt;&gt; x._real &gt;&gt; x._image;</span><br><span class="line">	<span class="keyword">return</span> is;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line">    <span class="function">Complex <span class="title">a</span><span class="params">(<span class="number">1.0</span>, <span class="number">2.0</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; a.<span class="built_in">GetReal</span>() &lt;&lt; endl;     <span class="comment">// 1.0</span></span><br><span class="line">    cout &lt;&lt; a.<span class="built_in">GetImage</span>() &lt;&lt; endl;  <span class="comment">// 2.0 </span></span><br><span class="line">    a.<span class="built_in">SetImage</span>(<span class="number">2.0</span>);</span><br><span class="line">    a.<span class="built_in">SetReal</span>(<span class="number">3.0</span>);</span><br><span class="line">    cout &lt;&lt; a.<span class="built_in">GetReal</span>() &lt;&lt; endl;     <span class="comment">// 3.0</span></span><br><span class="line">    cout &lt;&lt; a.<span class="built_in">GetImage</span>() &lt;&lt; endl;  <span class="comment">// 2.0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function">Complex <span class="title">a</span><span class="params">(<span class="number">3.0</span>, <span class="number">2.0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//系统也会默认有等号运算符的重载，我们自己不实现也可以用</span></span><br><span class="line">    Complex c;</span><br><span class="line">    c = a + b;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注意上面的写法和Complex c = a + b;的含义是不一样的</span></span><br><span class="line">    <span class="comment">//上面的行为是先声明后赋值</span></span><br><span class="line">    <span class="comment">//Complex c = a + b的行为是定义</span></span><br><span class="line">    <span class="comment">//调试时需要区别，如果要调试赋值操作，不要写成定义流程了</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//实际工程中尽量写Complex c = a + b;这个，减少一个默认构造函数提高效率</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Complex d;</span><br><span class="line">    d = c++;</span><br><span class="line">    cout &lt;&lt; d &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; d;</span><br><span class="line">    cout &lt;&lt; d &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>  类中有个this指针，指向当前对象本身。</p>
<p>  类创建后会系统默认创建一个构造函数，我们可以自己实现构造函数。但我们如果重写了构造函数，那么原始的默认构造函数就不存在了，如果想使用需要重新声明实现。</p>
<p>  等号运算符也一样，系统会默认帮我们重载。不过我们最好不要过于相信系统默认的重载，在复杂情况下运算的结果可能不是我们想要的。</p>
<p>  程序中的临时对象一定要注意优化，避免产生临时对象，否则会触发拷贝构造。</p>
<p>  </p>
<h2 id="抽象类型的抽象">抽象类型的抽象</h2>
<p>  数学中有不同的图形，比如长方形、原型、三角形；多种图形计算周长、面积的方法不同，但都需要一个计算方法。我们可以抽象出一个图形类Shape，用Shape类进行公共层面的抽象操作。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"stdafx.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象类</span></span><br><span class="line"><span class="comment">// 抽象类的特征是虚函数后面都是"=0",意味着不可以有实际的对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">Area</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;<span class="comment">// 子类方法实现不一致时要加上virtual</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Show</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">SetColor</span><span class="params">(<span class="type">int</span> color)</span> </span>{ _color = color; }</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Display</span><span class="params">()</span>   <span class="comment">//一个共性的方法</span></span></span><br><span class="line"><span class="function">	</span>{</span><br><span class="line">		cout &lt;&lt; <span class="built_in">Area</span>() &lt;&lt; endl;</span><br><span class="line">	}</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">int</span> _color;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span>: <span class="keyword">public</span> Shape</span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Square</span>(<span class="type">double</span> len) :_len(len) { } <span class="comment">//用参数列表初始化</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Show</span><span class="params">()</span> </span>{ cout &lt;&lt; <span class="string">"Square"</span> &lt;&lt; endl; }</span><br><span class="line">	<span class="function"><span class="type">double</span> <span class="title">Area</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">	</span>{</span><br><span class="line">		<span class="keyword">return</span> _len*_len;</span><br><span class="line">	}</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">double</span> _len; <span class="comment">//边长</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> : <span class="keyword">public</span> Shape</span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Circle</span>(<span class="type">double</span> radius) :_radius(radius) {} <span class="comment">//用参数列表初始化</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Show</span><span class="params">()</span> </span>{ cout &lt;&lt; <span class="string">"Circle"</span> &lt;&lt; endl; }</span><br><span class="line">	<span class="function"><span class="type">double</span> <span class="title">Area</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">	</span>{</span><br><span class="line">		<span class="keyword">return</span> <span class="number">3.1415926</span>*_radius*_radius;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">double</span> _radius;  <span class="comment">//半径</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Triangle</span> : <span class="keyword">public</span> Shape</span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Triangle</span>(<span class="type">double</span> len, <span class="type">double</span> height) :_len(len), _height(height){}</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Show</span><span class="params">()</span> </span>{ cout &lt;&lt; <span class="string">"Triangle"</span> &lt;&lt; endl; }</span><br><span class="line">	<span class="function"><span class="type">double</span> <span class="title">Area</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">	</span>{</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0.5</span>*_len*_height;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">double</span> _len;  <span class="comment">//底</span></span><br><span class="line">	<span class="type">double</span> _height;     <span class="comment">//高</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="comment">// 多态的实现，可以让我们面对变化，尽可能少修改原有的逻辑，直接扩充逻辑</span></span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> shapeNum = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function">Square <span class="title">s1</span><span class="params">(<span class="number">2.0</span>)</span></span>;</span><br><span class="line">	s1.<span class="built_in">SetColor</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="function">Circle   <span class="title">c1</span><span class="params">(<span class="number">2.0</span>)</span></span>;</span><br><span class="line">	<span class="function">Triangle <span class="title">t1</span><span class="params">(<span class="number">2.0</span>, <span class="number">3.0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	Shape* shapes[shapeNum];</span><br><span class="line">	shapes[<span class="number">0</span>] = &amp;s1;</span><br><span class="line">	shapes[<span class="number">1</span>] = &amp;c1;</span><br><span class="line">	shapes[<span class="number">2</span>] = &amp;t1;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> index = <span class="number">0</span>; index &lt; shapeNum; index++)</span><br><span class="line">	{</span><br><span class="line">		shapes[index]-&gt;<span class="built_in">Display</span>();</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">sizeof</span>(s1) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> </p>
<h1 id="对象模型和虚函数">对象模型和虚函数</h1>
<p>  C++的对象模型中，子类对象中包含了父类。父类中有一个虚函数列表，是个类似数组的结构。对象模型中只保留成员变量信息和虚函数列表，其他的共有函数是通过this指针来访问的。</p>
<p><img src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/%E8%99%9A%E5%87%BD%E6%95%B0%E5%88%97%E8%A1%A8.png"></p>
<h1 id="深拷贝浅拷贝写时复制">深拷贝、浅拷贝、写时复制</h1>
<ul>
<li>浅拷贝：只拷贝指针地址，C++默认拷贝构造函数与赋值运算符重载都是浅拷贝；节省空间，但容易引发多次释放；</li>
<li>深拷贝：重新分配堆内存，拷贝指针指向内容；浪费空间，但是不会导致多次释放；</li>
</ul>
<p><img src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/C%2B%2B/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D.png"></p>
<p>  深拷贝的思想比较常见，比如C++的一个优化策略叫<strong>写时复制</strong>。有个信息存放在内存空间中，如果大家都去读取，那么内存中保留一份即可，但如果有地方需要写数据，那么会复制出一个新的地址空间存放相同数据，写操作作用在新地址空间上。</p>
<p>  深拷贝和浅拷贝各有优劣，如果想兼有二者的优点，有两种可用方案：第一是使用引用计数，用shared_ptr的思路，每有一个指针指向对象，引用计数+1，直到引用计数清零时再清理内存；第二种是C++11的新标准移动语义move，把资源让渡，既可以避免重新创建空间，也防止空间释放导致新问题。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义字符串类String操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span> *str = <span class="literal">NULL</span>);						<span class="comment">// 普通构造函数</span></span><br><span class="line">	<span class="built_in">String</span>(<span class="type">const</span> String &amp;other);						<span class="comment">// 拷贝构造函数(深拷贝)</span></span><br><span class="line">	<span class="built_in">String</span>(String&amp;&amp; other);							<span class="comment">// 移动构造函数，两个&amp;&amp;代表右值引用</span></span><br><span class="line">	~<span class="built_in">String</span>(<span class="type">void</span>);									<span class="comment">// 析构函数</span></span><br><span class="line">	String&amp; <span class="keyword">operator</span>= (<span class="type">const</span> String&amp; other);			<span class="comment">// 赋值函数</span></span><br><span class="line">	String&amp; <span class="keyword">operator</span>=(String&amp;&amp; rhs)<span class="keyword">noexcept</span>;			<span class="comment">// 移动赋值运算符</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="type">const</span> String &amp;c); 		<span class="comment">// cout输出</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">char</span> *m_data; <span class="comment">// 用于保存字符串</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// String 的普通构造函数</span></span><br><span class="line">String::<span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span> *str)</span><br><span class="line">{</span><br><span class="line">	<span class="keyword">if</span> (str == <span class="literal">NULL</span>)</span><br><span class="line">	{</span><br><span class="line">		m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">if</span> (m_data != <span class="literal">NULL</span>)</span><br><span class="line">		{</span><br><span class="line">			*m_data = <span class="string">'\0'</span>;</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		{</span><br><span class="line">			<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	{</span><br><span class="line">		<span class="type">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line">		m_data = <span class="keyword">new</span> <span class="type">char</span>[len + <span class="number">1</span>];  <span class="comment">//把'\0'的空间留出来</span></span><br><span class="line">		<span class="keyword">if</span> (m_data != <span class="literal">NULL</span>)</span><br><span class="line">		{</span><br><span class="line">			<span class="built_in">strcpy</span>(m_data, str);</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		{</span><br><span class="line">			<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拷贝构造函数</span></span><br><span class="line"><span class="comment">// 开辟新的内存空间了，属于深拷贝</span></span><br><span class="line">String::<span class="built_in">String</span>(<span class="type">const</span> String &amp;other)</span><br><span class="line">{</span><br><span class="line">	<span class="type">int</span> len = <span class="built_in">strlen</span>(other.m_data);</span><br><span class="line">	m_data = <span class="keyword">new</span> <span class="type">char</span>[len + <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">if</span> (m_data != <span class="literal">NULL</span>)</span><br><span class="line">	{</span><br><span class="line">		<span class="built_in">strcpy</span>(m_data, other.m_data);</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	{</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移动构造函数</span></span><br><span class="line">String::<span class="built_in">String</span>(String&amp;&amp; other)</span><br><span class="line">{</span><br><span class="line">	<span class="keyword">if</span> (other.m_data != <span class="literal">NULL</span>)</span><br><span class="line">	{</span><br><span class="line">		<span class="comment">// 资源让渡</span></span><br><span class="line">		m_data = other.m_data;</span><br><span class="line">		<span class="comment">// 之前的联接断开</span></span><br><span class="line">		other.m_data = <span class="literal">NULL</span>;</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值函数</span></span><br><span class="line">String&amp; String::<span class="keyword">operator</span>= (<span class="type">const</span> String &amp;other)</span><br><span class="line">{</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span> == &amp;other)</span><br><span class="line">	{</span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	}</span><br><span class="line">	<span class="comment">// 释放原有的内容</span></span><br><span class="line">	<span class="keyword">delete</span>[] m_data;</span><br><span class="line">	<span class="comment">// 重新分配资源并赋值</span></span><br><span class="line">	<span class="type">int</span> len = <span class="built_in">strlen</span>(other.m_data);</span><br><span class="line">	m_data = <span class="keyword">new</span> <span class="type">char</span>[len + <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">if</span> (m_data != <span class="literal">NULL</span>)</span><br><span class="line">	{</span><br><span class="line">		<span class="built_in">strcpy</span>(m_data, other.m_data);</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	{</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移动赋值运算符</span></span><br><span class="line">String&amp; String::<span class="keyword">operator</span>=(String&amp;&amp; rhs)<span class="keyword">noexcept</span></span><br><span class="line">{</span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">this</span> != &amp;rhs)</span><br><span class="line">	{</span><br><span class="line">		<span class="comment">// 清空原有的</span></span><br><span class="line">		<span class="keyword">delete</span>[] m_data;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//赋值新的</span></span><br><span class="line">		m_data = rhs.m_data;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 我们接管了内存，原有内存不需要释放，把链接断开即可</span></span><br><span class="line">		rhs.m_data = <span class="literal">NULL</span>;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// String 的析构函数</span></span><br><span class="line">String::~<span class="built_in">String</span>(<span class="type">void</span>)</span><br><span class="line">{</span><br><span class="line">	<span class="keyword">if</span> (m_data != <span class="literal">NULL</span>)</span><br><span class="line">	{</span><br><span class="line">		<span class="keyword">delete</span>[] m_data;</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="type">const</span> String &amp;c)</span><br><span class="line">{</span><br><span class="line">	os &lt;&lt; c.m_data;</span><br><span class="line">	<span class="keyword">return</span> os;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="function">String <span class="title">s1</span><span class="params">(<span class="string">"Hello"</span>)</span></span>;				<span class="comment">// 构造函数</span></span><br><span class="line">	cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//String s2 = s1;				// 调用拷贝构造函数</span></span><br><span class="line">	<span class="function">String <span class="title">s2</span><span class="params">(s1)</span></span>;					<span class="comment">// 调用拷贝构造函数</span></span><br><span class="line">	cout &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line">	<span class="function">String <span class="title">s2A</span><span class="params">(std::move(s1))</span></span>;		<span class="comment">// 移动构造函数</span></span><br><span class="line">	cout &lt;&lt; s2A &lt;&lt; endl;</span><br><span class="line">	String s3;						<span class="comment">// 无参构造函数</span></span><br><span class="line">	cout &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line">	s3 = s2;						 <span class="comment">// 调用赋值函数</span></span><br><span class="line">	cout &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line">	String s3A;						<span class="comment">// 无参构造函数</span></span><br><span class="line">	s3A = std::<span class="built_in">move</span>(s2A);			<span class="comment">// 移动赋值运算符</span></span><br><span class="line">	cout &lt;&lt; s3A &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h1 id="面向对象三大特性">面向对象三大特性</h1>
<ul>
<li>封装性：数据和代码捆绑在一起，避免外界干扰和不确定性访问；封装可以使得代码模块化；</li>
<li>继承性：让某种类型对象获得另一个类型对象的属性和方法，继承可以扩展已经存在的代码；</li>
<li>多态性：同一事物在保有原来特点的情况下表现出不同事物的能力，即不同对象会产生不同的行为；多态的目的是为了接口重用；</li>
</ul>
<p>  面向对象是软件工程发展到一定阶段为了管理代码和数据提出的一种方法，它没有解决以前解决不了的问题，不是万能的，只是为我们便捷的开发出能适应快速变化的软件提供了可能。面向对象不是对现实世界的映射，但它的封装性可以把问题简化；它的继承性可以减少代码重复，避免重新发明轮子；它的多态可以实现灵活的功能扩充，提升开发效率；</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++基础</tag>
      </tags>
  </entry>
  <entry>
    <title>编程思想——设计模式</title>
    <url>/2025/C/C++/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="设计模式">设计模式</h1>
<p>  一个模式描述了一个不断发生问题及这个问题的解决方案；模式是前人的设计经验上总结出来的对于一些普遍存在的问题提供的通用解决方案，比如单例模式、观察者模式等；</p>
<p>  软件工程中有很多模式，面向对象常见的有23种设计模式，可以分为创建型(单例)，结构型(适配器)和行为型(观察者)模型。设计模式不是万能的，它建立在系统变化点上，哪里有变化哪里就可以用。设计模式是为了解耦合，为了扩展，它通常是演变过来的，需要演变才能准确定位。设计模式是一种软件设计方法，不是标准，面目前大部分框架中都包含了大量的设计模式思想。</p>
<p>  </p>
<h1 id="单例模式">单例模式</h1>
<p>  有些时候，我们需要整个程序中有且只有一个实例，比如系统日志、Windows资源管理器窗口，数据库分配主键等操作。单例的实现思路：</p>
<ol type="1">
<li>Singleton拥有一个私有的构造函数，确保用户无法通过new直接实例它；</li>
<li>包含一个静态私有成员变量instance与静态公有方法Instance()，让外部通过Instance()来获取实例；</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Singleton.h</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//只有静态的方法才能访问静态的变量</span></span><br><span class="line">	<span class="function"><span class="type">static</span> <span class="type">const</span> Singleton* <span class="title">getInstance</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">DoSomething</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>{</span><br><span class="line">		cout &lt;&lt; <span class="string">"Do Something"</span> &lt;&lt; endl;</span><br><span class="line">	}</span><br><span class="line"><span class="comment">// 将构造和析构函数私有化，防止外部访问</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="built_in">Singleton</span>();</span><br><span class="line">	~<span class="built_in">Singleton</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用静态变量帮助解决资源的分配和释放</span></span><br><span class="line"><span class="comment">// 肯定不能使用栈上的对象，不然会销毁</span></span><br><span class="line"><span class="comment">// 如果使用堆上的对象，在getInstance()方法中new出来，那就涉及到资源释放问题</span></span><br><span class="line"><span class="comment">// 析构函数是private的，外部是无法直接释放的</span></span><br><span class="line"><span class="comment">// 静态变量在程序中属于全局区，但声明了private后可见区域只在类内</span></span><br><span class="line"><span class="comment">// 所以可以让这个实例随着程序的产生而产生，随着程序的灭亡而灭亡</span></span><br><span class="line">	<span class="type">static</span> Singleton* This; </span><br><span class="line">};</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Singleton.cpp</span></span><br><span class="line"></span><br><span class="line">Singleton* Singleton::This = <span class="literal">nullptr</span>;  <span class="comment">//静态变量需要显式声明</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">const</span> Singleton* <span class="title">Singleton::getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">//这里只是简化了，还需要考虑多线程的情况</span></span><br><span class="line">	<span class="keyword">if</span> (!This)</span><br><span class="line">	{</span><br><span class="line">		This = <span class="keyword">new</span> Singleton;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> This;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Singleton::<span class="built_in">Singleton</span>()</span><br><span class="line">{</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Singleton::~<span class="built_in">Singleton</span>()</span><br><span class="line">{</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	Singleton::<span class="built_in">getInstance</span>()-&gt;<span class="built_in">DoSomething</span>();</span><br><span class="line"></span><br><span class="line">	Singleton::<span class="built_in">getInstance</span>()-&gt;<span class="built_in">DoSomething</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>  </p>
<p>  上面的单例模式实现，程序开始时全局实例Singleton*
Singleton::This为空，只有我们主动调用Singleton::getInstance()-&gt;DoSomething()方法时才会产生这个对象的实例。我们也可以采用饿汉的方式，程序启动时就创建实例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Singleton.cpp</span></span><br><span class="line"></span><br><span class="line">Singleton* Singleton::This = <span class="keyword">new</span> <span class="built_in">Singleton</span>();  <span class="comment">//这里直接new</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">const</span> Singleton* <span class="title">Singleton::getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">//这里只是简化了，还需要考虑多线程的情况</span></span><br><span class="line">	<span class="keyword">if</span> (!This)</span><br><span class="line">	{</span><br><span class="line">		This = <span class="keyword">new</span> Singleton;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> This;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Singleton::<span class="built_in">Singleton</span>()</span><br><span class="line">{</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Singleton::~<span class="built_in">Singleton</span>()</span><br><span class="line">{</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>  </p>
<h1 id="观察者模式">观察者模式</h1>
<p>  在观察者模式中，观察者需要直接订阅目标事件；在目标发出内容改变的事件后，直接接收事件并作出相应；对象通常是一对多关系。常见于各种MVC的框架中，Model的变化通知各种类型的View时几乎都存在这种模式。</p>
<p>  观察者模式的实现思路：把问题的职责解耦合，将Observable和Observer抽象开，分清抽象和实体。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//观察者类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Observer</span>() { ; }</span><br><span class="line">	<span class="keyword">virtual</span> ~<span class="built_in">Observer</span>() { ; }</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 当被观察对象发生变化时，通知被观察者调用这个方法</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Update</span><span class="params">(<span class="type">void</span>* pArg)</span> </span>= <span class="number">0</span>;</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
<p><strong>用list列表来存储被观察清单。</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//被观察对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Observerable</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Observerable</span>();</span><br><span class="line">	<span class="keyword">virtual</span> ~<span class="built_in">Observerable</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 注册观察者(加入被观察列表)</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Attach</span><span class="params">(Observer* pOb)</span></span>;</span><br><span class="line">	<span class="comment">// 反注册观察者</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Detach</span><span class="params">(Observer* pOb)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">GetObseverCount</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">	</span>{</span><br><span class="line">		<span class="keyword">return</span> _Obs.<span class="built_in">size</span>();</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">DetachAll</span><span class="params">()</span>  <span class="comment">//清理所有订阅者</span></span></span><br><span class="line"><span class="function">	</span>{</span><br><span class="line">		_Obs.<span class="built_in">clear</span>();</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">GetSomeNews</span><span class="params">(string str)</span></span></span><br><span class="line"><span class="function">	</span>{</span><br><span class="line">		<span class="built_in">SetChange</span>(str);</span><br><span class="line">	}</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span>  <span class="title">SetChange</span><span class="params">(string news)</span></span>;   <span class="comment">// 有变化，需要通知</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="comment">// 通知观察者</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Notify</span><span class="params">(<span class="type">void</span>* pArg)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">bool</span> _bChange;</span><br><span class="line">	list&lt;Observer*&gt; _Obs;  <span class="comment">//观察对象列表</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册观察者</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Observerable::Attach</span><span class="params">(Observer* pOb)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="keyword">if</span> (pOb == <span class="literal">NULL</span>)</span><br><span class="line">	{</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 看看当前列表中是否有这个观察者</span></span><br><span class="line">	<span class="keyword">auto</span> it = _Obs.<span class="built_in">begin</span>();</span><br><span class="line">	<span class="keyword">for</span> (; it != _Obs.<span class="built_in">end</span>(); it++)</span><br><span class="line">	{</span><br><span class="line">		<span class="keyword">if</span> (*it == pOb)</span><br><span class="line">		{</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	_Obs.<span class="built_in">push_back</span>(pOb);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反注册观察者</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Observerable::Detach</span><span class="params">(Observer* pOb)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="keyword">if</span> ((pOb == <span class="literal">NULL</span>) || (_Obs.<span class="built_in">empty</span>() == <span class="literal">true</span>))</span><br><span class="line">	{</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	_Obs.<span class="built_in">remove</span>(pOb);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Observerable::SetChange</span><span class="params">(string news)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	_bChange = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">Notify</span>( ( (<span class="type">void</span>*)news.<span class="built_in">c_str</span>() ));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Observerable::Notify</span><span class="params">(<span class="type">void</span>* pArg)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="keyword">if</span> (_bChange == <span class="literal">false</span>)</span><br><span class="line">	{</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 看看当前列表中是否有这个观察者</span></span><br><span class="line">	<span class="keyword">auto</span> it = _Obs.<span class="built_in">begin</span>();</span><br><span class="line">	<span class="keyword">for</span> (; it != _Obs.<span class="built_in">end</span>(); it++)</span><br><span class="line">	{</span><br><span class="line">		(*it)-&gt;<span class="built_in">Update</span>(pArg);</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	_bChange = <span class="literal">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//被观察对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">News</span> : <span class="keyword">public</span> Observerable</span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">GetSomeNews</span><span class="params">(string str)</span></span></span><br><span class="line"><span class="function">	</span>{</span><br><span class="line">		<span class="built_in">SetChange</span>(<span class="string">"News: "</span> + str);</span><br><span class="line">	}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">//两个观察者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User1</span>:<span class="keyword">public</span> Observer</span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Update</span><span class="params">(<span class="type">void</span>* pArg)</span></span></span><br><span class="line"><span class="function">	</span>{</span><br><span class="line">		cout &lt;&lt; <span class="string">"User1 Got News: "</span> &lt;&lt; <span class="built_in">reinterpret_cast</span>&lt;<span class="type">char</span>*&gt;(pArg) &lt;&lt;endl;</span><br><span class="line">	}</span><br><span class="line">};</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User2</span> :<span class="keyword">public</span> Observer</span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Update</span><span class="params">(<span class="type">void</span>* pArg)</span></span></span><br><span class="line"><span class="function">	</span>{</span><br><span class="line">		cout &lt;&lt; <span class="string">"User2 Got News: "</span> &lt;&lt; <span class="built_in">reinterpret_cast</span>&lt;<span class="type">char</span>*&gt;(pArg) &lt;&lt;endl;</span><br><span class="line">	}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    User1 u1;</span><br><span class="line">    User2 u2;</span><br><span class="line"></span><br><span class="line">    News n1;</span><br><span class="line">    n1.<span class="built_in">GetSomeNews</span>(<span class="string">"t0"</span>); <span class="comment">//此时没人订阅，什么事情都不会发生</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//订阅</span></span><br><span class="line">    n1.<span class="built_in">Attach</span>(&amp;u1);</span><br><span class="line">    n1.<span class="built_in">Attach</span>(&amp;u2);</span><br><span class="line">    n1.<span class="built_in">GetSomeNews</span>(<span class="string">"t1"</span>);</span><br><span class="line"></span><br><span class="line">    n1.<span class="built_in">Detach</span>(&amp;u2);</span><br><span class="line">    n1.<span class="built_in">GetSomeNews</span>(<span class="string">"t2"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>  观察者模式帮助我们把职责关系梳理清晰了，我们如果要增加一个新的观察者，直接继承一个Observer类，实现一下消息更新的虚方法即可。</p>
<p> </p>
<h1 id="适配器adapter模式">适配器(Adapter)模式</h1>
<p>  适配器模式可以理解为一个插口转换器，去不同国家旅游时可以适配不同的插座接口。适配器将类接口转换为客户端期望的另一个接口，让接口更兼容。适配器模式的动机是：如果可以更改接口，则可以重用现有的软件。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//适配器模式</span></span><br><span class="line"><span class="comment">//场景：</span></span><br><span class="line"><span class="comment">// 已经有一个矩形处理类LegacyRectangle，可以画一个矩形</span></span><br><span class="line"><span class="comment">// 此时收到需求，在画矩形之前需要额外输入一些别的东西，原有的LegacyRectangle类不能满足需求</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//原始的矩形处理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LegacyRectangle</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">LegacyRectangle</span>(<span class="type">double</span> x1, <span class="type">double</span> y1, <span class="type">double</span> x2, <span class="type">double</span> y2)</span><br><span class="line">	{</span><br><span class="line">		_x1 = x1;</span><br><span class="line">		_y1 = y1;</span><br><span class="line">		_x2 = x2;</span><br><span class="line">		_y2 = y2;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">LegacyDraw</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>{</span><br><span class="line">		cout &lt;&lt; <span class="string">"LegacyRectangle:: LegacyDraw()"</span> &lt;&lt; _x1 &lt;&lt; <span class="string">" "</span> &lt;&lt; _y1 &lt;&lt; <span class="string">" "</span> &lt;&lt; _x2 &lt;&lt; <span class="string">" "</span> &lt;&lt; _y2 &lt;&lt; endl;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">double</span> _x1;</span><br><span class="line">	<span class="type">double</span> _y1;</span><br><span class="line">	<span class="type">double</span> _x2;</span><br><span class="line">	<span class="type">double</span> _y2;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个抽象类和外部对接，让外部去调用这个接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Draw</span><span class="params">(string str)</span> </span>= <span class="number">0</span>;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建内部接口，来实现对原始LegacyRectangle代码的复用</span></span><br><span class="line"><span class="comment">//有两种方式：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一种适配的方式：使用多重继承，把原始的类一并继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RectangleAdapter</span>: <span class="keyword">public</span> Rectangle, <span class="keyword">public</span> LegacyRectangle</span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">RectangleAdapter</span>(<span class="type">double</span> x, <span class="type">double</span> y, <span class="type">double</span> w, <span class="type">double</span> h) :</span><br><span class="line">		<span class="built_in">LegacyRectangle</span>(x, y, x + w, y + h)</span><br><span class="line">	{</span><br><span class="line">		cout &lt;&lt; <span class="string">"RectangleAdapter(int x, int y, int w, int h)"</span> &lt;&lt; endl;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Draw</span><span class="params">(string str)</span></span></span><br><span class="line"><span class="function">	</span>{</span><br><span class="line">		cout &lt;&lt; <span class="string">"RectangleAdapter::Draw()"</span> &lt;&lt; endl;</span><br><span class="line">		<span class="built_in">LegacyDraw</span>();  <span class="comment">//实际使用的还是原始的方法</span></span><br><span class="line">	}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种适配的方式：组合方式的Adapter，把原始的类当作成员变量</span></span><br><span class="line"><span class="comment">// 这种方式更常见，因为可以避免多重继承方式的强耦合性</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RectangleAdapter2</span> :<span class="keyword">public</span> Rectangle</span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">RectangleAdapter2</span>(<span class="type">double</span> x, <span class="type">double</span> y, <span class="type">double</span> w, <span class="type">double</span> h) :</span><br><span class="line">		_lRect(x, y, x + w, y + h)</span><br><span class="line">	{</span><br><span class="line">		cout &lt;&lt; <span class="string">"RectangleAdapter2(int x, int y, int w, int h)"</span> &lt;&lt; endl;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Draw</span><span class="params">(string str)</span></span></span><br><span class="line"><span class="function">	</span>{</span><br><span class="line">		cout &lt;&lt; <span class="string">"RectangleAdapter2::Draw()"</span> &lt;&lt; endl;</span><br><span class="line">		_lRect.<span class="built_in">LegacyDraw</span>();</span><br><span class="line">	}</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	LegacyRectangle _lRect;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="type">double</span> x = <span class="number">20.0</span>, y = <span class="number">50.0</span>, w = <span class="number">300.0</span>, h = <span class="number">200.0</span>;</span><br><span class="line">	<span class="comment">//实际创建的是适配器对象，但接口调用用的是Rectangle接口类</span></span><br><span class="line">	<span class="function">RectangleAdapter <span class="title">ra</span><span class="params">(x, y, w, h)</span></span>;  </span><br><span class="line">	Rectangle* pR = &amp;ra;    </span><br><span class="line">	pR-&gt;<span class="built_in">Draw</span>(<span class="string">"Testing Adapter"</span>);</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="function">RectangleAdapter2 <span class="title">ra2</span><span class="params">(x, y, w, h)</span></span>;</span><br><span class="line">	Rectangle* pR2 = &amp;ra2;</span><br><span class="line">	pR2-&gt;<span class="built_in">Draw</span>(<span class="string">"Testing2 Adapter"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++基础</tag>
      </tags>
  </entry>
  <entry>
    <title>C++面试问题</title>
    <url>/2025/C/C++/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h1 id="指针">指针</h1>
<h2 id="参数传递">参数传递</h2>
<p>下列程序是否正确：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">GetMemory</span><span class="params">(<span class="type">char</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">p = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">100</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Test</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> *str = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">GetMemory</span>(str);</span><br><span class="line"><span class="built_in">strcpy</span>(str, <span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>错误，程序崩溃。因为GetMemory 并不能传递动态内存， Test 函数中的 str
一直都是 NULL。strcpy(str, "hello world");将使程序崩溃。</p>
<p> </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span>* <span class="title">GetMemory</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> p[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Test</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> *str = <span class="literal">NULL</span>;</span><br><span class="line">	str = <span class="built_in">GetMemory</span>();</span><br><span class="line">	<span class="built_in">printf</span>(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可能返回乱码。因为GetMemory
返回的是指向“栈内存”的指针，该指针的地址不是
NULL，但其原现的内容已经被清除，新内容不可知。</p>
<p> </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">GetMemory2</span><span class="params">(<span class="type">char</span> **p, <span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">*p = <span class="keyword">new</span> <span class="type">char</span>[num];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Test</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> *str = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">GetMemory2</span>(&amp;str, <span class="number">100</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(str, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>能正常运行，但是内存泄漏。</p>
<p> </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">oid <span class="title">Test</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> *str = <span class="keyword">new</span>  <span class="type">char</span>[<span class="number">100</span>];</span><br><span class="line">	<span class="built_in">strcpy</span>(str, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">	<span class="keyword">delete</span>[ ] str;</span><br><span class="line">	<span class="keyword">if</span> (str != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">strcpy</span>(str,<span class="string">&quot;world&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(str);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>篡改动态内存区的内容，后果难以预料，非常危险。因为 delete[
]str;之后，str成为野指针(需要str = NULL;)if(str !=
NULL)语句不起作用。</p>
<h1 id="编程">编程</h1>
<h2 id="不用c库函数自行实现strcpy">不用C++库函数，自行实现strcpy</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span> *<span class="title">strcpy</span><span class="params">(<span class="type">char</span> *strDest, <span class="type">const</span> <span class="type">char</span> *strSrc)</span></span>;</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">assert</span>((strDest!=<span class="literal">NULL</span>) &amp;&amp; (strSrc !=<span class="literal">NULL</span>));</span><br><span class="line"><span class="type">char</span> *address = strDest; </span><br><span class="line"><span class="keyword">while</span>( (*strDest++ = * strSrc++) != ‘\<span class="number">0</span>’ )</span><br><span class="line">  ;</span><br><span class="line"><span class="keyword">return</span> address ; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>复杂度分析</title>
    <url>/2025/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/leetcode%E7%9C%9F%E9%A2%98%E5%88%86%E7%B1%BB/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/leetcode%E5%88%86%E7%B1%BB%E8%AE%B2%E8%A7%A3/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="什么是大o">什么是大O</h1>
<p>n表示数据规模，则<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="7.848ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3469 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(1702,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2091,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2691,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3080,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>表示运行算法所需要执行的指令数，和<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.362ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1928 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1539,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>成正比。</p>
<p>一个算法有多个步骤，每个步骤规模相同但时间复杂度不同，最终的时间复杂度以最高的那个为准。</p>
<p> </p>
<h1 id="对数据规模的概念">对数据规模的概念</h1>
<p>如果想要在1s之内解决问题：</p>
<ul>
<li><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.832ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 2577.6 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2188.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>的算法可以处理大约<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.25ex" height="2.022ex" role="img" focusable="false" viewBox="0 -871.8 1436.6 893.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mn" transform="translate(1033,393.1) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g></g></svg></mjx-container></span>级别的数据；</li>
<li><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.844ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2141 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1752,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>的算法可以处理大约<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.25ex" height="2.005ex" role="img" focusable="false" viewBox="0 -864 1436.6 886"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mn" transform="translate(1033,393.1) scale(0.707)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g></g></g></g></svg></mjx-container></span>级别的数据；</li>
<li><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.052ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4001 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1752,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(2050,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(2535,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(3012,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3612,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>的算法可以处理大约<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.25ex" height="2.02ex" role="img" focusable="false" viewBox="0 -871.1 1436.6 893.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mn" transform="translate(1033,393.1) scale(0.707)"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path></g></g></g></g></svg></mjx-container></span>级别的数据；</li>
</ul>
<p>这个结论只是执行简单的数据操作，实际还需要再低估一下。</p>
<p> </p>
<h1 id="空间复杂度">空间复杂度</h1>
<ul>
<li>多开一个辅助数组：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.844ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2141 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1752,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>;</li>
<li>多开一个辅助的二维数组：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.832ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 2577.6 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2188.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></li>
<li>多开常数空间：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.618ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2041 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1152,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1652,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>;</li>
</ul>
<p>需要注意：递归调用是有空间代价的，递归的深度就是空间复杂度。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//计算n以内数据的和</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//空间复杂度O(1)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sum1</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">{</span><br><span class="line">    assert(n &gt;= <span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">    {</span><br><span class="line">        ret += i;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归调用：空间复杂度O(n)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sum2</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">{</span><br><span class="line">    assert(n&gt;=<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> n + sum2(n<span class="number">-1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> </p>
<h1 id="简单的时间复杂度分析">简单的时间复杂度分析</h1>
<h2 id="o1">O(1)</h2>
<p>常数级的算法很简单，没有数据规模的变化</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// O(1)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swapTwoInts</span><span class="params">(<span class="type">int</span> &amp;a , <span class="type">int</span> &amp;b)</span>{</span><br><span class="line">    <span class="type">int</span> temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="on">O(n)</h2>
<p>O(n)的算法典型的特征就是有个循环，并且循环的次数和n相关。</p>
<p>其实正常来说，应该是<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.563ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2901 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(1912,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2512,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>，其中C是个常数，且不一定大于1</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// O(n)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> n)</span>{</span><br><span class="line"></span><br><span class="line">    assert(n &gt;= <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>( <span class="type">int</span> i = <span class="number">0</span> ; i &lt;= n ; i ++ )</span><br><span class="line">        ret += i;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串反转，只需要进行1/2次的swap操作即可</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">reverse</span><span class="params">(<span class="built_in">string</span> &amp;s)</span>{</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n = s.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; n/<span class="number">2</span> ; i ++)</span><br><span class="line">        swap( s[i] , s[n<span class="number">-1</span>-i] );</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="on2">O(n^2)</h2>
<p>见到算法内部有双重循环，每层循环都是n相关基本就八九不离十了。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//选择排序算法</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">selectionSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++){</span><br><span class="line">        <span class="type">int</span> minIndex = i;</span><br><span class="line">        <span class="keyword">for</span>( <span class="type">int</span> j = i + <span class="number">1</span> ; j &lt; n ; j ++ )</span><br><span class="line">            <span class="keyword">if</span>( arr[j] &lt; arr[minIndex] )</span><br><span class="line">                minIndex = j;</span><br><span class="line"></span><br><span class="line">        swap( arr[i] , arr[minIndex] );</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>千万要注意两层循环都要和n相关，不要看到双重循环就认为是<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.345ex" height="1.912ex" role="img" focusable="false" viewBox="0 -833.9 1036.6 844.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container></span></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//第二重循环哪怕循环300w次，这个也是O(n)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printInformation</span><span class="params">(<span class="type">int</span> n)</span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>( <span class="type">int</span> i = <span class="number">1</span> ; i &lt;= n ; i ++ )</span><br><span class="line">        <span class="keyword">for</span>( <span class="type">int</span> j = <span class="number">1</span> ; j &lt;= <span class="number">30</span> ; j ++ )</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Class "</span> &lt;&lt; i &lt;&lt; <span class="string">" - "</span> &lt;&lt; <span class="string">"No. "</span> &lt;&lt; j &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="ologn">O(logn)</h2>
<p>经典的二分查找法：</p>
<p><img src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%8E%A9%E8%BD%AC%E7%AE%97%E6%B3%95%E9%9D%A2%E8%AF%95/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//二分查找法</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n, <span class="type">int</span> target)</span>{</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>( l &lt;= r ){</span><br><span class="line">        <span class="type">int</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(arr[mid] == target) <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">if</span>(arr[mid] &gt; target) r = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p> </p>
<p>将数字整形转化为字符串：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> <span class="title function_">intToString</span><span class="params">(<span class="type">int</span> num)</span>{</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> s = <span class="string">""</span>;</span><br><span class="line">    <span class="built_in">string</span> sign = <span class="string">"+"</span>;</span><br><span class="line">    <span class="keyword">if</span>(num &lt; <span class="number">0</span>){</span><br><span class="line">        num = -num;</span><br><span class="line">        sign = <span class="string">"-"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(num){</span><br><span class="line">        s += <span class="string">'0'</span> + num % <span class="number">10</span>;</span><br><span class="line">        num /= <span class="number">10</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(s == <span class="string">""</span>)</span><br><span class="line">        s = <span class="string">"0"</span>;</span><br><span class="line"></span><br><span class="line">    reverse(s);</span><br><span class="line">    <span class="keyword">if</span>(sign == <span class="string">"-"</span>)</span><br><span class="line">        <span class="keyword">return</span> sign + s;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>分析算法思想，核心在" num /=
10"步中，就是n经过几次“除以10”操作后等于0，那么就是<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.581ex;" xmlns="http://www.w3.org/2000/svg" width="17.543ex" height="2.278ex" role="img" focusable="false" viewBox="0 -750 7754 1006.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1311,-241.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g></g></g><g data-mml-node="mo" transform="translate(2068.1,0)"><path data-c="2061" d=""></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2234.8,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(3112.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(4168.3,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(4931.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5320.3,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"></path></g><g data-mml-node="mo" transform="translate(6598.3,0)"><path data-c="2061" d=""></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(6765,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(7365,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>;</p>
<p> </p>
<p>虽然上面两个例子，一个是以2为底，一个是以10为底，但都是<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.112ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3585.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"></path></g><g data-mml-node="mo" transform="translate(2430,0)"><path data-c="2061" d=""></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2596.7,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(3196.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>，这个可以通过对数函数的换底公式来理解：有换底公式<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="23.519ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 10395.5 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1311,-241.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1735.1,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(1901.7,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g><g data-mml-node="mtd" transform="translate(2789.7,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1333.6,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1311,-241.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1735.1,0)"><path data-c="2061" d=""></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1901.7,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g></g><g data-mml-node="mo" transform="translate(3886.5,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(4886.7,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1311,-241.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1664.3,0)"><path data-c="2061" d=""></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1831,0)"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g></g></g></g></g></g></svg></mjx-container></span>，可见<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.562ex;" xmlns="http://www.w3.org/2000/svg" width="6.312ex" height="2.132ex" role="img" focusable="false" viewBox="0 -694 2789.7 942.4"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1311,-241.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1735.1,0)"><path data-c="2061" d=""></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1901.7,0)"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g></g></svg></mjx-container></span>和<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.564ex;" xmlns="http://www.w3.org/2000/svg" width="6.152ex" height="2.134ex" role="img" focusable="false" viewBox="0 -694 2719 943.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1311,-241.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1664.3,0)"><path data-c="2061" d=""></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1831,0)"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g></g></svg></mjx-container></span>之间只相差一个常数<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.562ex;" xmlns="http://www.w3.org/2000/svg" width="5.273ex" height="2.132ex" role="img" focusable="false" viewBox="0 -694 2330.7 942.4"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1311,-241.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1735.1,0)"><path data-c="2061" d=""></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1901.7,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g></g></g></svg></mjx-container></span>，在时间复杂度下可以直接理解为<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.764ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3873.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"></path></g><g data-mml-node="mo" transform="translate(2430,0)"><path data-c="2061" d=""></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2596.7,0)"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g><g data-mml-node="mo" transform="translate(3484.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p>
<p> </p>
<p>还需要注意，双重循环也可能出现logN的复杂度，需要注意量增长的规模：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//复杂度:O(nlogn)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">hello</span><span class="params">(<span class="type">int</span> n)</span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>( <span class="type">int</span> sz = <span class="number">1</span> ; sz &lt; n ; sz += sz )</span><br><span class="line">        <span class="keyword">for</span>( <span class="type">int</span> i = <span class="number">1</span> ; i &lt; n ; i ++ )</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello, Algorithm!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//外层循环每次增长可以理解为sz*2</span></span><br><span class="line"><span class="comment">//其实就可以理解为n经过几次“除以2”的操作后等于1，外层循环复杂度O(logn)</span></span><br><span class="line"><span class="comment">//内层循环复杂度是O(n)</span></span><br><span class="line"><span class="comment">//合起来是O(nlogn)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否为素数</span></span><br><span class="line"><span class="comment">// O(sqrt(n))</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">isPrime</span><span class="params">(<span class="type">int</span> num)</span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( num &lt;= <span class="number">1</span> ) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>( num == <span class="number">2</span> ) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>( num % <span class="number">2</span> == <span class="number">0</span> ) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x = <span class="number">3</span> ; x * x &lt;= num ; x += <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span>( num%x == <span class="number">0</span> )</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure>
<p> </p>
<h1 id="递归算法的复杂度分析">递归算法的复杂度分析</h1>
<p>面对递归算法需要具体问题具体分析。</p>
<h2 id="递归中只会进行一次递归调用">递归中只会进行一次递归调用</h2>
<p><strong>如果递归函数中只进行一次递归调用，递归深度为depth，在每个递归函数中的时间复杂度为T，则总体的时间复杂度为<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="12.705ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5615.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(2078.2,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mi" transform="translate(2800.4,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(3320.4,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(3786.4,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(4289.4,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(4650.4,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mo" transform="translate(5226.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>，既只需关注递归的深度</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//递归调用的二分查找法</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> target)</span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(l &gt; r)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> mid = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(arr[mid] == target)</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(arr[mid] &gt; target)</span><br><span class="line">        <span class="keyword">return</span> binarySearch(arr, l, mid - <span class="number">1</span>, target);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> binarySearch(arr, mid + <span class="number">1</span>, r, target);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>  二分查找法很容易用递归实现，上述代码每次调用时，内部要么直接返回，要么数组左半边调用递归，要么数组右半边调用递归，只会调用一次，所以分析时间复杂度只有看递归的深度即可。</p>
<p>  每次调用数组减少一半，是典型的logn情况，所以复杂度为<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.112ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3585.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"></path></g><g data-mml-node="mo" transform="translate(2430,0)"><path data-c="2061" d=""></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2596.7,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(3196.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sum,O(n)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> n)</span>{</span><br><span class="line"></span><br><span class="line">    assert(n &gt;= <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> n + sum(n - <span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求x的n次方：O(logn)</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">pow</span><span class="params">(<span class="type">double</span> x, <span class="type">int</span> n)</span>{</span><br><span class="line"></span><br><span class="line">    assert(n &gt;= <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> t = <span class="built_in">pow</span>(x, n / <span class="number">2</span>); <span class="comment">//每次减半，logn</span></span><br><span class="line">    <span class="keyword">if</span>(n % <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> x * t * t;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> t * t;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="递归中进行多次递归调用">递归中进行多次递归调用</h2>
<p><strong>当递归中有多次递归调用时，就需要关注递归调用的次数了。</strong>如果递归中只调用一次，深度就是次数，但如果调用了多次，那么深度和次数就是两个概念了。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//O(2^n)</span></span><br><span class="line"><span class="comment">//这个是指数级的算法，是个非常慢的算法</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">{</span><br><span class="line">    assert(n &gt;= <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> f(n<span class="number">-1</span>) + f(n<span class="number">-1</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p> </p>
<h1 id="均摊复杂度分析">均摊复杂度分析</h1>
<p>  有时候会遇到这种情况：解决某个问题时运用了一系列算法，某个算法的复杂度很高，但这个算法可以降低其他算法的复杂度，这时候就需要计算分摊复杂度。</p>
<p>  均摊复杂度的经典问题就是动态数组vector。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">template &lt;typename T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyVector</span>{</span></span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    T* data;</span><br><span class="line">    <span class="type">int</span> size;       <span class="comment">// 存储数组中的元素个数</span></span><br><span class="line">    <span class="type">int</span> capacity;   <span class="comment">// 存储数组中可以容纳的最大的元素个数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 复杂度为 O(n)</span></span><br><span class="line">    <span class="type">void</span> <span class="title function_">resize</span><span class="params">(<span class="type">int</span> newCapacity)</span>{</span><br><span class="line"></span><br><span class="line">        assert(newCapacity &gt;= size);</span><br><span class="line">        T *newData = new T[newCapacity];</span><br><span class="line">        <span class="keyword">for</span>( <span class="type">int</span> i = <span class="number">0</span> ; i &lt; size ; i ++ )</span><br><span class="line">            newData[i] = data[i];</span><br><span class="line">        delete[] data;</span><br><span class="line"></span><br><span class="line">        data = newData;</span><br><span class="line">        capacity = newCapacity;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    MyVector(){</span><br><span class="line"></span><br><span class="line">        data = new T[<span class="number">100</span>];</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        capacity = <span class="number">100</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    ~MyVector(){</span><br><span class="line"></span><br><span class="line">        delete[] data;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 平均复杂度为 O(1)</span></span><br><span class="line">    <span class="type">void</span> <span class="title function_">push_back</span><span class="params">(T e)</span>{</span><br><span class="line">        <span class="comment">//当元素到达容量上限时，需要调用resize扩大空间</span></span><br><span class="line">        <span class="keyword">if</span>(size == capacity)</span><br><span class="line">            resize(<span class="number">2</span> * capacity);</span><br><span class="line"></span><br><span class="line">        data[size++] = e;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 平均复杂度为 O(1)</span></span><br><span class="line">    T <span class="title function_">pop_back</span><span class="params">()</span>{</span><br><span class="line"></span><br><span class="line">        assert(size &gt; <span class="number">0</span>);</span><br><span class="line">        size --;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data[size];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%8E%A9%E8%BD%AC%E7%AE%97%E6%B3%95%E9%9D%A2%E8%AF%95/%E5%9D%87%E6%91%8A%E5%A4%8D%E6%9D%82%E5%BA%A61.png"></p>
<p><img src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%8E%A9%E8%BD%AC%E7%AE%97%E6%B3%95%E9%9D%A2%E8%AF%95/%E5%9D%87%E6%91%8A%E5%A4%8D%E6%9D%82%E5%BA%A62.png"></p>
<p><img src="https://my-hexo-blog-1308129409.cos.ap-beijing.myqcloud.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%8E%A9%E8%BD%AC%E7%AE%97%E6%B3%95%E9%9D%A2%E8%AF%95/%E5%9D%87%E6%91%8A%E5%A4%8D%E6%9D%82%E5%BA%A63.png"></p>
<p> </p>
<p> </p>
<p>  上面的代码只在push操作时resize了空间，但是没有在pop操作时resize空间。我们当然可以参考push操作，在pop到capacity一半时resize容量，但这里涉及一个问题，就是要防止<strong>复杂度震荡</strong>。</p>
<p>  考虑这个问题：当push到临界点时resize一倍空间，然后立即pop，此时又resize为一半，然后立即push，这种极端场景下时间复杂度无法均摊，会退化为<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.844ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2141 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1752,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>。</p>
<p>  如果想避免这种场景，可以不再临界点处resize，当pop操作到达capacity的1/4处时，resize为1/2</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 平均复杂度为 O(1)</span></span><br><span class="line">T <span class="title function_">pop_back</span><span class="params">()</span>{</span><br><span class="line"></span><br><span class="line">    assert(size &gt; <span class="number">0</span>);</span><br><span class="line">    T ret = data[size<span class="number">-1</span>]; <span class="comment">//这里一定要提前拿出来，resize操作会修改data</span></span><br><span class="line">    size --;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在size达到静态数组最大容量的1/4时才进行resize</span></span><br><span class="line">    <span class="comment">// resize的容量是当前最大容量的1/2</span></span><br><span class="line">    <span class="comment">// 防止复杂度的震荡</span></span><br><span class="line">    <span class="keyword">if</span>(size == capacity / <span class="number">4</span>)</span><br><span class="line">        resize(capacity / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构与算法</category>
        <category>leetcode真题分类</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
